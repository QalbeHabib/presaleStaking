{
  "address": "0x1605B6d5aFA7c6a7D2Dd5cd65A95e1C5dF0A867d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SaleToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_MinTokenTobuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokenSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockedStakeExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresalePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refereeReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimedWithTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensPreFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTokenAddress",
          "type": "address"
        }
      ],
      "name": "ChangeTokentoSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinAmount",
          "type": "uint256"
        }
      ],
      "name": "EditMinTokenToBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "ExcludeAccouctFromMinBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_PURCHASE_FOR_REFERRAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MinTokenTobuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_APY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SaleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalUSDTRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WithdrawAllContractFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "WithdrawAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithUSDT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateBaseReservedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalReservedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referee",
          "type": "address"
        }
      ],
      "name": "canBeReferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEligible",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canReferOthers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "changeFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "changeUSDTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferralRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_UsdtHardcap",
          "type": "uint256"
        }
      ],
      "name": "createPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ethBuyHelper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ethToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getClaimableReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReferralChain",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferralProgramStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPercentageChangeAllowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingAvailability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_canStake",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_remainingCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentFilled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAPY",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRewardsCommitted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remainingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserCollectedReferrals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserReferralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isQualifiedReferrer",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "potentialReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasQualifiedPurchase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasUsedReferral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludeMinToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenPreFunded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "pausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preFundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "presale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UsdtHardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "Active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnableClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "processReferralRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "recordReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralData",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasReferred",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralPercentageChangeTimeLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "safeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_intent",
          "type": "bool"
        }
      ],
      "name": "setStakingIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStakingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReferralRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unPausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "updateMaxReferralRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_Hardcap",
          "type": "uint256"
        }
      ],
      "name": "updatePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_percentage",
          "type": "uint8"
        }
      ],
      "name": "updateReferralRewardPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "updateStakingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdtBuyHelper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdtToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakingIntent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TotalBoughtTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalCollectedReferral",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8d9f6fcc49f10c387c3e1f0dd4b42252523e03ad7adb48512e986ddd294a91e",
  "receipt": {
    "to": null,
    "from": "0x0E816E3E3a08dA027ED0f5D74965CCE3b43a1C8d",
    "contractAddress": "0x1605B6d5aFA7c6a7D2Dd5cd65A95e1C5dF0A867d",
    "transactionIndex": 0,
    "gasUsed": "5214190",
    "logsBloom": "0x00000000000000000002000000000000000000000000000000800000000000000000000000000008000000200000000000000000000000000000000000000000000000000000000000000000000000000001000000000200000000000000000000000000020000000000010000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000200000000000000000000000000000000000000000",
    "blockHash": "0x7cb91489e635d9b486bce5f69a8f787728e4d2ebc20c53195ab013015e2e20ee",
    "transactionHash": "0xb8d9f6fcc49f10c387c3e1f0dd4b42252523e03ad7adb48512e986ddd294a91e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 51811949,
        "transactionHash": "0xb8d9f6fcc49f10c387c3e1f0dd4b42252523e03ad7adb48512e986ddd294a91e",
        "address": "0x1605B6d5aFA7c6a7D2Dd5cd65A95e1C5dF0A867d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000e816e3e3a08da027ed0f5d74965cce3b43a1c8d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7cb91489e635d9b486bce5f69a8f787728e4d2ebc20c53195ab013015e2e20ee"
      }
    ],
    "blockNumber": 51811949,
    "cumulativeGasUsed": "5214190",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A26d803C2e796601794f8C5609549643832702C",
    "0x4D1D5fD48F7d6BAE9fd45955Edc292575B0D0D1f",
    "0x8f55e31c026Dc225e3497BE3B6B8f8A5123155CC",
    "10000000000000000000",
    "100000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "8b522b9ca7f8929484fca89d42cb4d3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockedStakeExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refereeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimedWithTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensPreFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"ChangeTokentoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinAmount\",\"type\":\"uint256\"}],\"name\":\"EditMinTokenToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_FOR_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalUSDTRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawAllContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"WithdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateBaseReservedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalReservedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"canBeReferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEligible\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canReferOthers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralChain\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralProgramStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPercentageChangeAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAvailability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_remainingCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFilled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAPY\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardsCommitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserCollectedReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isQualifiedReferrer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasQualifiedPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasUsedReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenPreFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preFundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"processReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"recordReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasReferred\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentageChangeTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_intent\",\"type\":\"bool\"}],\"name\":\"setStakingIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"updateMaxReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"updateReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateStakingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakingIntent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalBoughtTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalCollectedReferral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"ChangeTokentoSell(address)\":{\"details\":\"Update the sale token address\"},\"EditMinTokenToBuy(uint256)\":{\"details\":\"Update minimum token purchase amount\"},\"ExcludeAccouctFromMinBuy(address,bool)\":{\"details\":\"Exclude account from minimum buy requirement\"},\"WithdrawAllContractFunds()\":{\"details\":\"Withdraw all ETH balance from contract\"},\"WithdrawAllTokens(address)\":{\"details\":\"Override withdraw all tokens to account for staking rewards\"},\"buyWithEth(address,bool)\":{\"details\":\"Buy into a presale using ETH with option for immediate staking\"},\"buyWithUSDT(uint256,address,bool)\":{\"details\":\"Buy into a presale using USDT with option for immediate staking\"},\"calculateBaseReservedTokens()\":{\"details\":\"Override the base calculation to include referral rewards\"},\"calculateTotalReservedTokens()\":{\"details\":\"Calculate total reserved tokens across all systems (referrals and staking)\",\"returns\":{\"_0\":\"Total reserved tokens that can't be withdrawn\"}},\"canBeReferred(address,address)\":{\"details\":\"Check if a user can be referred by a specific referrer\"},\"canReferOthers(address)\":{\"details\":\"Check if a user has a valid referral link to share\"},\"changeFundWallet(address)\":{\"details\":\"Change fund receiving wallet\"},\"changeUSDTToken(address)\":{\"details\":\"Change USDT token address\"},\"claimAmount(uint256)\":{\"details\":\"Claim function to handle only non-staked tokens\"},\"claimMultiple(uint256[])\":{\"details\":\"To claim tokens from multiple presales\"},\"claimReferralRewards()\":{\"details\":\"Claim referral rewards\"},\"claimableAmount(address,uint256)\":{\"details\":\"Helper funtion to get claimable tokens for a given presale\"},\"constructor\":{\"details\":\"Constructor sets up the contract parameters\",\"params\":{\"_MinTokenTobuy\":\"Minimum tokens that can be purchased\",\"_SaleToken\":\"Sale token address\",\"_oracle\":\"Chainlink oracle for ETH price feed\",\"_totalTokenSupply\":\"Total token supply (100,000,000,000)\",\"_usdt\":\"USDT token address\"}},\"createPresale(uint256,uint256,uint256,uint256)\":{\"details\":\"Create a new presale\"},\"enableClaim(uint256,bool)\":{\"details\":\"Enable claiming for a presale\"},\"endPresale()\":{\"details\":\"End the presale\"},\"ethBuyHelper(uint256,uint256)\":{\"details\":\"Helper funtion to get ETH price for given amount\"},\"ethToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for eth amount\"},\"getClaimableReferralRewards(address)\":{\"details\":\"Get claimable referral rewards for a user\",\"params\":{\"_user\":\"Address of the user\"}},\"getLatestPrice()\":{\"details\":\"Get the latest ETH price from Chainlink\"},\"getReferralChain(address)\":{\"details\":\"Get the entire referral chain for a user\"},\"getReferralProgramStats()\":{\"details\":\"Get referral program stats\"},\"getStakingAvailability()\":{\"details\":\"Quick check if staking is available and capacity info\"},\"getStakingStats()\":{\"details\":\"Get staking program statistics\"},\"getUserCollectedReferrals(address)\":{\"details\":\"Get user's total collected referral rewards\"},\"getUserReferralInfo(address)\":{\"details\":\"Get user referral info for frontend\"},\"getUserStakingInfo(address)\":{\"details\":\"Get user staking information\"},\"maxStakingRewards()\":{\"details\":\"Public getter for max staking rewards\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pausePresale(uint256)\":{\"details\":\"Pause a presale\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"preFundContract()\":{\"details\":\"Pre-fund the contract with tokens for presale, referrals, and staking\"},\"processReferralRewards(address,uint256)\":{\"details\":\"Process referral rewards after a successful purchase\",\"params\":{\"_tokenAmount\":\"Amount of tokens purchased\",\"_user\":\"Address of the user who made a purchase\"}},\"recordReferral(address)\":{\"details\":\"Records a valid referral relationship\",\"params\":{\"_referrer\":\"Address of the referrer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeWithdraw(address,uint256,address)\":{\"details\":\"Safe withdrawal function for accumulated tokens\",\"params\":{\"_amount\":\"Amount to withdraw\",\"_recipient\":\"Recipient address\",\"_token\":\"Token address\"}},\"setStakingIntent(bool)\":{\"details\":\"Set staking intent for a user\",\"params\":{\"_intent\":\"Whether to stake tokens upon claim\"}},\"setStakingStatus(bool)\":{\"details\":\"Toggle staking status (active/inactive)\"},\"stakeTokens(uint256)\":{\"details\":\"Stake tokens with 1-year lock and 200% APY\"},\"startPresale()\":{\"details\":\"Start the presale\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPausePresale(uint256)\":{\"details\":\"Unpause a presale\"},\"updateMaxReferralRewards(uint256)\":{\"details\":\"Update the maximum referral rewards (5% of total supply)\",\"params\":{\"_totalSupply\":\"The total token supply to calculate 5% from\"}},\"updatePresale(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Update presale parameters\"},\"updateReferralRewardPercentage(uint8)\":{\"details\":\"Change referral reward percentage with timelock protection\",\"params\":{\"_percentage\":\"New percentage (1-20)\"}},\"updateStakingCap(uint256)\":{\"details\":\"Update staking cap\"},\"usdtBuyHelper(uint256,uint256)\":{\"details\":\"Helper funtion to get USDT price for given amount\"},\"usdtToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for given usdt amount\"},\"withdrawStake()\":{\"details\":\"Withdraw staked tokens and rewards after lock period\"}},\"title\":\"PreSale and Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract handles token presale, referral rewards, and staking functionality\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sale.sol\":\"Sale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/ReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./SaleBase.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\n\\n/**\\n * @title Referral Manager Contract\\n * @notice This contract handles token referral functionality\\n */\\ncontract ReferralManager is SaleBase {\\n    // Referral system constants and variables\\n    uint256 public constant MINIMUM_PURCHASE_FOR_REFERRAL = 1000 * 10**18; // 1000 tokens minimum to qualify for referral\\n    uint8 public referralRewardPercentage = 20; // Default 20% reward (configurable)\\n    uint256 public totalReferralRewardsIssued;\\n\\n    // Anti-gaming time lock for referral changes\\n    uint256 public referralPercentageChangeTimeLock;\\n\\n    // Referral system mappings\\n    mapping(address => ISaleStructs.ReferralData) public referralData;\\n    mapping(address => bool) public hasQualifiedPurchase; // Track if user has purchased enough to qualify as referrer\\n    mapping(address => bool) public hasUsedReferral; // Prevent using multiple referrals\\n    mapping(address => mapping(address => bool)) private referredUserExists;\\n\\n    // Events\\n    event ReferralRecorded(address indexed referrer, address indexed referee, uint256 timestamp);\\n    event ReferralRewardsClaimed(address indexed user, uint256 amount, uint256 timestamp);\\n    event ReferralPercentageUpdated(uint256 previousPercentage, uint256 newPercentage, uint256 timestamp);\\n    event ReferralRewardsAdded(address indexed referrer, address indexed referee, uint256 referrerReward, uint256 refereeReward, uint256 timestamp);\\n\\n    /**\\n     * @dev Constructor initializes with same parameters as SaleBase\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n        SaleBase(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply) \\n    {\\n        referralPercentageChangeTimeLock = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Override the base calculation to include referral rewards\\n     */\\n    function calculateBaseReservedTokens() public view virtual override returns (uint256) {\\n        // Include referral rewards in the reserved tokens\\n        return totalReferralRewardsIssued;\\n    }\\n\\n    /**\\n     * @dev Override withdraw all tokens to account for referral rewards\\n     */\\n    function WithdrawAllTokens(address _token) external virtual override onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for rewards\\n            uint256 reservedTokens = calculateBaseReservedTokens();\\n            \\n            // Get current contract balance\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            \\n            // Calculate available amount to withdraw\\n            uint256 availableAmount = contractBalance > reservedTokens ? contractBalance - reservedTokens : 0;\\n            require(availableAmount > 0, \\\"No tokens available to withdraw\\\");\\n            \\n            // Transfer available tokens\\n            require(IERC20(_token).transfer(fundReceiver, availableAmount), \\\"Token transfer failed\\\");\\n        } else {\\n            // For other tokens, withdraw all\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(contractBalance > 0, \\\"No tokens to withdraw\\\");\\n            \\n            require(IERC20(_token).transfer(fundReceiver, contractBalance), \\\"Token transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Change referral reward percentage with timelock protection\\n     * @param _percentage New percentage (1-20)\\n     */\\n    function updateReferralRewardPercentage(uint8 _percentage) external onlyOwner {\\n        require(_percentage > 0 && _percentage <= 20, \\\"Invalid percentage\\\");\\n        require(block.timestamp >= referralPercentageChangeTimeLock, \\\"Timelock active\\\");\\n        \\n        // Set new timelock for future changes\\n        referralPercentageChangeTimeLock = block.timestamp + 24 hours;\\n        \\n        emit ReferralPercentageUpdated(referralRewardPercentage, _percentage, block.timestamp);\\n        referralRewardPercentage = _percentage;\\n    }\\n\\n    /**\\n     * @dev Records a valid referral relationship\\n     * @param _referrer Address of the referrer\\n     */\\n    function recordReferral(address _referrer) public {\\n        require(_referrer != address(0) && _referrer != msg.sender, \\\"Invalid referrer\\\");\\n        require(!hasUsedReferral[msg.sender], \\\"Already referred\\\");\\n        require(hasQualifiedPurchase[_referrer], \\\"Unqualified referrer\\\");\\n        \\n        // Prevent circular referrals\\n        require(referralData[_referrer].referrer != msg.sender, \\\"Circular referral\\\");\\n        \\n        // Check for circular chains\\n        address currentReferrer = referralData[_referrer].referrer;\\n        while (currentReferrer != address(0)) {\\n            require(currentReferrer != msg.sender, \\\"Circular chain\\\");\\n            currentReferrer = referralData[currentReferrer].referrer;\\n        }\\n        \\n        // Record the referral relationship\\n        referralData[msg.sender].referrer = _referrer;\\n        users[msg.sender].referrer = _referrer;\\n        hasUsedReferral[msg.sender] = true;\\n        \\n        // Update referrer stats\\n        ISaleStructs.ReferralData storage refData = referralData[_referrer];\\n        refData.hasReferred = true;\\n        refData.referralCount++;\\n        \\n        // Add user to referrer's referredUsers array\\n        if (!referredUserExists[_referrer][msg.sender]) {\\n            users[_referrer].referredUsers.push(msg.sender);\\n            referredUserExists[_referrer][msg.sender] = true;\\n        }\\n        \\n        emit ReferralRecorded(_referrer, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Process referral rewards after a successful purchase\\n     * @param _user Address of the user who made a purchase\\n     * @param _tokenAmount Amount of tokens purchased\\n     */\\n    function processReferralRewards(address _user, uint256 _tokenAmount) public {\\n        if (_tokenAmount >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            hasQualifiedPurchase[_user] = true;\\n            \\n            address referrer = referralData[_user].referrer;\\n            if (referrer != address(0)) {\\n                // Calculate rewards\\n                uint256 referrerReward = _tokenAmount * referralRewardPercentage / 100;\\n                uint256 totalNewRewards = referrerReward * 2; // Both get same reward\\n                \\n                // Update rewards if under max cap\\n                if (totalReferralRewardsIssued + totalNewRewards <= maxReferralRewards) {\\n                    // Update referral data structs\\n                    referralData[referrer].totalReferralRewards += referrerReward;\\n                    referralData[_user].totalReferralRewards += referrerReward;\\n                    \\n                    // Update global rewards counter\\n                    totalReferralRewardsIssued += totalNewRewards;\\n                    \\n                    emit ReferralRewardsAdded(referrer, _user, referrerReward, referrerReward, block.timestamp);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get claimable referral rewards for a user\\n     * @param _user Address of the user\\n     */\\n    function getClaimableReferralRewards(address _user) public view returns (uint256) {\\n        ISaleStructs.ReferralData memory data = referralData[_user];\\n        return data.totalReferralRewards - data.claimedReferralRewards;\\n    }\\n\\n    /**\\n     * @dev Claim referral rewards\\n     */\\n    function claimReferralRewards() public nonReentrant returns (bool) {\\n        uint256 amount = getClaimableReferralRewards(msg.sender);\\n        require(amount > 0, \\\"No rewards to claim\\\");\\n        \\n        // Verify there are enough tokens in the contract\\n        require(amount <= IERC20(SaleToken).balanceOf(address(this)), \\\"Not enough tokens in contract\\\");\\n        \\n        // Update claimed amount first to prevent reentrancy\\n        referralData[msg.sender].claimedReferralRewards += amount;\\n        \\n        // Update the total collected referral rewards in the users mapping\\n        users[msg.sender].TotalCollectedReferral += amount;\\n        \\n        // Transfer tokens\\n        require(IERC20(SaleToken).transfer(msg.sender, amount), \\\"Token transfer failed\\\");\\n        \\n        emit ReferralRewardsClaimed(msg.sender, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Get user referral info for frontend\\n     */\\n    function getUserReferralInfo(address _user) external view returns (\\n        address referrer,\\n        uint256 totalRewards,\\n        uint256 claimedRewards,\\n        uint256 pendingRewards,\\n        bool isQualifiedReferrer,\\n        uint256 referralCount\\n    ) {\\n        ISaleStructs.ReferralData memory data = referralData[_user];\\n        return (\\n            data.referrer,\\n            data.totalReferralRewards,\\n            data.claimedReferralRewards,\\n            data.totalReferralRewards - data.claimedReferralRewards,\\n            hasQualifiedPurchase[_user],\\n            data.referralCount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get user's total collected referral rewards\\n     */\\n    function getUserCollectedReferrals(address _user) external view returns (uint256) {\\n        return users[_user].TotalCollectedReferral;\\n    }\\n\\n    /**\\n     * @dev Get referral program stats\\n     */\\n    function getReferralProgramStats() external view returns (\\n        uint256 currentPercentage,\\n        uint256 totalRewardsIssued,\\n        uint256 maxRewards,\\n        uint256 remainingRewards,\\n        uint256 nextPercentageChangeAllowed\\n    ) {\\n        return (\\n            referralRewardPercentage,\\n            totalReferralRewardsIssued,\\n            maxReferralRewards,\\n            maxReferralRewards - totalReferralRewardsIssued,\\n            referralPercentageChangeTimeLock\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the maximum referral rewards (5% of total supply)\\n     * @param _totalSupply The total token supply to calculate 5% from\\n     */\\n    function updateMaxReferralRewards(uint256 _totalSupply) external onlyOwner {\\n        require(_totalSupply > 0, \\\"Invalid total supply\\\");\\n        maxReferralRewards = _totalSupply * 5 / 100;\\n    }\\n\\n    /**\\n     * @dev Check if a user has a valid referral link to share\\n     */\\n    function canReferOthers(address _user) external view returns (bool) {\\n        return hasQualifiedPurchase[_user];\\n    }\\n\\n    /**\\n     * @dev Check if a user can be referred by a specific referrer\\n     */\\n    function canBeReferred(address _referrer, address _referee) external view returns (bool isEligible, uint8 reason) {\\n        if (hasUsedReferral[_referee]) return (false, 1); // Already referred\\n        if (_referrer == _referee) return (false, 2); // Self-referral\\n        if (!hasQualifiedPurchase[_referrer]) return (false, 3); // Unqualified referrer\\n        if (referralData[_referrer].referrer == _referee) return (false, 2); // Direct circular referral\\n        \\n        // Check for circular chain\\n        address currentReferrer = referralData[_referrer].referrer;\\n        while (currentReferrer != address(0)) {\\n            if (currentReferrer == _referee) return (false, 2); // Found in chain\\n            currentReferrer = referralData[currentReferrer].referrer;\\n        }\\n        \\n        return (true, 0); // Eligible\\n    }\\n    \\n    /**\\n     * @dev Get the entire referral chain for a user\\n     */\\n    function getReferralChain(address _user) external view returns (address[] memory) {\\n        // Count the depth of the referral chain\\n        uint256 chainDepth = 0;\\n        address current = _user;\\n        \\n        while (referralData[current].referrer != address(0)) {\\n            chainDepth++;\\n            current = referralData[current].referrer;\\n        }\\n        \\n        // Create array to hold the chain\\n        address[] memory chain = new address[](chainDepth + 1);\\n        \\n        // Fill the array\\n        chain[0] = _user;\\n        current = _user;\\n        for (uint256 i = 1; i <= chainDepth; i++) {\\n            current = referralData[current].referrer;\\n            chain[i] = current;\\n        }\\n        \\n        return chain;\\n    }\\n}\",\"keccak256\":\"0x30afb01c32e41f397cee4e4cc8302365884c491506b4ba38b83c8648bc36a0ca\",\"license\":\"MIT\"},\"contracts/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./StakingManager.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\nimport \\\"./interfaces/ISaleStructs.sol\\\";\\n\\n/**\\n * @title PreSale and Staking Contract\\n * @notice This contract handles token presale, referral rewards, and staking functionality\\n * @dev All tokens (presale, referral, staking) must be sent to the contract before starting\\n *\\n * Token Allocation:\\n * - 30% for presale (30,000,000,000 tokens)\\n * - 5% for referral rewards (5,000,000,000 tokens)\\n * - 20% for staking rewards (20,000,000,000 tokens)\\n *\\n * Total: 55% of total supply must be transferred to this contract\\n */\\ncontract Sale is StakingManager {\\n    // Events\\n    event TokensBought(\\n        address indexed user,\\n        uint256 indexed id,\\n        address indexed purchaseToken,\\n        uint256 tokensBought,\\n        uint256 amountPaid,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensClaimedWithTimestamp(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Constructor sets up the contract parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _SaleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply (100,000,000,000)\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n      StakingManager(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply)\\n    {}\\n\\n    /**\\n     * @dev Buy into a presale using USDT with option for immediate staking\\n     */\\n    function buyWithUSDT(\\n        uint256 usdAmount, \\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, usdtToTokens(presaleId, usdAmount))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Not pre-funded\\\");\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active, \\\"Inactive presale\\\");\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap, \\\"Hardcap limit\\\");\\n\\n        // Handle referral if provided and not zero address\\n        if (referrer != address(0)) {\\n            require(!SaleUtils.isContract(referrer), \\\"Contract referrer\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n        TotalUSDTRaised += usdAmount; \\n\\n        if (!isExcludeMinToken[msg.sender]) {\\n            require(tokens >= MinTokenTobuy, \\\"Min amount not met\\\");\\n        }\\n\\n        uint256 ourAllowance = USDTInterface.allowance(_msgSender(), address(this));\\n        require(usdAmount <= ourAllowance, \\\"Insufficient allowance\\\");\\n        \\n        (bool success, ) = address(USDTInterface).call(\\n            abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                _msgSender(),\\n                fundReceiver,\\n                usdAmount\\n            )\\n        );\\n        require(success, \\\"USDT transfer failed\\\");\\n        \\n        // Update users mapping with purchase data\\n        _updateUserData(tokens, usdAmount, referrer);\\n        \\n        // Handle tokens based on staking preference\\n        _handleTokensAfterPurchase(tokens, shouldStake);\\n        \\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(USDTInterface),\\n            tokens,\\n            usdAmount,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev Buy into a presale using ETH with option for immediate staking\\n     */\\n    function buyWithEth(\\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        payable\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, ethToTokens(presaleId, msg.value))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Not pre-funded\\\");\\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap, \\\"Hardcap limit\\\");\\n\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active, \\\"Inactive presale\\\");\\n        \\n        // Handle referral if provided\\n        if (referrer != address(0)) {\\n            require(!SaleUtils.isContract(referrer), \\\"Contract referrer\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        if (!isExcludeMinToken[msg.sender]) {\\n            require(tokens >= MinTokenTobuy, \\\"Min amount not met\\\");\\n        }\\n        \\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n        TotalUSDTRaised += usdAmount;\\n\\n        // Update user data and handle tokens\\n        _updateUserData(tokens, usdAmount, referrer);\\n        _handleTokensAfterPurchase(tokens, shouldStake);\\n\\n        SaleUtils.sendValue(payable(fundReceiver), msg.value);\\n        \\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(0),\\n            tokens,\\n            msg.value,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Update user data after purchase\\n     */\\n    function _updateUserData(uint256 tokens, uint256 usdAmount, address referrer) private {\\n        users[_msgSender()].TotalBoughtTokens += tokens;\\n        users[_msgSender()].TotalPaid += usdAmount;\\n        \\n        // Users who buy enough tokens qualify as referrers, regardless of whether they used a referrer themselves\\n        // This allows users to build their own referral chains even if they entered the system without a referrer\\n        if (tokens >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            hasQualifiedPurchase[_msgSender()] = true;\\n        }\\n        \\n        // Process referral rewards only if a referrer was provided\\n        if (referrer != address(0)) {\\n            processReferralRewards(_msgSender(), tokens);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Handle tokens after purchase based on staking preference\\n     */\\n    function _handleTokensAfterPurchase(uint256 tokens, bool shouldStake) private {\\n        if (shouldStake) {\\n            _handleTokenStaking(_msgSender(), tokens);\\n        } else {\\n            if (userClaimData[_msgSender()][presaleId].totalAmount > 0) {\\n                userClaimData[_msgSender()][presaleId].totalAmount += tokens;\\n            } else {\\n                userClaimData[_msgSender()][presaleId] = ISaleStructs.ClaimData(0, tokens, 0);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Claim function to handle only non-staked tokens\\n     */\\n    function claimAmount(uint256 _id)\\n        public\\n        checkPresaleId(_id)\\n        returns (bool)\\n    {\\n        uint256 amount = claimableAmount(msg.sender, _id);\\n        \\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        require(SaleToken != address(0), \\\"Token not set\\\");\\n        require(amount <= IERC20(SaleToken).balanceOf(address(this)), \\\"Insufficient funds\\\");\\n        require(presale[_id].isEnableClaim, \\\"Claiming disabled\\\");\\n\\n        userClaimData[msg.sender][_id].claimAt = block.timestamp;\\n        userClaimData[msg.sender][_id].claimedAmount += amount;\\n        \\n        // Process based on staking intent\\n        if (userStakingIntent[msg.sender]) {\\n            _handleTokenStaking(msg.sender, amount);\\n            userStakingIntent[msg.sender] = false;\\n        } else {\\n            bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n        \\n        emit TokensClaimedWithTimestamp(msg.sender, _id, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev To claim tokens from multiple presales\\n     */\\n    function claimMultiple(uint256[] calldata _ids) external returns (bool) {\\n        require(_ids.length > 0, \\\"Empty array\\\");\\n        for (uint256 i; i < _ids.length; i++) {\\n            require(claimAmount(_ids[i]), \\\"Claim failed\\\");\\n        }\\n        return true;\\n    }\\n} \",\"keccak256\":\"0x92caf9cbee0440ddc3991f58d3f18c831c985d41b57f99a6d58ad4d9b3ab6089\",\"license\":\"MIT\"},\"contracts/SaleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\nimport \\\"./interfaces/ISaleStructs.sol\\\";\\n\\ninterface Aggregator {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\n/**\\n * @title Sale Base Contract\\n */\\ncontract SaleBase is ReentrancyGuard, Ownable, Pausable {\\n    // State variables\\n    address public oracle; // Chainlink oracle address\\n    address public usdt; // USDT token address\\n    address public SaleToken; // Sale token address\\n    uint256 public MinTokenTobuy; // Min tokens to buy\\n    uint256 public TotalUSDTRaised; // Total USDT raised\\n    uint256 public totalTokenSupply; // Total supply of tokens\\n\\n    // Presale data\\n    uint256 public presaleId;\\n    uint256 public USDT_MULTIPLIER;\\n    uint256 public ETH_MULTIPLIER;\\n    address public fundReceiver;\\n    \\n    // Total supply and allocations\\n    uint256 public presaleTokens;\\n    uint256 public maxReferralRewards;\\n    uint256 private _maxStakingRewards;\\n\\n    // Track if the contract has been pre-funded\\n    bool public isTokenPreFunded = false;\\n\\n    IERC20Metadata public USDTInterface;\\n    Aggregator internal aggregatorInterface;\\n\\n    // Main mappings for presale functionality\\n    mapping(uint256 => bool) public paused;\\n    mapping(uint256 => ISaleStructs.Presale) public presale;\\n    mapping(address => mapping(uint256 => ISaleStructs.ClaimData)) public userClaimData;\\n    mapping(address => bool) public isExcludeMinToken;\\n    mapping(address => bool) public isAdmin;\\n    mapping(address => ISaleStructs.User) public users;\\n\\n    // Events\\n    event PresaleStarted(uint256 presaleId, uint256 cap, uint256 price, uint256 startTime, uint256 endTime);\\n    event PresaleEnded(uint256 presaleId, uint256 endTime);\\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\n    event OracleUpdated(address previousOracle, address newOracle, uint256 timestamp);\\n    event TokensPreFunded(address indexed token, uint256 amount, uint256 timestamp);\\n    event PresaleCreated(uint256 indexed _id, uint256 _totalTokens, uint256 _startTime, uint256 _endTime);\\n    \\n    /**\\n     * @dev Constructor initializes the sale parameters\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) Ownable(msg.sender) {\\n        _initialize(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply);\\n    }\\n    \\n    /**\\n     * @dev Internal initialization function\\n     */\\n    function _initialize(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) internal {\\n        require(_oracle != address(0), \\\"Zero oracle\\\");\\n        require(_usdt != address(0), \\\"Zero USDT\\\");\\n        require(_SaleToken != address(0), \\\"Zero token\\\");\\n        require(_MinTokenTobuy > 0, \\\"Zero min\\\");\\n        require(_totalTokenSupply > 0, \\\"Zero supply\\\");\\n        \\n        aggregatorInterface = Aggregator(_oracle);\\n        SaleToken = _SaleToken;\\n        MinTokenTobuy = _MinTokenTobuy;\\n        USDTInterface = IERC20Metadata(_usdt);\\n        ETH_MULTIPLIER = (10**18);\\n        USDT_MULTIPLIER = (10**6);\\n        fundReceiver = msg.sender;\\n        \\n        // Store total supply\\n        totalTokenSupply = _totalTokenSupply;\\n        \\n        // Calculate allocations - 30% for presale, 5% for referrals, 20% for staking\\n        presaleTokens = _totalTokenSupply * 30 / 100;\\n        maxReferralRewards = _totalTokenSupply * 5 / 100;\\n        _maxStakingRewards = _totalTokenSupply * 20 / 100;\\n    }\\n    \\n    /**\\n     * @dev Pre-fund the contract with tokens for presale, referrals, and staking\\n     */\\n    function preFundContract() external onlyOwner {\\n        require(!isTokenPreFunded, \\\"Already funded\\\");\\n        require(SaleToken != address(0), \\\"Token not set\\\");\\n        \\n        // Calculate total tokens needed\\n        uint256 totalRequired = presaleTokens + maxReferralRewards + _maxStakingRewards;\\n        \\n        // Check contract balance\\n        uint256 contractBalance = IERC20(SaleToken).balanceOf(address(this));\\n        require(contractBalance >= totalRequired, \\\"Insufficient balance\\\");\\n        \\n        // Set pre-funded flag\\n        isTokenPreFunded = true;\\n        \\n        emit TokensPreFunded(SaleToken, contractBalance, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Create a new presale\\n     */\\n    function createPresale(\\n        uint256 _price,\\n        uint256 _nextStagePrice, \\n        uint256 _tokensToSell, \\n        uint256 _UsdtHardcap\\n    ) external onlyOwner {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens\\\");\\n        require(!presale[presaleId].Active, \\\"Sale active\\\");\\n\\n        presaleId++;\\n\\n        presale[presaleId] = ISaleStructs.Presale(\\n            0,\\n            0,\\n            _price,\\n            _nextStagePrice,\\n            0,\\n            _tokensToSell,\\n            _UsdtHardcap,\\n            0,\\n            false,\\n            false\\n        );\\n\\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Start the presale\\n     */\\n    function startPresale() public onlyOwner {\\n        presale[presaleId].startTime = block.timestamp;\\n        presale[presaleId].Active = true;\\n    }\\n\\n    /**\\n     * @dev End the presale\\n     */\\n    function endPresale() public onlyOwner {\\n        require(presale[presaleId].Active, \\\"Already inactive\\\");\\n        presale[presaleId].endTime = block.timestamp;\\n        presale[presaleId].Active = false;\\n    }\\n\\n    /**\\n     * @dev Enable claiming for a presale\\n     */\\n    function enableClaim(uint256 _id, bool _status)\\n        public\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        presale[_id].isEnableClaim = _status;\\n    }\\n\\n    /**\\n     * @dev Update presale parameters\\n     */\\n    function updatePresale(\\n        uint256 _id,\\n        uint256 _price,\\n        uint256 _nextStagePrice,\\n        uint256 _tokensToSell,\\n        uint256 _Hardcap\\n    ) external checkPresaleId(_id) onlyOwner {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens\\\");\\n        presale[_id].price = _price;\\n        presale[_id].nextStagePrice = _nextStagePrice;\\n        presale[_id].tokensToSell = _tokensToSell;\\n        presale[_id].UsdtHardcap = _Hardcap;\\n    }\\n\\n    /**\\n     * @dev Change fund receiving wallet\\n     */\\n    function changeFundWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"Zero address\\\");\\n        fundReceiver = _wallet;\\n    }\\n\\n    /**\\n     * @dev Change USDT token address\\n     */\\n    function changeUSDTToken(address _newAddress) external onlyOwner {\\n        require(_newAddress != address(0), \\\"Zero address\\\");\\n        USDTInterface = IERC20Metadata(_newAddress);\\n    }\\n\\n    /**\\n     * @dev Update the sale token address\\n     */\\n    function ChangeTokentoSell(address _newTokenAddress) external onlyOwner {\\n        require(_newTokenAddress != address(0), \\\"Zero address\\\");\\n        SaleToken = _newTokenAddress;\\n    }\\n\\n    /**\\n     * @dev Update minimum token purchase amount\\n     */\\n    function EditMinTokenToBuy(uint256 _newMinAmount) external onlyOwner {\\n        require(_newMinAmount > 0, \\\"Zero min\\\");\\n        MinTokenTobuy = _newMinAmount;\\n    }\\n\\n    /**\\n     * @dev Pause a presale\\n     */\\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\n        require(!paused[_id], \\\"Already paused\\\");\\n        paused[_id] = true;\\n        emit PresalePaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Unpause a presale\\n     */\\n    function unPausePresale(uint256 _id)\\n        external\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        require(paused[_id], \\\"Not paused\\\");\\n        paused[_id] = false;\\n        emit PresaleUnpaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the latest ETH price from Chainlink\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\n        price = (price * (10**10));\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for eth amount\\n     */\\n    function ethToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        returns (uint256 _tokens)\\n    {\\n        uint256 usdAmount = amount * getLatestPrice() * USDT_MULTIPLIER / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        _tokens = usdtToTokens(_id, usdAmount);\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for given usdt amount\\n     */\\n    function usdtToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 _tokens)\\n    {\\n        _tokens = (amount * (10**18)) / presale[_id].price;\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get ETH price for given amount\\n     */\\n    function ethBuyHelper(uint256 _id, uint256 amount)\\n        external\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 ethAmount)\\n    {\\n        uint256 usdPrice = (amount * presale[_id].price);\\n        ethAmount = (usdPrice * ETH_MULTIPLIER) / (getLatestPrice() * 10**IERC20Metadata(SaleToken).decimals());\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get USDT price for given amount\\n     */\\n    function usdtBuyHelper(uint256 _id, uint256 amount)\\n        external\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 usdPrice)\\n    {\\n        usdPrice = (amount * presale[_id].price) / 10**IERC20Metadata(SaleToken).decimals();\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get claimable tokens for a given presale\\n     */\\n    function claimableAmount(address user, uint256 _id)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256)\\n    {\\n        ISaleStructs.ClaimData memory _user = userClaimData[user][_id];\\n\\n        require(_user.totalAmount > 0, \\\"Nothing to claim\\\");\\n        uint256 amount = _user.totalAmount - _user.claimedAmount;\\n        require(amount > 0, \\\"Already claimed\\\");\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Exclude account from minimum buy requirement\\n     */\\n    function ExcludeAccouctFromMinBuy(address _user, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        isExcludeMinToken[_user] = _status;\\n    }\\n    \\n    /**\\n     * @dev Public getter for max staking rewards\\n     */\\n    function maxStakingRewards() public view virtual returns (uint256) {\\n        return _maxStakingRewards;\\n    }\\n\\n    /**\\n     * @dev Calculate reserved tokens at the base level\\n     * This will be overridden by derived contracts to include additional reservations\\n     */\\n    function calculateBaseReservedTokens() public view virtual returns (uint256) {\\n        // At the base level, no tokens are reserved\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Withdraw all available tokens from contract after accounting for reserved tokens\\n     */\\n    function WithdrawAllTokens(address _token) external virtual onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate reserved tokens (will be overridden in child contracts)\\n            uint256 reservedTokens = calculateBaseReservedTokens();\\n            \\n            // Get current contract balance\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            \\n            // Calculate available amount to withdraw\\n            uint256 availableAmount = contractBalance > reservedTokens ? contractBalance - reservedTokens : 0;\\n            require(availableAmount > 0, \\\"No tokens available to withdraw\\\");\\n            \\n            // Transfer available tokens\\n            bool success = IERC20(_token).transfer(fundReceiver, availableAmount);\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            // For other tokens, withdraw all\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(contractBalance > 0, \\\"No tokens to withdraw\\\");\\n            \\n            bool success = IERC20(_token).transfer(fundReceiver, contractBalance);\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw all ETH balance from contract\\n     */\\n    function WithdrawAllContractFunds() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No ETH balance to withdraw\\\");\\n        SaleUtils.sendValue(payable(fundReceiver), balance);\\n    }\\n\\n    /**\\n     * @dev Modifier to check presale ID validity\\n     */\\n    modifier checkPresaleId(uint256 _id) {\\n        require(_id > 0 && _id <= presaleId, \\\"Invalid ID\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check sale state\\n     */\\n    modifier checkSaleState(uint256 _id, uint256 amount) {\\n        require(block.timestamp >= presale[_id].startTime && presale[_id].Active, \\\"Invalid time\\\");\\n        require(amount > 0 && amount <= presale[_id].tokensToSell-presale[_id].Sold, \\\"Invalid amount\\\");\\n        _;\\n    }\\n} \",\"keccak256\":\"0xef48c3a6a2de0fefe8b0cff26c982badb68001d62214d4200d74e29c82db5da2\",\"license\":\"MIT\"},\"contracts/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ReferralManager.sol\\\";\\n\\n/**\\n * @title Staking Manager Contract\\n * @notice This contract handles token staking functionality\\n */\\ncontract StakingManager is ReferralManager {\\n    \\n    // Staking system constants and variables\\n    uint256 public constant STAKING_APY = 200; // 200% APY\\n    uint256 public totalStaked;\\n    uint256 public stakingCap; // Cap at 6,666,666,667 tokens\\n    bool public stakingActive;\\n    uint256 public totalStakingRewardsIssued;\\n    \\n    // Staking system mappings\\n    mapping(address => ISaleStructs.StakeInfo) public userStakes;\\n    \\n    // Mapping to track users who want to stake ALL their tokens upon claim\\n    mapping(address => bool) public userStakingIntent;\\n\\n    // New Staking Events\\n    event TokensStaked(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 stakingTime, \\n        uint256 unlockTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed user, \\n        uint256 stakedAmount, \\n        uint256 rewardAmount, \\n        uint256 timestamp\\n    );\\n\\n    event StakingStatusChanged(\\n        bool isActive,\\n        uint256 timestamp\\n    );\\n    \\n    event StakingCapUpdated(\\n        uint256 previousCap,\\n        uint256 newCap,\\n        uint256 timestamp\\n    );\\n    \\n    // Define custom errors at contract level\\n    error StakingInactive();\\n    error ZeroAmount();\\n    error CapExceeded();\\n    error RewardLimitExceeded();\\n    error LockedStakeExists();\\n    error TransferFailed();\\n    \\n    /**\\n     * @dev Constructor initializes staking parameters\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _saleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n        ReferralManager(_oracle, _usdt, _saleToken, _MinTokenTobuy, _totalTokenSupply) \\n    {\\n        // Initialize staking parameters\\n        stakingCap = 6666666667 * 10**18; // 6,666,666,667 tokens\\n        stakingActive = true; // Staking is active by default\\n    }\\n    \\n    /**\\n     * @dev Calculate total reserved tokens across all systems (referrals and staking)\\n     * @return Total reserved tokens that can't be withdrawn\\n     */\\n    function calculateTotalReservedTokens() public view returns (uint256) {\\n        // Reserved for referral rewards already issued\\n        uint256 referralReserved = totalReferralRewardsIssued;\\n        \\n        // Reserved for active stakes plus their potential rewards\\n        uint256 stakingReserved = totalStaked * (STAKING_APY + 100) / 100;\\n        \\n        return referralReserved + stakingReserved;\\n    }\\n    \\n    /**\\n     * @dev Override withdraw all tokens to account for staking rewards\\n     */\\n    function WithdrawAllTokens(address _token) external override onlyOwner {\\n        if (_token == SaleToken) {\\n            // Get total reserved tokens from the calculation function\\n            uint256 reservedTokens = calculateTotalReservedTokens();\\n            \\n            // Get current contract balance\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            \\n            // Calculate available amount to withdraw\\n            uint256 availableAmount = contractBalance > reservedTokens ? contractBalance - reservedTokens : 0;\\n            require(availableAmount > 0, \\\"No tokens available to withdraw\\\");\\n            \\n            // Transfer available tokens\\n            bool success = IERC20(_token).transfer(fundReceiver, availableAmount);\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            // For other tokens, withdraw all\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(contractBalance > 0, \\\"No tokens to withdraw\\\");\\n            \\n            bool success = IERC20(_token).transfer(fundReceiver, contractBalance);\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @dev Safe withdrawal function for accumulated tokens\\n     * @param _token Token address\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient address\\n     */\\n    function safeWithdraw(address _token, uint256 _amount, address _recipient) external onlyOwner {\\n        require(_recipient != address(0), \\\"Zero address\\\");\\n        \\n        if (_token == SaleToken) {\\n            // Use the same calculation function for consistency\\n            uint256 reservedTokens = calculateTotalReservedTokens();\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(contractBalance - _amount >= reservedTokens, \\\"Reserved tokens\\\");\\n        }\\n        \\n        bool withdrawSuccess = IERC20(_token).transfer(_recipient, _amount);\\n        require(withdrawSuccess, \\\"Transfer failed\\\");\\n    }\\n    \\n    /**\\n     * @dev Toggle staking status (active/inactive)\\n     */\\n    function setStakingStatus(bool _status) external onlyOwner {\\n        stakingActive = _status;\\n        emit StakingStatusChanged(_status, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Helper function that handles token staking directly during purchase\\n     */\\n    function _handleTokenStaking(address _user, uint256 _amount) internal {\\n        // Ensure staking is active\\n        require(stakingActive, \\\"Staking inactive\\\");\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(totalStaked + _amount <= stakingCap, \\\"Cap exceeded\\\");\\n        \\n        // Calculate potential rewards to verify we stay within the rewards limit\\n        uint256 potentialReward = _amount * STAKING_APY / 100;\\n        require(totalStakingRewardsIssued + potentialReward <= maxStakingRewards(), \\\"Reward limit\\\");\\n        \\n        // Update global state for staking\\n        totalStaked += _amount;\\n        totalStakingRewardsIssued += potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        ISaleStructs.StakeInfo storage userStake = userStakes[_user];\\n        \\n        // If user already has a stake, handle appropriately\\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            // If existing stake is still locked, cannot add to it\\n            if (block.timestamp < userStake.unlockTimestamp) {\\n                revert LockedStakeExists();\\n            } else {\\n                // Existing stake is unlocked, withdraw it first\\n                _processUnlockedStake(_user, userStake);\\n            }\\n        }\\n        \\n        // Create a new stake\\n        _createNewStake(_user, _amount, userStake);\\n    }\\n    \\n    /**\\n     * @dev Process an unlocked stake by returning principal + rewards\\n     */\\n    function _processUnlockedStake(address _user, ISaleStructs.StakeInfo storage userStake) private {\\n        uint256 stakedAmount = userStake.stakedAmount;\\n        uint256 reward = stakedAmount * STAKING_APY / 100;\\n        \\n        // Mark as withdrawn to prevent double-dipping\\n        userStake.hasWithdrawn = true;\\n        \\n        // Transfer rewards and original stake back\\n        bool transferSuccess = IERC20(SaleToken).transfer(_user, stakedAmount + reward);\\n        require(transferSuccess, \\\"Withdrawal failed\\\");\\n        \\n        emit StakeWithdrawn(_user, stakedAmount, reward, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Create a new stake for a user\\n     */\\n    function _createNewStake(address _user, uint256 _amount, ISaleStructs.StakeInfo storage userStake) internal {\\n        userStake.stakedAmount = _amount;\\n        userStake.stakingTimestamp = block.timestamp;\\n        userStake.unlockTimestamp = block.timestamp + 365 days;\\n        userStake.hasWithdrawn = false;\\n        \\n        emit TokensStaked(_user, _amount, block.timestamp, userStake.unlockTimestamp);\\n    }\\n\\n    /**\\n     * @dev Stake tokens with 1-year lock and 200% APY\\n     */\\n    function stakeTokens(uint256 _amount) external nonReentrant {\\n        if (!stakingActive) revert StakingInactive();\\n        if (_amount == 0) revert ZeroAmount();\\n        if (totalStaked + _amount > stakingCap) revert CapExceeded();\\n        \\n        // Cache rewards calculation\\n        uint256 potentialReward = _amount * STAKING_APY / 100;\\n        require(totalStakingRewardsIssued + potentialReward <= maxStakingRewards(), \\\"Reward limit\\\");\\n        \\n        // Update state once\\n        totalStaked += _amount;\\n        totalStakingRewardsIssued += potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        ISaleStructs.StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            require(block.timestamp >= userStake.unlockTimestamp, \\\"Locked stake\\\");\\n            \\n            // Withdraw previous stake first (internally)\\n            _processUnlockedStake(msg.sender, userStake);\\n        }\\n        \\n        // Create a new stake\\n        _createNewStake(msg.sender, _amount, userStake);\\n        \\n        // Transfer tokens from user to contract\\n        _transferStakedTokens(msg.sender, _amount);\\n    }\\n    \\n    /**\\n     * @dev Transfer tokens from user to contract for staking\\n     */\\n    function _transferStakedTokens(address _user, uint256 _amount) internal {\\n        uint256 balanceBefore = IERC20(SaleToken).balanceOf(address(this));\\n        bool transferSuccess = IERC20(SaleToken).transferFrom(_user, address(this), _amount);\\n        require(transferSuccess, \\\"Transfer failed\\\");\\n        \\n        // Verify tokens were actually received (protection against fee-on-transfer tokens)\\n        uint256 balanceAfter = IERC20(SaleToken).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore + _amount, \\\"Incorrect amount\\\");\\n    }\\n    \\n    /**\\n     * @dev Withdraw staked tokens and rewards after lock period\\n     */\\n    function withdrawStake() external nonReentrant {\\n        ISaleStructs.StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        require(userStake.stakedAmount > 0, \\\"No stake found\\\");\\n        require(!userStake.hasWithdrawn, \\\"Already withdrawn\\\");\\n        require(block.timestamp >= userStake.unlockTimestamp, \\\"Still locked\\\");\\n        \\n        uint256 stakedAmount = userStake.stakedAmount;\\n        uint256 reward = stakedAmount * STAKING_APY / 100;\\n        uint256 totalAmount = stakedAmount + reward;\\n        \\n        // Mark as withdrawn to prevent double-dipping\\n        userStake.hasWithdrawn = true;\\n        \\n        // Update global state\\n        totalStaked = totalStaked - stakedAmount;\\n        \\n        // Verify there are enough tokens in the contract\\n        require(totalAmount <= IERC20(SaleToken).balanceOf(address(this)), \\\"Insufficient funds\\\");\\n        \\n        // Transfer rewards and original stake\\n        bool withdrawSuccess = IERC20(SaleToken).transfer(msg.sender, totalAmount);\\n        require(withdrawSuccess, \\\"Transfer failed\\\");\\n        \\n        emit StakeWithdrawn(msg.sender, stakedAmount, reward, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Get user staking information\\n     */\\n    function getUserStakingInfo(address _user) external view returns (\\n        uint256 stakedAmount,\\n        uint256 stakingTime,\\n        uint256 unlockTime,\\n        bool isLocked,\\n        bool hasWithdrawn,\\n        uint256 potentialReward,\\n        uint256 totalClaimable\\n    ) {\\n        ISaleStructs.StakeInfo storage stake = userStakes[_user];\\n        bool locked = block.timestamp < stake.unlockTimestamp;\\n        uint256 reward = stake.stakedAmount * STAKING_APY / 100;\\n        \\n        return (\\n            stake.stakedAmount,\\n            stake.stakingTimestamp,\\n            stake.unlockTimestamp,\\n            locked,\\n            stake.hasWithdrawn,\\n            reward,\\n            stake.hasWithdrawn ? 0 : stake.stakedAmount + reward\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get staking program statistics\\n     */\\n    function getStakingStats() external view returns (\\n        uint256 _totalStaked,\\n        uint256 _stakingCap,\\n        uint256 _stakingAPY,\\n        bool _isActive,\\n        uint256 _maxRewards,\\n        uint256 _totalRewardsCommitted,\\n        uint256 _remainingRewards\\n    ) {\\n        return (\\n            totalStaked,\\n            stakingCap,\\n            STAKING_APY,\\n            stakingActive,\\n            maxStakingRewards(),\\n            totalStakingRewardsIssued,\\n            maxStakingRewards() - totalStakingRewardsIssued\\n        );\\n    }\\n\\n    /**\\n     * @dev Quick check if staking is available and capacity info\\n     */\\n    function getStakingAvailability() external view returns (\\n        bool _canStake,\\n        uint256 _remainingCapacity,\\n        uint256 _percentFilled\\n    ) {\\n        bool canStake = stakingActive && totalStaked < stakingCap;\\n        uint256 remainingCapacity = stakingCap > totalStaked ? stakingCap - totalStaked : 0;\\n        uint256 percentFilled = totalStaked * 100 / stakingCap;\\n        \\n        return (canStake, remainingCapacity, percentFilled);\\n    }\\n    \\n    /**\\n     * @dev Update staking cap\\n     */\\n    function updateStakingCap(uint256 _newCap) external onlyOwner {\\n        require(_newCap >= totalStaked, \\\"Below total staked\\\");\\n        \\n        uint256 oldCap = stakingCap;\\n        stakingCap = _newCap;\\n        \\n        emit StakingCapUpdated(oldCap, _newCap, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Set staking intent for a user\\n     * @param _intent Whether to stake tokens upon claim\\n     */\\n    function setStakingIntent(bool _intent) external {\\n        userStakingIntent[msg.sender] = _intent;\\n    }\\n \\n} \",\"keccak256\":\"0xbcd1709e9a0c925c43a781672c08935c0c7bf128ec28c67db5d96ba286cb6c63\",\"license\":\"MIT\"},\"contracts/interfaces/ISaleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Sale Interfaces and Common Structures\\n * @notice Shared structures for Sale contracts\\n */\\ninterface ISaleStructs {\\n    // Constants\\n    function PERCENT_DENOMINATOR() external view returns (uint256);\\n    function TOKEN_DECIMALS() external view returns (uint256);\\n    \\n    // Data Structures\\n    struct PresaleInfo {\\n        uint256 cap;\\n        uint256 price;\\n        uint256 sold;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ClaimAble;\\n        bool isClosed;\\n    }\\n    \\n    struct User {\\n        uint256 TotalBoughtTokens;\\n        uint256 TotalPaid;\\n        uint256 TotalCollectedReferral;\\n        address[] referredUsers;\\n        address referrer;\\n    }\\n    \\n    struct Presale {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 price;\\n        uint256 nextStagePrice;\\n        uint256 Sold;\\n        uint256 tokensToSell;\\n        uint256 UsdtHardcap;\\n        uint256 amountRaised;\\n        bool Active;\\n        bool isEnableClaim;\\n    }\\n\\n    struct ClaimData {\\n        uint256 claimAt;\\n        uint256 totalAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    struct ReferralData {\\n        address referrer;\\n        uint256 totalReferralRewards;\\n        uint256 claimedReferralRewards;\\n        bool hasReferred;\\n        uint256 referralCount;\\n    }\\n    \\n    struct StakeInfo {\\n        uint256 stakedAmount;\\n        uint256 stakingTimestamp;\\n        uint256 unlockTimestamp;\\n        bool hasWithdrawn;\\n    }\\n    \\n    // Events (common)\\n    event PresaleCreated(\\n        uint256 indexed _id,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    );\\n    \\n    event TokensBought(\\n        address indexed user,\\n        uint256 indexed id,\\n        address indexed purchaseToken,\\n        uint256 tokensBought,\\n        uint256 amountPaid,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensClaimedWithTimestamp(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensPreFunded(\\n        address indexed token, \\n        uint256 amount, \\n        uint256 timestamp\\n    );\\n} \",\"keccak256\":\"0x8df56f6db511fd04c86da31f75820e0071865afea7bdf75709c936fa4a83358a\",\"license\":\"MIT\"},\"contracts/libraries/SaleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Sale Utilities Library\\n * @notice Utility functions used across the presale system\\n */\\nlibrary SaleUtils {\\n    /**\\n     * @dev Helper to check if an address is a contract\\n     * @param _addr Address to check\\n     * @return True if the address is a contract\\n     */\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /**\\n     * @dev Helper function to send ETH safely\\n     * @param recipient Address to send ETH to\\n     * @param amount Amount of ETH to send\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH Payment failed\\\");\\n    }\\n} \",\"keccak256\":\"0x590d61f2705834edd7d3d494b79497a61a509f12f4fb37b5b49aea51ec04aedc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600f805460ff199081169091556017805490911660141790553480156200002a57600080fd5b5060405162005a5238038062005a528339810160408190526200004d916200036f565b600160005584848484848484848484848484848433806200008957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200009481620000e0565b50620000a4858585858562000132565b50504260195550506b158a89942e0e3e7c97cc0000601f5550506020805460ff19166001179055506200041b9c50505050505050505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038516620001785760405162461bcd60e51b815260206004820152600b60248201526a5a65726f206f7261636c6560a81b604482015260640162000080565b6001600160a01b038416620001bc5760405162461bcd60e51b815260206004820152600960248201526816995c9bc81554d11560ba1b604482015260640162000080565b6001600160a01b038316620002015760405162461bcd60e51b815260206004820152600a6024820152692d32b937903a37b5b2b760b11b604482015260640162000080565b600082116200023e5760405162461bcd60e51b81526020600482015260086024820152672d32b9379036b4b760c11b604482015260640162000080565b600081116200027e5760405162461bcd60e51b815260206004820152600b60248201526a5a65726f20737570706c7960a81b604482015260640162000080565b601080546001600160a01b038088166001600160a01b031992831617909255600480548684169083161790556005849055600f805492871661010002610100600160a81b031990931692909217909155670de0b6b3a7640000600a55620f4240600955600b805490911633179055600781905560646200030082601e620003cc565b6200030c9190620003f8565b600c5560646200031e826005620003cc565b6200032a9190620003f8565b600d5560646200033c826014620003cc565b620003489190620003f8565b600e555050505050565b80516001600160a01b03811681146200036a57600080fd5b919050565b600080600080600060a086880312156200038857600080fd5b620003938662000352565b9450620003a36020870162000352565b9350620003b36040870162000352565b6060870151608090970151959894975095949392505050565b8082028115828204841417620003f257634e487b7160e01b600052601160045260246000fd5b92915050565b6000826200041657634e487b7160e01b600052601260045260246000fd5b500490565b615627806200042b6000396000f3fe6080604052600436106104bf5760003560e01c80637fa36f0e11610276578063b8bec6a01161014f578063d3552712116100c1578063e6ab143411610085578063e6ab1434146110ec578063f2fde38b146111ac578063f309fed9146111cc578063f597573f146111ec578063fb4aa0a114611211578063fe9f676e1461123157600080fd5b8063d35527121461100f578063d6fd1c5214611068578063d8ae8c8b1461107d578063d9f02a25146110b6578063e18e84f9146110d657600080fd5b8063c8fa624f11610113578063c8fa624f14610eb9578063c9c6b55614610ef2578063cc9fe9d314610f7d578063cd1704a814610faf578063d01608c114610fcf578063d099850a14610fef57600080fd5b8063b8bec6a014610de8578063bed9d86114610e08578063beea7cde14610e1d578063c1dd608414610e32578063c8b8232114610e7c57600080fd5b8063920a253e116101e8578063a6ac4b35116101ac578063a6ac4b3514610cac578063a87430ba14610cc6578063a9c85ced14610d3a578063aef6e26714610d50578063b04c734614610d70578063b2932c8d14610dd257600080fd5b8063920a253e14610c0e5780639752f3cb14610c3a578063a0f9c0aa14610c5a578063a33a16d814610c7a578063a43be57b14610c9757600080fd5b80638d79e66d1161023a5780638d79e66d14610b1e5780638da5cb5b14610b345780638da7ad2314610b525780638e15f47314610bb95780639051cce914610bce57806390c4223014610bee57600080fd5b80637fa36f0e14610a515780638093360814610a71578063817b1cd214610ac8578063833cde5214610ade5780638561c31514610afe57600080fd5b806345aac324116103a857806368e94be81161031a5780636fb4adff116102de5780636fb4adff1461099c578063715018a6146109bc578063718a1962146109d15780637547c7a3146109f157806379b8d93814610a115780637dc0d1d014610a3157600080fd5b806368e94be8146109025780636913b162146109225780636b5526a3146109375780636ca952461461094c5780636e22e8bd1461097c57600080fd5b8063552a2d141161036c578063552a2d1414610836578063553ff7f51461084c5780635632bce61461086c5780635c975abb1461089c5780636667864d146108bb578063670988a8146108e857600080fd5b806345aac3241461079057806348bf4fcf146107a557806348ff1a39146107bb5780634a6413f7146107db5780635503cd61146107fb57600080fd5b80631ca8b6cb116104415780632bef560f116104055780632bef560f146106ed5780632bfcaac2146107035780632f48ab7d14610719578063397643631461075157806344c370d3146107675780634517c8a31461077d57600080fd5b80631ca8b6cb146106375780631ed0c9541461064d5780632127fe041461067d57806323b221a01461069d57806324d7806c146106bd57600080fd5b806309b5a33a1161048857806309b5a33a146105785780630a09815c146105a85780630fbfcf37146105be5780630fcc4f57146105de578063112f62dc146105fe57600080fd5b8062dde10e146104c45780630248c7201461050957806303fcd9ac1461052c57806304c98b2b1461054e57806305eaab4b14610563575b600080fd5b3480156104d057600080fd5b506104f46104df366004614f88565b60116020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561051557600080fd5b5061051e611251565b604051908152602001610500565b34801561053857600080fd5b5061054c610547366004614fcb565b61128f565b005b34801561055a57600080fd5b5061054c6112c2565b34801561056f57600080fd5b506104f46112f4565b34801561058457600080fd5b506104f4610593366004615002565b601c6020526000908152604090205460ff1681565b3480156105b457600080fd5b5061051e600c5481565b3480156105ca57600080fd5b5061054c6105d936600461501d565b611566565b3480156105ea57600080fd5b5061054c6105f9366004614f88565b6115c8565b34801561060a57600080fd5b5061061e610619366004615042565b611662565b60408051921515835260ff909116602083015201610500565b34801561064357600080fd5b5061051e60075481565b34801561065957600080fd5b506104f4610668366004615002565b60146020526000908152604090205460ff1681565b34801561068957600080fd5b5061051e610698366004615075565b611795565b3480156106a957600080fd5b506104f46106b8366004614f88565b611898565b3480156106c957600080fd5b506104f46106d8366004615002565b60156020526000908152604090205460ff1681565b3480156106f957600080fd5b5061051e600d5481565b34801561070f57600080fd5b5061051e60185481565b34801561072557600080fd5b50600354610739906001600160a01b031681565b6040516001600160a01b039091168152602001610500565b34801561075d57600080fd5b5061051e600a5481565b34801561077357600080fd5b5061051e601f5481565b6104f461078b366004614fcb565b611bc2565b34801561079c57600080fd5b5060185461051e565b3480156107b157600080fd5b5061051e60095481565b3480156107c757600080fd5b506104f46107d6366004615097565b612038565b3480156107e757600080fd5b5061054c6107f6366004614f88565b612641565b34801561080757600080fd5b5061054c6108163660046150d7565b336000908152602360205260409020805460ff1916911515919091179055565b34801561084257600080fd5b5061051e60195481565b34801561085857600080fd5b5061051e610867366004615002565b612721565b34801561087857600080fd5b506104f4610887366004615002565b601b6020526000908152604090205460ff1681565b3480156108a857600080fd5b50600154600160a01b900460ff166104f4565b3480156108c757600080fd5b506108db6108d6366004615002565b61278d565b60405161050091906150f4565b3480156108f457600080fd5b50600f546104f49060ff1681565b34801561090e57600080fd5b5061054c61091d366004614f88565b6128d4565b34801561092e57600080fd5b5061054c612940565b34801561094357600080fd5b50600e5461051e565b34801561095857600080fd5b506104f4610967366004615002565b60236020526000908152604090205460ff1681565b34801561098857600080fd5b5061054c610997366004615002565b612b00565b3480156109a857600080fd5b5061054c6109b7366004615002565b612e5c565b3480156109c857600080fd5b5061054c612eac565b3480156109dd57600080fd5b5061051e6109ec366004615075565b612ec0565b3480156109fd57600080fd5b5061054c610a0c366004614f88565b612f10565b348015610a1d57600080fd5b5061051e610a2c366004615141565b613116565b348015610a3d57600080fd5b50600254610739906001600160a01b031681565b348015610a5d57600080fd5b5061054c610a6c366004615002565b613228565b348015610a7d57600080fd5b50610a91610a8c366004615002565b61351d565b6040805197885260208801969096529486019390935290151560608501521515608084015260a083015260c082015260e001610500565b348015610ad457600080fd5b5061051e601e5481565b348015610aea57600080fd5b50600454610739906001600160a01b031681565b348015610b0a57600080fd5b5061054c610b19366004615002565b6135be565b348015610b2a57600080fd5b5061051e60055481565b348015610b4057600080fd5b506001546001600160a01b0316610739565b348015610b5e57600080fd5b50610b97610b6d366004615002565b60226020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610500565b348015610bc557600080fd5b5061051e613614565b348015610bda57600080fd5b506104f4610be936600461516b565b6136ab565b348015610bfa57600080fd5b5061054c610c093660046151ef565b61376b565b348015610c1a57600080fd5b50601754610c289060ff1681565b60405160ff9091168152602001610500565b348015610c4657600080fd5b5061054c610c5536600461520c565b61387b565b348015610c6657600080fd5b5061054c610c75366004615141565b613958565b348015610c8657600080fd5b5061051e683635c9adc5dea0000081565b348015610ca357600080fd5b5061054c613ab5565b348015610cb857600080fd5b506020546104f49060ff1681565b348015610cd257600080fd5b50610d11610ce1366004615002565b6016602052600090815260409020805460018201546002830154600490930154919290916001600160a01b031684565b604080519485526020850193909352918301526001600160a01b03166060820152608001610500565b348015610d4657600080fd5b5061051e60215481565b348015610d5c57600080fd5b5061054c610d6b366004615247565b613b3e565b348015610d7c57600080fd5b50610db7610d8b366004615141565b601360209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610500565b348015610dde57600080fd5b5061051e60065481565b348015610df457600080fd5b5061054c610e033660046150d7565b613ce6565b348015610e1457600080fd5b5061054c613d3b565b348015610e2957600080fd5b5061054c614005565b348015610e3e57600080fd5b50610e47614071565b604080519788526020880196909652948601939093529015156060850152608084015260a083015260c082015260e001610500565b348015610e8857600080fd5b50610e916140ca565b604080519586526020860194909452928401919091526060830152608082015260a001610500565b348015610ec557600080fd5b5061051e610ed4366004615002565b6001600160a01b031660009081526016602052604090206002015490565b348015610efe57600080fd5b50610f49610f0d366004615002565b601a60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03909316939192909160ff169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a001610500565b348015610f8957600080fd5b50610f92614106565b604080519315158452602084019290925290820152606001610500565b348015610fbb57600080fd5b5061054c610fca366004614f88565b614177565b348015610fdb57600080fd5b5061054c610fea366004614f88565b6141bf565b348015610ffb57600080fd5b5061054c61100a366004615283565b61428b565b34801561101b57600080fd5b5061102f61102a366004615002565b614473565b604080516001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015260c001610500565b34801561107457600080fd5b5061051e60c881565b34801561108957600080fd5b506104f4611098366004615002565b6001600160a01b03166000908152601b602052604090205460ff1690565b3480156110c257600080fd5b5061054c6110d1366004615002565b614522565b3480156110e257600080fd5b5061051e60085481565b3480156110f857600080fd5b5061115e611107366004614f88565b60126020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496979596949593949293919290919060ff808216916101009004168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401521515610100830152151561012082015261014001610500565b3480156111b857600080fd5b5061054c6111c7366004615002565b614572565b3480156111d857600080fd5b5061051e6111e7366004615075565b6145ad565b3480156111f857600080fd5b50600f546107399061010090046001600160a01b031681565b34801561121d57600080fd5b50600b54610739906001600160a01b031681565b34801561123d57600080fd5b5061051e61124c366004615075565b61460c565b60185460009081606461126560c8826152cb565b601e5461127291906152de565b61127c91906152f5565b905061128881836152cb565b9250505090565b6112976146cf565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b6112ca6146cf565b6008805460009081526012602052604080822042905582548252902001805460ff19166001179055565b60006112fe6146fc565b600061130933612721565b9050600081116113565760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064015b60405180910390fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c39190615317565b8111156114125760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e7472616374000000604482015260640161134d565b336000908152601a6020526040812060020180548392906114349084906152cb565b9091555050336000908152601660205260408120600201805483929061145b9084906152cb565b90915550506004805460405163a9059cbb60e01b81523392810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190615330565b61151a5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260640161134d565b6040805182815242602082015233917fea940d727b98f74071145844b731b12fccfc03b1e58a738235234c176a43e299910160405180910390a260019150506115636001600055565b90565b8160008111801561157957506008548111155b6115955760405162461bcd60e51b815260040161134d9061534d565b61159d6146cf565b5060009182526012602052604090912060080180549115156101000261ff0019909216919091179055565b6115d06146cf565b601e548110156116175760405162461bcd60e51b815260206004820152601260248201527110995b1bddc81d1bdd185b081cdd185ad95960721b604482015260640161134d565b601f8054908290556040805182815260208101849052428183015290517f69184c671db9747cef69bb2ee0e6ce0dfeec4b4562bf75185241b8927ab000f39181900360600190a15050565b6001600160a01b0381166000908152601c6020526040812054819060ff1615611691575060009050600161178e565b826001600160a01b0316846001600160a01b0316036116b6575060009050600261178e565b6001600160a01b0384166000908152601b602052604090205460ff166116e2575060009050600361178e565b6001600160a01b038481166000908152601a6020526040902054818516911603611712575060009050600261178e565b6001600160a01b038085166000908152601a6020526040902054165b6001600160a01b0381161561178457836001600160a01b0316816001600160a01b0316036117645760006002925092505061178e565b6001600160a01b039081166000908152601a60205260409020541661172e565b6001600092509250505b9250929050565b6000826000811180156117aa57506008548111155b6117c65760405162461bcd60e51b815260040161134d9061534d565b6000848152601260205260408120600201546117e290856152de565b9050600460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b9190615371565b61186690600a615472565b61186e613614565b61187891906152de565b600a5461188590836152de565b61188f91906152f5565b95945050505050565b6000816000811180156118ad57506008548111155b6118c95760405162461bcd60e51b815260040161134d9061534d565b60006118d53385613116565b90506000811161191a5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b604482015260640161134d565b6004546001600160a01b03166119625760405162461bcd60e51b815260206004820152600d60248201526c151bdad95b881b9bdd081cd95d609a1b604482015260640161134d565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa1580156119ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cf9190615317565b811115611a135760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015260640161134d565b600084815260126020526040902060080154610100900460ff16611a6d5760405162461bcd60e51b815260206004820152601160248201527010db185a5b5a5b99c8191a5cd8589b1959607a1b604482015260640161134d565b33600090815260136020908152604080832087845290915281204281556002018054839290611a9d9084906152cb565b90915550503360009081526023602052604090205460ff1615611ae057611ac43382614726565b336000908152602360205260409020805460ff19169055611b7c565b6004805460405163a9059cbb60e01b81523392810192909252602482018390526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5b9190615330565b905080611b7a5760405162461bcd60e51b815260040161134d90615481565b505b60408051828152426020820152859133917fc259a362e59c3fd12f739a3baa0fe06c78d12af06ec0eec656fca929a2b2ee84910160405180910390a35060019392505050565b6000600854600081118015611bd957506008548111155b611bf55760405162461bcd60e51b815260040161134d9061534d565b600854611c028134612ec0565b6000828152601260205260409020544210801590611c31575060008281526012602052604090206008015460ff165b611c6c5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642074696d6560a01b604482015260640161134d565b600081118015611c9e575060008281526012602052604090206004810154600590910154611c9a91906154aa565b8111155b611cdb5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161134d565b611ce36146fc565b600f5460ff16611d265760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c994b599d5b99195960921b604482015260640161134d565b600a54600090611d3690806152de565b600954611d41613614565b611d4b90346152de565b611d5591906152de565b611d5f91906152f5565b6008546000908152601260205260409020600681015460079091015491925090611d8a9083906152cb565b1115611dc85760405162461bcd60e51b815260206004820152600d60248201526c12185c9918d85c081b1a5b5a5d609a1b604482015260640161134d565b60085460009081526011602052604090205460ff1615611e1b5760405162461bcd60e51b815260206004820152600e60248201526d141c995cd85b19481c185d5cd95960921b604482015260640161134d565b600880546000908152601260205260409020015460ff16611e715760405162461bcd60e51b815260206004820152601060248201526f496e6163746976652070726573616c6560801b604482015260640161134d565b6001600160a01b03871615611ed257863b63ffffffff1615611ec95760405162461bcd60e51b815260206004820152601160248201527021b7b73a3930b1ba103932b332b93932b960791b604482015260640161134d565b611ed287612b00565b6000611ee0600854836145ad565b3360009081526014602052604090205490915060ff16611f4157600554811015611f415760405162461bcd60e51b8152602060048201526012602482015271135a5b88185b5bdd5b9d081b9bdd081b595d60721b604482015260640161134d565b60085460009081526012602052604081206004018054839290611f659084906152cb565b909155505060085460009081526012602052604081206007018054849290611f8e9084906152cb565b925050819055508160066000828254611fa791906152cb565b90915550611fb8905081838a614953565b611fc281886149e2565b600b54611fd8906001600160a01b031634614abd565b60085460408051838152346020820152428183015290516000929133917f4d8aead3491b7eba4b5c7a65fc17e493b9e63f9e433522fc5f6a85a168fc9d369181900360600190a460019550505061202f6001600055565b50505092915050565b600060085460008111801561204f57506008548111155b61206b5760405162461bcd60e51b815260040161134d9061534d565b60085461207881876145ad565b60008281526012602052604090205442108015906120a7575060008281526012602052604090206008015460ff165b6120e25760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642074696d6560a01b604482015260640161134d565b60008111801561211457506000828152601260205260409020600481015460059091015461211091906154aa565b8111155b6121515760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161134d565b6121596146fc565b600f5460ff1661219c5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c994b599d5b99195960921b604482015260640161134d565b60085460009081526011602052604090205460ff16156121ef5760405162461bcd60e51b815260206004820152600e60248201526d141c995cd85b19481c185d5cd95960921b604482015260640161134d565b600880546000908152601260205260409020015460ff166122455760405162461bcd60e51b815260206004820152601060248201526f496e6163746976652070726573616c6560801b604482015260640161134d565b6008546000908152601260205260409020600681015460079091015461226c9089906152cb565b11156122aa5760405162461bcd60e51b815260206004820152600d60248201526c12185c9918d85c081b1a5b5a5d609a1b604482015260640161134d565b6001600160a01b0386161561230b57853b63ffffffff16156123025760405162461bcd60e51b815260206004820152601160248201527021b7b73a3930b1ba103932b332b93932b960791b604482015260640161134d565b61230b86612b00565b6000612319600854896145ad565b905080601260006008548152602001908152602001600020600401600082825461234391906152cb565b9091555050600854600090815260126020526040812060070180548a929061236c9084906152cb565b92505081905550876006600082825461238591906152cb565b90915550503360009081526014602052604090205460ff166123e8576005548110156123e85760405162461bcd60e51b8152602060048201526012602482015271135a5b88185b5bdd5b9d081b9bdd081b595d60721b604482015260640161134d565b600f5460009061010090046001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa15801561244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124709190615317565b9050808911156124bb5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161134d565b600f5460009061010090046001600160a01b031633600b546040516001600160a01b03928316602482015291166044820152606481018c905260840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b1790525161252c91906154bd565b6000604051808303816000865af19150503d8060008114612569576040519150601f19603f3d011682016040523d82523d6000602084013e61256e565b606091505b50509050806125b65760405162461bcd60e51b81526020600482015260146024820152731554d115081d1c985b9cd9995c8819985a5b195960621b604482015260640161134d565b6125c1838b8b614953565b6125cb83896149e2565b600f5460085460408051868152602081018e905242918101919091526101009092046001600160a01b03169133907f4d8aead3491b7eba4b5c7a65fc17e493b9e63f9e433522fc5f6a85a168fc9d369060600160405180910390a4600196505050506126376001600055565b5050509392505050565b8060008111801561265457506008548111155b6126705760405162461bcd60e51b815260040161134d9061534d565b6126786146cf565b60008281526011602052604090205460ff16156126c85760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481c185d5cd95960921b604482015260640161134d565b60008281526011602052604090819020805460ff191660011790555182907f927e6cd2dce24f32508868820cdc35f09d9de0f4b44e945114110125196fba9f906127159042815260200190565b60405180910390a25050565b6001600160a01b038082166000908152601a60209081526040808320815160a0810183528154909516855260018101549285018390526002810154918501829052600381015460ff1615156060860152600401546080850152919291612786916154aa565b9392505050565b60606000825b6001600160a01b038181166000908152601a602052604090205416156127e457816127bd816154ec565b6001600160a01b039283166000908152601a60205260409020549093509091169050612793565b60006127f18360016152cb565b67ffffffffffffffff81111561280957612809615505565b604051908082528060200260200182016040528015612832578160200160208202803683370190505b50905084816000815181106128495761284961551b565b6001600160a01b039092166020928302919091019091015284915060015b8381116128cb576001600160a01b039283166000908152601a6020526040902054825193169283908390839081106128a1576128a161551b565b6001600160a01b0390921660209283029190910190910152806128c3816154ec565b915050612867565b50949350505050565b6128dc6146cf565b600081116129235760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420746f74616c20737570706c7960601b604482015260640161134d565b60646129308260056152de565b61293a91906152f5565b600d5550565b6129486146cf565b600f5460ff161561298c5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199d5b99195960921b604482015260640161134d565b6004546001600160a01b03166129d45760405162461bcd60e51b815260206004820152600d60248201526c151bdad95b881b9bdd081cd95d609a1b604482015260640161134d565b6000600e54600d54600c546129e991906152cb565b6129f391906152cb565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a669190615317565b905081811015612aaf5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161134d565b600f805460ff19166001179055600454604080518381524260208201526001600160a01b03909216917fa87af714d03c932d084d64774397d6d857ba204899b9d02dc2a79c9a5aec207e9101612715565b6001600160a01b03811615801590612b2157506001600160a01b0381163314155b612b605760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b332b93932b960811b604482015260640161134d565b336000908152601c602052604090205460ff1615612bb35760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c9959995c9c995960821b604482015260640161134d565b6001600160a01b0381166000908152601b602052604090205460ff16612c125760405162461bcd60e51b81526020600482015260146024820152732ab738bab0b634b334b2b2103932b332b93932b960611b604482015260640161134d565b6001600160a01b038181166000908152601a602052604090205433911603612c705760405162461bcd60e51b815260206004820152601160248201527010da5c98dd5b185c881c9959995c9c985b607a1b604482015260640161134d565b6001600160a01b038082166000908152601a6020526040902054165b6001600160a01b03811615612d0457336001600160a01b03821603612ce45760405162461bcd60e51b815260206004820152600e60248201526d21b4b931bab630b91031b430b4b760911b604482015260640161134d565b6001600160a01b039081166000908152601a602052604090205416612c8c565b336000908152601a6020818152604080842080546001600160a01b0388166001600160a01b0319918216811790925560168452828620600490810180549092168317909155601c8452828620805460ff199081166001908117909255928752949093529084206003810180549092169093179055810180549192612d87836154ec565b90915550506001600160a01b0383166000908152601d6020908152604080832033845290915290205460ff16612e17576001600160a01b03831660008181526016602090815260408083206003018054600181810183559185528385200180546001600160a01b03191633908117909155948452601d8352818420948452939091529020805460ff191690911790555b60405142815233906001600160a01b038516907ff36afc48438e7a543cc47977b2ea45ca912bc74fd7e92126efea2f47c961eb7d9060200160405180910390a3505050565b612e646146cf565b6001600160a01b038116612e8a5760405162461bcd60e51b815260040161134d90615531565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b612eb46146cf565b612ebe6000614b93565b565b600080600a54600a54612ed391906152de565b600954612ede613614565b612ee890866152de565b612ef291906152de565b612efc91906152f5565b9050612f0884826145ad565b949350505050565b612f186146fc565b60205460ff16612f3b57604051637bf6f57360e01b815260040160405180910390fd5b80600003612f5c57604051631f2a200560e01b815260040160405180910390fd5b601f5481601e54612f6d91906152cb565b1115612f8c5760405163a4875a4960e01b815260040160405180910390fd5b60006064612f9b60c8846152de565b612fa591906152f5565b9050612fb0600e5490565b81602154612fbe91906152cb565b1115612ffb5760405162461bcd60e51b815260206004820152600c60248201526b14995dd85c99081b1a5b5a5d60a21b604482015260640161134d565b81601e600082825461300d91906152cb565b92505081905550806021600082825461302691906152cb565b9091555050601f54601e541061307c576020805460ff19168155604080516000815242928101929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a15b3360009081526022602052604090208054158015906130a05750600381015460ff16155b156130f25780600201544210156130e85760405162461bcd60e51b815260206004820152600c60248201526b4c6f636b6564207374616b6560a01b604482015260640161134d565b6130f23382614be5565b6130fd338483614d35565b6131073384614db2565b50506131136001600055565b50565b60008160008111801561312b57506008548111155b6131475760405162461bcd60e51b815260040161134d9061534d565b6001600160a01b03841660009081526013602090815260408083208684528252918290208251606081018452815481526001820154928101839052600290910154928101929092526131ce5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b604482015260640161134d565b6000816040015182602001516131e491906154aa565b90506000811161188f5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b604482015260640161134d565b6132306146cf565b6004546001600160a01b03908116908216036133cb576000613250611251565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561329a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132be9190615317565b905060008282116132d05760006132da565b6132da83836154aa565b90506000811161332c5760405162461bcd60e51b815260206004820152601f60248201527f4e6f20746f6b656e7320617661696c61626c6520746f20776974686472617700604482015260640161134d565b600b5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905260009186169063a9059cbb906044016020604051808303816000875af1158015613381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a59190615330565b9050806133c45760405162461bcd60e51b815260040161134d90615481565b5050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134369190615317565b9050600081116134805760405162461bcd60e51b81526020600482015260156024820152744e6f20746f6b656e7320746f20776974686472617760581b604482015260640161134d565b600b5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905260009184169063a9059cbb906044016020604051808303816000875af11580156134d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f99190615330565b9050806135185760405162461bcd60e51b815260040161134d90615481565b505050565b6001600160a01b038116600090815260226020526040812060028101548154839283928392839283928392429190911090839060649061355f9060c8906152de565b61356991906152f5565b83546001850154600286015460038701549394509192909190859060ff16858161359f57885461359a9088906152cb565b6135a2565b60005b9950995099509950995099509950505050919395979092949650565b6135c66146cf565b6001600160a01b0381166135ec5760405162461bcd60e51b815260040161134d90615531565b600f80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600080601060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561366a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368e9190615571565b505050915050806402540be4006136a591906155c1565b92915050565b6000816136e85760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b604482015260640161134d565b60005b82811015613761576137148484838181106137085761370861551b565b90506020020135611898565b61374f5760405162461bcd60e51b815260206004820152600c60248201526b10db185a5b4819985a5b195960a21b604482015260640161134d565b80613759816154ec565b9150506136eb565b5060019392505050565b6137736146cf565b60008160ff1611801561378a575060148160ff1611155b6137cb5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642070657263656e7461676560701b604482015260640161134d565b60195442101561380f5760405162461bcd60e51b815260206004820152600f60248201526e54696d656c6f636b2061637469766560881b604482015260640161134d565b61381c42620151806152cb565b6019556017546040805160ff928316815291831660208301524282820152517f05de795d533c83a69716d09a7d87c97b9ace14242301047692a6ccc1b8f3d14c9181900360600190a16017805460ff191660ff92909216919091179055565b8460008111801561388e57506008548111155b6138aa5760405162461bcd60e51b815260040161134d9061534d565b6138b26146cf565b600085116138ef5760405162461bcd60e51b815260206004820152600a6024820152695a65726f20707269636560b01b604482015260640161134d565b6000831161392d5760405162461bcd60e51b815260206004820152600b60248201526a5a65726f20746f6b656e7360a81b604482015260640161134d565b5060009485526012602052604090942060028101939093556003830191909155600582015560060155565b683635c9adc5dea000008110613ab1576001600160a01b038083166000908152601b60209081526040808320805460ff19166001179055601a909152902054168015613518576017546000906064906139b49060ff16856152de565b6139be91906152f5565b905060006139cd8260026152de565b9050600d54816018546139e091906152cb565b116133c4576001600160a01b0383166000908152601a602052604081206001018054849290613a109084906152cb565b90915550506001600160a01b0385166000908152601a602052604081206001018054849290613a409084906152cb565b925050819055508060186000828254613a5991906152cb565b90915550506040805183815260208101849052428183015290516001600160a01b0387811692908616917f5660d47451868f1bb42f832a92e54d7670a64411d1074b64dfab5bec5f29c2319181900360600190a35050505b5050565b613abd6146cf565b600880546000908152601260205260409020015460ff16613b135760405162461bcd60e51b815260206004820152601060248201526f416c726561647920696e61637469766560801b604482015260640161134d565b600880546000908152601260205260408082204260019091015582548252902001805460ff19169055565b613b466146cf565b6001600160a01b038116613b6c5760405162461bcd60e51b815260040161134d90615531565b6004546001600160a01b0390811690841603613c4a576000613b8c611251565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015613bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bfa9190615317565b905081613c0785836154aa565b1015613c475760405162461bcd60e51b815260206004820152600f60248201526e526573657276656420746f6b656e7360881b604482015260640161134d565b50505b60405163a9059cbb60e01b81526001600160a01b038281166004830152602482018490526000919085169063a9059cbb906044016020604051808303816000875af1158015613c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc19190615330565b905080613ce05760405162461bcd60e51b815260040161134d90615481565b50505050565b613cee6146cf565b6020805460ff191682151590811782556040805191825242928201929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a150565b613d436146fc565b3360009081526022602052604090208054613d915760405162461bcd60e51b815260206004820152600e60248201526d139bc81cdd185ad948199bdd5b9960921b604482015260640161134d565b600381015460ff1615613dda5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b604482015260640161134d565b8060020154421015613e1d5760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b604482015260640161134d565b805460006064613e2e60c8846152de565b613e3891906152f5565b90506000613e4682846152cb565b60038501805460ff19166001179055601e54909150613e669084906154aa565b601e55600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015613eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed69190615317565b811115613f1a5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015260640161134d565b6004805460405163a9059cbb60e01b81523392810192909252602482018390526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015613f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f959190615330565b905080613fb45760405162461bcd60e51b815260040161134d90615481565b60408051858152602081018590524281830152905133917f88d1c46373223a4f1f60db2badc985b05ec9c2b2eab4537f0f8e1291b78b6e37919081900360600190a25050505050612ebe6001600055565b61400d6146cf565b478061405b5760405162461bcd60e51b815260206004820152601a60248201527f4e6f204554482062616c616e636520746f207769746864726177000000000000604482015260640161134d565b600b54613113906001600160a01b031682614abd565b6000806000806000806000601e54601f5460c8602060009054906101000a900460ff1661409d600e5490565b602154806140aa600e5490565b6140b491906154aa565b959d949c50929a50909850965094509092509050565b601754601854600d54600092839283928392839260ff909116916140ee82826154aa565b60195460ff9094169992985090965094509092509050565b60205460009081908190819060ff1680156141245750601f54601e54105b90506000601e54601f541161413a57600061414a565b601e54601f5461414a91906154aa565b90506000601f54601e54606461416091906152de565b61416a91906152f5565b9296919550919350915050565b61417f6146cf565b600081116141ba5760405162461bcd60e51b81526020600482015260086024820152672d32b9379036b4b760c11b604482015260640161134d565b600555565b806000811180156141d257506008548111155b6141ee5760405162461bcd60e51b815260040161134d9061534d565b6141f66146cf565b60008281526011602052604090205460ff166142415760405162461bcd60e51b815260206004820152600a602482015269139bdd081c185d5cd95960b21b604482015260640161134d565b60008281526011602052604090819020805460ff191690555182907ff608654a6d8e1785594639dd55babb61d7ae157382015f904a24224e50333b1d906127159042815260200190565b6142936146cf565b600084116142d05760405162461bcd60e51b815260206004820152600a6024820152695a65726f20707269636560b01b604482015260640161134d565b6000821161430e5760405162461bcd60e51b815260206004820152600b60248201526a5a65726f20746f6b656e7360a81b604482015260640161134d565b600880546000908152601260205260409020015460ff16156143605760405162461bcd60e51b815260206004820152600b60248201526a53616c652061637469766560a81b604482015260640161134d565b60088054906000614370836154ec565b909155505060408051610140810182526000808252602080830182815283850189815260608086018a81526080870186815260a088018b815260c089018b815260e08a01898152610100808c018b81526101208d018c8152600880548e5260128d528f8e209e518f559a5160018f0155985160028e0155955160038d0155935160048c0155915160058b01555160068a015551600789015590519684018054935161ffff1990941697151561ff001916979097179215150291909117909455548451878152918201839052938101919091527f6a00651728a92841411081673eaa4eddbed06d102a590e050c22def40d4dd0b8910160405180910390a250505050565b6001600160a01b038082166000908152601a60209081526040808320815160a081018352815490951680865260018201549386018490526002820154928601839052600382015460ff16151560608701526004909101546080860152929384938493849384938493909290916144e981836154aa565b6001600160a01b039b909b166000908152601b602052604090205460809490940151929b919a909950975060ff90921695509350915050565b61452a6146cf565b6001600160a01b0381166145505760405162461bcd60e51b815260040161134d90615531565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61457a6146cf565b6001600160a01b0381166145a457604051631e4fbdf760e01b81526000600482015260240161134d565b61311381614b93565b6000826000811180156145c257506008548111155b6145de5760405162461bcd60e51b815260040161134d9061534d565b60008481526012602052604090206002015461460284670de0b6b3a76400006152de565b612f0891906152f5565b60008260008111801561462157506008548111155b61463d5760405162461bcd60e51b815260040161134d9061534d565b600480546040805163313ce56760e01b815290516001600160a01b039092169263313ce5679282820192602092908290030181865afa158015614684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a89190615371565b6146b390600a615472565b60008581526012602052604090206002015461460290856152de565b6001546001600160a01b03163314612ebe5760405163118cdaa760e01b815233600482015260240161134d565b60026000540361471f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60205460ff1661476b5760405162461bcd60e51b815260206004820152601060248201526f5374616b696e6720696e61637469766560801b604482015260640161134d565b600081116147a95760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b604482015260640161134d565b601f5481601e546147ba91906152cb565b11156147f75760405162461bcd60e51b815260206004820152600c60248201526b10d85c08195e18d95959195960a21b604482015260640161134d565b6000606461480660c8846152de565b61481091906152f5565b905061481b600e5490565b8160215461482991906152cb565b11156148665760405162461bcd60e51b815260206004820152600c60248201526b14995dd85c99081b1a5b5a5d60a21b604482015260640161134d565b81601e600082825461487891906152cb565b92505081905550806021600082825461489191906152cb565b9091555050601f54601e54106148e7576020805460ff19168155604080516000815242928101929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a15b6001600160a01b03831660009081526022602052604090208054158015906149145750600381015460ff16155b1561494857806002015442101561493e576040516302fd696960e61b815260040160405180910390fd5b6149488482614be5565b613ce0848483614d35565b33600090815260166020526040812080548592906149729084906152cb565b909155505033600090815260166020526040812060010180548492906149999084906152cb565b9091555050683635c9adc5dea0000083106149c957336000908152601b60205260409020805460ff191660011790555b6001600160a01b03811615613518576135183384613958565b80156149f257613ab13383614726565b336000908152601360209081526040808320600854845290915290206001015415614a5157336000908152601360209081526040808320600854845290915281206001018054849290614a469084906152cb565b90915550613ab19050565b604051806060016040528060008152602001838152602001600081525060136000614a793390565b6001600160a01b0316815260208082019290925260409081016000908120600854825283528190208351815591830151600183015591909101516002909101555050565b80471015614afb5760405162461bcd60e51b815260206004820152600b60248201526a4c6f772062616c616e636560a81b604482015260640161134d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614b48576040519150601f19603f3d011682016040523d82523d6000602084013e614b4d565b606091505b50509050806135185760405162461bcd60e51b81526020600482015260126024820152711155120814185e5b595b9d0819985a5b195960721b604482015260640161134d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b805460006064614bf660c8846152de565b614c0091906152f5565b60038401805460ff191660011790556004549091506000906001600160a01b031663a9059cbb86614c3185876152cb565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015614c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ca09190615330565b905080614ce35760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b604482015260640161134d565b6040805184815260208101849052428183015290516001600160a01b038716917f88d1c46373223a4f1f60db2badc985b05ec9c2b2eab4537f0f8e1291b78b6e37919081900360600190a25050505050565b8181554260018201819055614d4e906301e133806152cb565b6002820181905560038201805460ff1916905560408051848152426020820152908101919091526001600160a01b038416907f0fc5b1bac0416800b42a669229a346b6e5a15db3896339dbdc5fa376e1e4570a9060600160405180910390a2505050565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015614e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e249190615317565b600480546040516323b872dd60e01b81526001600160a01b0387811693820193909352306024820152604481018690529293506000929116906323b872dd906064016020604051808303816000875af1158015614e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ea99190615330565b905080614ec85760405162461bcd60e51b815260040161134d90615481565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015614f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f3a9190615317565b9050614f4684846152cb565b8110156133c45760405162461bcd60e51b815260206004820152601060248201526f125b98dbdc9c9958dd08185b5bdd5b9d60821b604482015260640161134d565b600060208284031215614f9a57600080fd5b5035919050565b80356001600160a01b0381168114614fb857600080fd5b919050565b801515811461311357600080fd5b60008060408385031215614fde57600080fd5b614fe783614fa1565b91506020830135614ff781614fbd565b809150509250929050565b60006020828403121561501457600080fd5b61278682614fa1565b6000806040838503121561503057600080fd5b823591506020830135614ff781614fbd565b6000806040838503121561505557600080fd5b61505e83614fa1565b915061506c60208401614fa1565b90509250929050565b6000806040838503121561508857600080fd5b50508035926020909101359150565b6000806000606084860312156150ac57600080fd5b833592506150bc60208501614fa1565b915060408401356150cc81614fbd565b809150509250925092565b6000602082840312156150e957600080fd5b813561278681614fbd565b6020808252825182820181905260009190848201906040850190845b818110156151355783516001600160a01b031683529284019291840191600101615110565b50909695505050505050565b6000806040838503121561515457600080fd5b61515d83614fa1565b946020939093013593505050565b6000806020838503121561517e57600080fd5b823567ffffffffffffffff8082111561519657600080fd5b818501915085601f8301126151aa57600080fd5b8135818111156151b957600080fd5b8660208260051b85010111156151ce57600080fd5b60209290920196919550909350505050565b60ff8116811461311357600080fd5b60006020828403121561520157600080fd5b8135612786816151e0565b600080600080600060a0868803121561522457600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060006060848603121561525c57600080fd5b61526584614fa1565b92506020840135915061527a60408501614fa1565b90509250925092565b6000806000806080858703121561529957600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b808201808211156136a5576136a56152b5565b80820281158282048414176136a5576136a56152b5565b60008261531257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561532957600080fd5b5051919050565b60006020828403121561534257600080fd5b815161278681614fbd565b6020808252600a9082015269125b9d985b1a5908125160b21b604082015260600190565b60006020828403121561538357600080fd5b8151612786816151e0565b600181815b808511156153c95781600019048211156153af576153af6152b5565b808516156153bc57918102915b93841c9390800290615393565b509250929050565b6000826153e0575060016136a5565b816153ed575060006136a5565b8160018114615403576002811461540d57615429565b60019150506136a5565b60ff84111561541e5761541e6152b5565b50506001821b6136a5565b5060208310610133831016604e8410600b841016171561544c575081810a6136a5565b615456838361538e565b806000190482111561546a5761546a6152b5565b029392505050565b600061278660ff8416836153d1565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b818103818111156136a5576136a56152b5565b6000825160005b818110156154de57602081860181015185830152016154c4565b506000920191825250919050565b6000600182016154fe576154fe6152b5565b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b805169ffffffffffffffffffff81168114614fb857600080fd5b600080600080600060a0868803121561558957600080fd5b61559286615557565b94506020860151935060408601519250606086015191506155b560808701615557565b90509295509295909350565b80820260008212600160ff1b841416156155dd576155dd6152b5565b81810583148215176136a5576136a56152b556fea264697066735822122047ef66a4c60a9df5d2b7f17c666705dc33606335915575fba0bb0e27bf8f67c064736f6c63430008140033",
  "deployedBytecode": "",
  "libraries": {
    "SaleUtils": "0x23A92400A88B1F849D315471c2a3F1FDB311774d"
  },
  "devdoc": {
    "details": "All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "ChangeTokentoSell(address)": {
        "details": "Update the sale token address"
      },
      "EditMinTokenToBuy(uint256)": {
        "details": "Update minimum token purchase amount"
      },
      "ExcludeAccouctFromMinBuy(address,bool)": {
        "details": "Exclude account from minimum buy requirement"
      },
      "WithdrawAllContractFunds()": {
        "details": "Withdraw all ETH balance from contract"
      },
      "WithdrawAllTokens(address)": {
        "details": "Override withdraw all tokens to account for staking rewards"
      },
      "buyWithEth(address,bool)": {
        "details": "Buy into a presale using ETH with option for immediate staking"
      },
      "buyWithUSDT(uint256,address,bool)": {
        "details": "Buy into a presale using USDT with option for immediate staking"
      },
      "calculateBaseReservedTokens()": {
        "details": "Override the base calculation to include referral rewards"
      },
      "calculateTotalReservedTokens()": {
        "details": "Calculate total reserved tokens across all systems (referrals and staking)",
        "returns": {
          "_0": "Total reserved tokens that can't be withdrawn"
        }
      },
      "canBeReferred(address,address)": {
        "details": "Check if a user can be referred by a specific referrer"
      },
      "canReferOthers(address)": {
        "details": "Check if a user has a valid referral link to share"
      },
      "changeFundWallet(address)": {
        "details": "Change fund receiving wallet"
      },
      "changeUSDTToken(address)": {
        "details": "Change USDT token address"
      },
      "claimAmount(uint256)": {
        "details": "Claim function to handle only non-staked tokens"
      },
      "claimMultiple(uint256[])": {
        "details": "To claim tokens from multiple presales"
      },
      "claimReferralRewards()": {
        "details": "Claim referral rewards"
      },
      "claimableAmount(address,uint256)": {
        "details": "Helper funtion to get claimable tokens for a given presale"
      },
      "constructor": {
        "details": "Constructor sets up the contract parameters",
        "params": {
          "_MinTokenTobuy": "Minimum tokens that can be purchased",
          "_SaleToken": "Sale token address",
          "_oracle": "Chainlink oracle for ETH price feed",
          "_totalTokenSupply": "Total token supply (100,000,000,000)",
          "_usdt": "USDT token address"
        }
      },
      "createPresale(uint256,uint256,uint256,uint256)": {
        "details": "Create a new presale"
      },
      "enableClaim(uint256,bool)": {
        "details": "Enable claiming for a presale"
      },
      "endPresale()": {
        "details": "End the presale"
      },
      "ethBuyHelper(uint256,uint256)": {
        "details": "Helper funtion to get ETH price for given amount"
      },
      "ethToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for eth amount"
      },
      "getClaimableReferralRewards(address)": {
        "details": "Get claimable referral rewards for a user",
        "params": {
          "_user": "Address of the user"
        }
      },
      "getLatestPrice()": {
        "details": "Get the latest ETH price from Chainlink"
      },
      "getReferralChain(address)": {
        "details": "Get the entire referral chain for a user"
      },
      "getReferralProgramStats()": {
        "details": "Get referral program stats"
      },
      "getStakingAvailability()": {
        "details": "Quick check if staking is available and capacity info"
      },
      "getStakingStats()": {
        "details": "Get staking program statistics"
      },
      "getUserCollectedReferrals(address)": {
        "details": "Get user's total collected referral rewards"
      },
      "getUserReferralInfo(address)": {
        "details": "Get user referral info for frontend"
      },
      "getUserStakingInfo(address)": {
        "details": "Get user staking information"
      },
      "maxStakingRewards()": {
        "details": "Public getter for max staking rewards"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pausePresale(uint256)": {
        "details": "Pause a presale"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "preFundContract()": {
        "details": "Pre-fund the contract with tokens for presale, referrals, and staking"
      },
      "processReferralRewards(address,uint256)": {
        "details": "Process referral rewards after a successful purchase",
        "params": {
          "_tokenAmount": "Amount of tokens purchased",
          "_user": "Address of the user who made a purchase"
        }
      },
      "recordReferral(address)": {
        "details": "Records a valid referral relationship",
        "params": {
          "_referrer": "Address of the referrer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeWithdraw(address,uint256,address)": {
        "details": "Safe withdrawal function for accumulated tokens",
        "params": {
          "_amount": "Amount to withdraw",
          "_recipient": "Recipient address",
          "_token": "Token address"
        }
      },
      "setStakingIntent(bool)": {
        "details": "Set staking intent for a user",
        "params": {
          "_intent": "Whether to stake tokens upon claim"
        }
      },
      "setStakingStatus(bool)": {
        "details": "Toggle staking status (active/inactive)"
      },
      "stakeTokens(uint256)": {
        "details": "Stake tokens with 1-year lock and 200% APY"
      },
      "startPresale()": {
        "details": "Start the presale"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPausePresale(uint256)": {
        "details": "Unpause a presale"
      },
      "updateMaxReferralRewards(uint256)": {
        "details": "Update the maximum referral rewards (5% of total supply)",
        "params": {
          "_totalSupply": "The total token supply to calculate 5% from"
        }
      },
      "updatePresale(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Update presale parameters"
      },
      "updateReferralRewardPercentage(uint8)": {
        "details": "Change referral reward percentage with timelock protection",
        "params": {
          "_percentage": "New percentage (1-20)"
        }
      },
      "updateStakingCap(uint256)": {
        "details": "Update staking cap"
      },
      "usdtBuyHelper(uint256,uint256)": {
        "details": "Helper funtion to get USDT price for given amount"
      },
      "usdtToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for given usdt amount"
      },
      "withdrawStake()": {
        "details": "Withdraw staked tokens and rewards after lock period"
      }
    },
    "title": "PreSale and Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract handles token presale, referral rewards, and staking functionality",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1098,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 988,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2775,
        "contract": "contracts/Sale.sol:Sale",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2777,
        "contract": "contracts/Sale.sol:Sale",
        "label": "usdt",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/Sale.sol:Sale",
        "label": "SaleToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2781,
        "contract": "contracts/Sale.sol:Sale",
        "label": "MinTokenTobuy",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2783,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalUSDTRaised",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2785,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalTokenSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2787,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2789,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDT_MULTIPLIER",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2791,
        "contract": "contracts/Sale.sol:Sale",
        "label": "ETH_MULTIPLIER",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2793,
        "contract": "contracts/Sale.sol:Sale",
        "label": "fundReceiver",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2795,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2797,
        "contract": "contracts/Sale.sol:Sale",
        "label": "maxReferralRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2799,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_maxStakingRewards",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2802,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isTokenPreFunded",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2805,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDTInterface",
        "offset": 1,
        "slot": "15",
        "type": "t_contract(IERC20Metadata)949"
      },
      {
        "astId": 2808,
        "contract": "contracts/Sale.sol:Sale",
        "label": "aggregatorInterface",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(Aggregator)2766"
      },
      {
        "astId": 2812,
        "contract": "contracts/Sale.sol:Sale",
        "label": "paused",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2817,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presale",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(Presale)4985_storage)"
      },
      {
        "astId": 2824,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userClaimData",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)4992_storage))"
      },
      {
        "astId": 2828,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isExcludeMinToken",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2832,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isAdmin",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2837,
        "contract": "contracts/Sale.sol:Sale",
        "label": "users",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(User)4964_storage)"
      },
      {
        "astId": 1176,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralRewardPercentage",
        "offset": 0,
        "slot": "23",
        "type": "t_uint8"
      },
      {
        "astId": 1178,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalReferralRewardsIssued",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1180,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralPercentageChangeTimeLock",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1185,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralData",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_struct(ReferralData)5003_storage)"
      },
      {
        "astId": 1189,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasQualifiedPurchase",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1193,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasUsedReferral",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1199,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referredUserExists",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3919,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStaked",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 3921,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingCap",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 3923,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingActive",
        "offset": 0,
        "slot": "32",
        "type": "t_bool"
      },
      {
        "astId": 3925,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStakingRewardsIssued",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 3930,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakes",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_struct(StakeInfo)5012_storage)"
      },
      {
        "astId": 3934,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakingIntent",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Aggregator)2766": {
        "encoding": "inplace",
        "label": "contract Aggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)949": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)4992_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ISaleStructs.ClaimData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimData)4992_storage)"
      },
      "t_mapping(t_address,t_struct(ReferralData)5003_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.ReferralData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferralData)5003_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)5012_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)5012_storage"
      },
      "t_mapping(t_address,t_struct(User)4964_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)4964_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ClaimData)4992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISaleStructs.ClaimData)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimData)4992_storage"
      },
      "t_mapping(t_uint256,t_struct(Presale)4985_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISaleStructs.Presale)",
        "numberOfBytes": "32",
        "value": "t_struct(Presale)4985_storage"
      },
      "t_struct(ClaimData)4992_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.ClaimData",
        "members": [
          {
            "astId": 4987,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4989,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4991,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Presale)4985_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.Presale",
        "members": [
          {
            "astId": 4966,
            "contract": "contracts/Sale.sol:Sale",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4968,
            "contract": "contracts/Sale.sol:Sale",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4970,
            "contract": "contracts/Sale.sol:Sale",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4972,
            "contract": "contracts/Sale.sol:Sale",
            "label": "nextStagePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4974,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4976,
            "contract": "contracts/Sale.sol:Sale",
            "label": "tokensToSell",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4978,
            "contract": "contracts/Sale.sol:Sale",
            "label": "UsdtHardcap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4980,
            "contract": "contracts/Sale.sol:Sale",
            "label": "amountRaised",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4982,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Active",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4984,
            "contract": "contracts/Sale.sol:Sale",
            "label": "isEnableClaim",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ReferralData)5003_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.ReferralData",
        "members": [
          {
            "astId": 4994,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4996,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalReferralRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4998,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedReferralRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5000,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasReferred",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5002,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referralCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakeInfo)5012_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.StakeInfo",
        "members": [
          {
            "astId": 5005,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5007,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakingTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5009,
            "contract": "contracts/Sale.sol:Sale",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5011,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasWithdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)4964_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.User",
        "members": [
          {
            "astId": 4954,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalBoughtTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4956,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4958,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalCollectedReferral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4961,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referredUsers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4963,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}