{
  "address": "0x0D157282d76e8820132d61eE90eA33B19b7F2EF3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SaleToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_MinTokenTobuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokenSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresalePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refereeReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimedWithTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensPreFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "ExcludeAccouctFromMinBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REFERRAL_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_PURCHASE_FOR_REFERRAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MinTokenTobuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CHANGE_TIMELOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_APY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SaleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalAmountBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalUSDTRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawContractFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithUSDT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referee",
          "type": "address"
        }
      ],
      "name": "canBeReferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEligible",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canReferOthers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "changeFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "changeUSDTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferralRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_UsdtHardcap",
          "type": "uint256"
        }
      ],
      "name": "createPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ethToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getClaimableReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReferralChain",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferralProgramStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPercentageChangeAllowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingAvailability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_canStake",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_remainingCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentFilled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAPY",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRewardsCommitted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remainingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserReferralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isQualifiedReferrer",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "potentialReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasQualifiedPurchase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasUsedReferral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludeMinToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenPreFunded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "pausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preFundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "presale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UsdtHardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "Active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnableClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "processReferralRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "recordReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralData",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasReferred",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralPercentageChangeTimeLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_intent",
          "type": "bool"
        }
      ],
      "name": "setStakingIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStakingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReferralRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unPausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_Hardcap",
          "type": "uint256"
        }
      ],
      "name": "updatePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        }
      ],
      "name": "updateReferralRewardPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "updateStakingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdtToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakingIntent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TotalBoughtTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalCollectedReferral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8713f4fab9ef910bfd16e667b1152d4f4bcfb940a30027958544fab4d0b5ea0",
  "receipt": {
    "to": null,
    "from": "0x0E816E3E3a08dA027ED0f5D74965CCE3b43a1C8d",
    "contractAddress": "0x0D157282d76e8820132d61eE90eA33B19b7F2EF3",
    "transactionIndex": 151,
    "gasUsed": "5638146",
    "logsBloom": "0x00000000000000000100000000000000000000000000000000800001000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000001000000000200000000000000000000000000020000000100000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000200000000000000000000000000000000000000000",
    "blockHash": "0x41279cb7340de00bda0f7d6270a1c572d06068263ba7228905e8274df55631c9",
    "transactionHash": "0xa8713f4fab9ef910bfd16e667b1152d4f4bcfb940a30027958544fab4d0b5ea0",
    "logs": [
      {
        "transactionIndex": 151,
        "blockNumber": 8228353,
        "transactionHash": "0xa8713f4fab9ef910bfd16e667b1152d4f4bcfb940a30027958544fab4d0b5ea0",
        "address": "0x0D157282d76e8820132d61eE90eA33B19b7F2EF3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000e816e3e3a08da027ed0f5d74965cce3b43a1c8d"
        ],
        "data": "0x",
        "logIndex": 254,
        "blockHash": "0x41279cb7340de00bda0f7d6270a1c572d06068263ba7228905e8274df55631c9"
      }
    ],
    "blockNumber": 8228353,
    "cumulativeGasUsed": "22086818",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306",
    "0x1679B569c112C40fE04BA89C99D59326De278620",
    "0x3d3067687CCf1d0a02f546eEB613F270E0Df59a3",
    "10000000000000000000",
    "100000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "61284812ec4f252663d7ea7a8a32210c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refereeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimedWithTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensPreFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REFERRAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_FOR_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CHANGE_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalAmountBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalUSDTRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"canBeReferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEligible\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canReferOthers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralChain\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralProgramStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPercentageChangeAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAvailability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_remainingCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFilled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAPY\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardsCommitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isQualifiedReferrer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasQualifiedPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasUsedReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenPreFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preFundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"processReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"recordReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasReferred\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentageChangeTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_intent\",\"type\":\"bool\"}],\"name\":\"setStakingIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateStakingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakingIntent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalBoughtTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalCollectedReferral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"ExcludeAccouctFromMinBuy(address,bool)\":{\"details\":\"Exclude account from minimum buy requirement\"},\"WithdrawContractFunds(uint256)\":{\"details\":\"Withdraw ETH from contract\"},\"WithdrawTokens(address,uint256)\":{\"details\":\"Override withdraw to account for staking rewards\"},\"buyWithEth(address,bool)\":{\"details\":\"To buy into a presale using ETH with option for immediate staking\",\"params\":{\"referrer\":\"Referrer address (optional, use address(0) for no referrer)\",\"shouldStake\":\"If true, tokens are immediately staked for 1 year with 200% APY\"}},\"buyWithUSDT(uint256,address,bool)\":{\"details\":\"To buy into a presale using USDT with option for immediate staking\",\"params\":{\"referrer\":\"Referrer address (optional, use address(0) for no referrer)\",\"shouldStake\":\"If true, tokens are immediately staked for 1 year with 200% APY\",\"usdAmount\":\"USDT amount to buy tokens\"}},\"canBeReferred(address,address)\":{\"details\":\"Check if a user can be referred by a specific referrer\"},\"changeFundWallet(address)\":{\"details\":\"Change fund receiving wallet\"},\"changeUSDTToken(address)\":{\"details\":\"Change USDT token address\"},\"claimAmount(uint256)\":{\"details\":\"Claim function to handle only non-staked tokens\",\"params\":{\"_id\":\"Presale id\"}},\"claimMultiple(uint256[])\":{\"details\":\"To claim tokens from multiple presales\",\"params\":{\"_ids\":\"Array of presale IDs\"}},\"claimReferralRewards()\":{\"details\":\"Claim referral rewards\"},\"claimableAmount(address,uint256)\":{\"details\":\"Helper funtion to get claimable tokens for a given presale\"},\"constructor\":{\"details\":\"Constructor sets up the contract parameters\",\"params\":{\"_MinTokenTobuy\":\"Minimum tokens that can be purchased\",\"_SaleToken\":\"Sale token address\",\"_oracle\":\"Chainlink oracle for ETH price feed\",\"_totalTokenSupply\":\"Total token supply (100,000,000,000)\",\"_usdt\":\"USDT token address\"}},\"createPresale(uint256,uint256,uint256,uint256)\":{\"details\":\"Create a new presale\"},\"enableClaim(uint256,bool)\":{\"details\":\"Enable claiming for a presale\"},\"endPresale()\":{\"details\":\"End the presale\"},\"ethToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for eth amount\"},\"getClaimableReferralRewards(address)\":{\"details\":\"Get claimable referral rewards for a user\",\"params\":{\"_user\":\"Address of the user\"}},\"getLatestPrice()\":{\"details\":\"Get the latest ETH price from Chainlink\"},\"getReferralChain(address)\":{\"details\":\"Get the entire referral chain for a user\"},\"getStakingAvailability()\":{\"details\":\"Quick check if staking is available and capacity info\"},\"getStakingStats()\":{\"details\":\"Get staking program statistics\"},\"getUserStakingInfo(address)\":{\"details\":\"Get user staking information\"},\"maxStakingRewards()\":{\"details\":\"Public getter for max staking rewards\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pausePresale(uint256)\":{\"details\":\"Pause a presale\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"preFundContract()\":{\"details\":\"Pre-fund the contract with tokens for presale, referrals, and staking\"},\"processReferralRewards(address,uint256)\":{\"details\":\"Process referral rewards after a successful purchase\",\"params\":{\"_tokenAmount\":\"Amount of tokens purchased\",\"_user\":\"Address of the user who made a purchase\"}},\"recordReferral(address)\":{\"details\":\"Records a valid referral relationship\",\"params\":{\"_referrer\":\"Address of the referrer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setStakingIntent(bool)\":{\"details\":\"Set staking intent for a user\",\"params\":{\"_intent\":\"Whether to stake tokens upon claim\"}},\"setStakingStatus(bool)\":{\"details\":\"Toggle staking status (active/inactive)\"},\"stakeTokens(uint256)\":{\"details\":\"Stake tokens with 1-year lock and 200% APY\"},\"startPresale()\":{\"details\":\"Start the presale\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPausePresale(uint256)\":{\"details\":\"Unpause a presale\"},\"updatePresale(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Update presale parameters\"},\"updateReferralRewardPercentage(uint256)\":{\"details\":\"Change referral reward percentage with timelock protection\",\"params\":{\"_percentage\":\"New percentage (1-20)\"}},\"updateStakingCap(uint256)\":{\"details\":\"Update staking cap\"},\"usdtToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for given usdt amount\"},\"withdrawStake()\":{\"details\":\"Withdraw staked tokens and rewards after lock period\"}},\"title\":\"PreSale and Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract handles token presale, referral rewards, and staking functionality\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sale.sol\":\"Sale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/ReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./SaleBase.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\n\\n/**\\n * @title Referral Manager Contract\\n * @notice This contract handles token referral functionality\\n */\\ncontract ReferralManager is SaleBase {\\n    // Referral system constants and variables\\n    uint256 public constant MINIMUM_PURCHASE_FOR_REFERRAL = 1000 * TOKEN_DECIMALS; // 1000 tokens minimum to qualify for referral\\n    uint256 public referralRewardPercentage = 20; // Default 20% reward (configurable)\\n    uint256 public constant MAX_REFERRAL_PERCENTAGE = 20; // Maximum allowed reward percentage\\n    uint256 public totalReferralRewardsIssued;\\n    uint256 public constant REFERRAL_DENOMINATOR = 100; // For percentage calculations\\n\\n    // Anti-gaming time lock for referral changes\\n    uint256 public referralPercentageChangeTimeLock;\\n    uint256 public constant REFERRAL_CHANGE_TIMELOCK = 24 hours;\\n\\n    // Referral system mappings\\n    mapping(address => ISaleStructs.ReferralData) public referralData;\\n    mapping(address => bool) public hasQualifiedPurchase; // Track if user has purchased enough to qualify as referrer\\n    mapping(address => bool) public hasUsedReferral; // Prevent using multiple referrals\\n\\n    // Referral Events\\n    event ReferralRecorded(\\n        address indexed referrer, \\n        address indexed referee, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralRewardsClaimed(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralPercentageUpdated(\\n        uint256 previousPercentage, \\n        uint256 newPercentage, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralRewardsAdded(\\n        address indexed referrer, \\n        address indexed referee, \\n        uint256 referrerReward, \\n        uint256 refereeReward, \\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Constructor initializes with same parameters as SaleBase\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n        SaleBase(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply) \\n    {\\n        // Initialize referral-specific parameters\\n        referralPercentageChangeTimeLock = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Override withdraw to account for referral rewards\\n     */\\n    function WithdrawTokens(address _token, uint256 amount) external virtual override onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for rewards\\n            uint256 reservedTokens = totalReferralRewardsIssued;\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(\\n                contractBalance - amount >= reservedTokens,\\n                \\\"Cannot withdraw tokens reserved for rewards\\\"\\n            );\\n        }\\n        \\n        bool success = IERC20(_token).transfer(fundReceiver, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Change referral reward percentage with timelock protection\\n     * @param _percentage New percentage (1-20)\\n     */\\n    function updateReferralRewardPercentage(uint256 _percentage) external onlyOwner {\\n        require(_percentage > 0 && _percentage <= MAX_REFERRAL_PERCENTAGE, \\\"Invalid percentage\\\");\\n        require(block.timestamp >= referralPercentageChangeTimeLock, \\\"Timelock active\\\");\\n        \\n        // Set new timelock for future changes\\n        referralPercentageChangeTimeLock = block.timestamp + REFERRAL_CHANGE_TIMELOCK;\\n        \\n        uint256 oldPercentage = referralRewardPercentage;\\n        referralRewardPercentage = _percentage;\\n        \\n        emit ReferralPercentageUpdated(oldPercentage, _percentage, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Records a valid referral relationship\\n     * @param _referrer Address of the referrer\\n     */\\n    function recordReferral(address _referrer) public {\\n        // Security checks\\n        require(_referrer != address(0), \\\"Invalid referrer\\\");\\n        require(_referrer != msg.sender, \\\"Cannot refer yourself\\\");\\n        require(!hasUsedReferral[msg.sender], \\\"Already used a referral\\\");\\n        require(hasQualifiedPurchase[_referrer], \\\"Referrer has not qualified\\\");\\n        \\n        // Prevent circular referrals - Check if the referrer was referred by the current user\\n        require(referralData[_referrer].referrer != msg.sender, \\\"Circular referral not allowed\\\");\\n        \\n        // Also check deeper circular referrals by traversing the chain\\n        address currentReferrer = referralData[_referrer].referrer;\\n        while (currentReferrer != address(0)) {\\n            require(currentReferrer != msg.sender, \\\"Circular referral chain detected\\\");\\n            currentReferrer = referralData[currentReferrer].referrer;\\n        }\\n        \\n        // Record the referral relationship in both data structures for compatibility\\n        referralData[msg.sender].referrer = _referrer;\\n        users[msg.sender].referrer = _referrer;\\n        hasUsedReferral[msg.sender] = true;\\n        \\n        // Update referrer stats\\n        referralData[_referrer].hasReferred = true;\\n        referralData[_referrer].referralCount++;\\n        \\n        // Add user to referrer's referredUsers array in users struct\\n        bool alreadyReferred = false;\\n        for (uint i = 0; i < users[_referrer].referredUsers.length; i++) {\\n            if (users[_referrer].referredUsers[i] == msg.sender) {\\n                alreadyReferred = true;\\n                break;\\n            }\\n        }\\n        if (!alreadyReferred) {\\n            users[_referrer].referredUsers.push(msg.sender);\\n        }\\n        \\n        emit ReferralRecorded(_referrer, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Process referral rewards after a successful purchase\\n     * @param _user Address of the user who made a purchase\\n     * @param _tokenAmount Amount of tokens purchased\\n     */\\n    function processReferralRewards(address _user, uint256 _tokenAmount) public {\\n        // Check if purchase meets minimum for referral qualification\\n        if (_tokenAmount >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            hasQualifiedPurchase[_user] = true;\\n        }\\n        \\n        // If user has a referrer, calculate and assign rewards\\n        address referrer = referralData[_user].referrer;\\n        if (referrer != address(0) && _tokenAmount >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            // Calculate rewards (both get the same percentage)\\n            uint256 referrerReward = _tokenAmount * referralRewardPercentage / REFERRAL_DENOMINATOR;\\n            uint256 refereeReward = referrerReward; // Same reward for both parties\\n            \\n            // Check against the max referral rewards cap\\n            uint256 totalNewRewards = referrerReward + refereeReward;\\n            if (totalReferralRewardsIssued + totalNewRewards <= maxReferralRewards) {\\n                // Update referrer's rewards\\n                referralData[referrer].totalReferralRewards = \\n                    referralData[referrer].totalReferralRewards + referrerReward;\\n                \\n                // Update referee's rewards\\n                referralData[_user].totalReferralRewards = \\n                    referralData[_user].totalReferralRewards + refereeReward;\\n                \\n                // Update total rewards issued\\n                totalReferralRewardsIssued = totalReferralRewardsIssued + totalNewRewards;\\n                \\n                emit ReferralRewardsAdded(\\n                    referrer, \\n                    _user, \\n                    referrerReward, \\n                    refereeReward, \\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get claimable referral rewards for a user\\n     * @param _user Address of the user\\n     */\\n    function getClaimableReferralRewards(address _user) public view returns (uint256) {\\n        ISaleStructs.ReferralData memory data = referralData[_user];\\n        return data.totalReferralRewards - data.claimedReferralRewards;\\n    }\\n\\n    /**\\n     * @dev Claim referral rewards\\n     */\\n    function claimReferralRewards() external nonReentrant returns (bool) {\\n        uint256 amount = getClaimableReferralRewards(msg.sender);\\n        require(amount > 0, \\\"No rewards to claim\\\");\\n        \\n        // Verify there are enough tokens in the contract\\n        require(\\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n        \\n        // Update claimed amount\\n        referralData[msg.sender].claimedReferralRewards = \\n            referralData[msg.sender].claimedReferralRewards + amount;\\n        \\n        // Transfer tokens\\n        bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n        \\n        emit ReferralRewardsClaimed(msg.sender, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    // Get user referral info for frontend\\n    function getUserReferralInfo(address _user) external view returns (\\n        address referrer,\\n        uint256 totalRewards,\\n        uint256 claimedRewards,\\n        uint256 pendingRewards,\\n        bool isQualifiedReferrer,\\n        uint256 referralCount\\n    ) {\\n        ISaleStructs.ReferralData memory data = referralData[_user];\\n        return (\\n            data.referrer,\\n            data.totalReferralRewards,\\n            data.claimedReferralRewards,\\n            data.totalReferralRewards - data.claimedReferralRewards,\\n            hasQualifiedPurchase[_user],\\n            data.referralCount\\n        );\\n    }\\n\\n    // Get referral program stats\\n    function getReferralProgramStats() external view returns (\\n        uint256 currentPercentage,\\n        uint256 totalRewardsIssued,\\n        uint256 maxRewards,\\n        uint256 remainingRewards,\\n        uint256 nextPercentageChangeAllowed\\n    ) {\\n        return (\\n            referralRewardPercentage,\\n            totalReferralRewardsIssued,\\n            maxReferralRewards,\\n            maxReferralRewards - totalReferralRewardsIssued,\\n            referralPercentageChangeTimeLock\\n        );\\n    }\\n\\n    // Check if a user has a valid referral link to share\\n    function canReferOthers(address _user) external view returns (bool) {\\n        return hasQualifiedPurchase[_user];\\n    }\\n\\n    /**\\n     * @dev Check if a user can be referred by a specific referrer\\n     */\\n    function canBeReferred(address _referrer, address _referee) external view returns (bool isEligible, uint8 reason) {\\n        // Check if user already has a referrer\\n        if (hasUsedReferral[_referee]) {\\n            return (false, 1); // Already has a referrer\\n        }\\n        \\n        // Check if referrer is the same as referee (self-referral)\\n        if (_referrer == _referee) {\\n            return (false, 2); // Self-referral not allowed\\n        }\\n        \\n        // Check if referrer is qualified\\n        if (!hasQualifiedPurchase[_referrer]) {\\n            return (false, 3); // Referrer not qualified\\n        }\\n        \\n        // Check first level circular referral (A refers B, B tries to refer A)\\n        if (referralData[_referrer].referrer == _referee) {\\n            return (false, 2); // Circular referral\\n        }\\n        \\n        // Check deeper circular referrals by traversing the chain\\n        address currentReferrer = referralData[_referrer].referrer;\\n        while (currentReferrer != address(0)) {\\n            if (currentReferrer == _referee) {\\n                return (false, 2); // Circular referral chain\\n            }\\n            currentReferrer = referralData[currentReferrer].referrer;\\n        }\\n        \\n        // All checks passed\\n        return (true, 0);\\n    }\\n    \\n    /**\\n     * @dev Get the entire referral chain for a user\\n     */\\n    function getReferralChain(address _user) external view returns (address[] memory) {\\n        // Count the depth of the referral chain\\n        uint256 chainDepth = 0;\\n        address current = _user;\\n        \\n        while (referralData[current].referrer != address(0)) {\\n            chainDepth++;\\n            current = referralData[current].referrer;\\n        }\\n        \\n        // Create array to hold the chain\\n        address[] memory chain = new address[](chainDepth + 1);\\n        \\n        // Fill the array\\n        chain[0] = _user;\\n        current = _user;\\n        for (uint256 i = 1; i <= chainDepth; i++) {\\n            current = referralData[current].referrer;\\n            chain[i] = current;\\n        }\\n        \\n        return chain;\\n    }\\n} \",\"keccak256\":\"0x1847ccbcbc0c4d000c72c0ce81e79fc1bd8e43da34845c29269ef37d475e778b\",\"license\":\"MIT\"},\"contracts/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./StakingManager.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\nimport \\\"./interfaces/ISaleStructs.sol\\\";\\n\\n/**\\n * @title PreSale and Staking Contract\\n * @notice This contract handles token presale, referral rewards, and staking functionality\\n * @dev All tokens (presale, referral, staking) must be sent to the contract before starting\\n *\\n * Token Allocation:\\n * - 30% for presale (30,000,000,000 tokens)\\n * - 5% for referral rewards (5,000,000,000 tokens)\\n * - 20% for staking rewards (20,000,000,000 tokens)\\n *\\n * Total: 55% of total supply must be transferred to this contract\\n */\\ncontract Sale is StakingManager {\\n    // Events needed by this contract\\n    event TokensBought(\\n        address indexed user,\\n        uint256 indexed id,\\n        address indexed purchaseToken,\\n        uint256 tokensBought,\\n        uint256 amountPaid,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensClaimedWithTimestamp(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Constructor sets up the contract parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _SaleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply (100,000,000,000)\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n      StakingManager(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply)\\n    {\\n        // No additional initialization needed\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using USDT with option for immediate staking\\n     * @param usdAmount USDT amount to buy tokens\\n     * @param referrer Referrer address (optional, use address(0) for no referrer)\\n     * @param shouldStake If true, tokens are immediately staked for 1 year with 200% APY\\n     */\\n    function buyWithUSDT(\\n        uint256 usdAmount, \\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, usdtToTokens(presaleId, usdAmount))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Contract not pre-funded with tokens\\\");\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active == true, \\\"Presale is not active yet\\\");\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\\n        \\\"Amount should be less than leftHardcap\\\");\\n\\n        // Handle referral if provided and not zero address\\n        if (referrer != address(0)) {\\n            // Security check to prevent contract-based referrals (potential attack vector)\\n            require(!SaleUtils.isContract(referrer), \\\"Referrer cannot be a contract\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n        TotalUSDTRaised += usdAmount; \\n\\n        if (isExcludeMinToken[msg.sender] == false) {\\n            require(tokens >= MinTokenTobuy, \\\"Less than min amount\\\");\\n        }\\n\\n        uint256 ourAllowance = USDTInterface.allowance(\\n            _msgSender(),\\n            address(this)\\n        );\\n        require(usdAmount <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\n        (bool success, ) = address(USDTInterface).call(\\n            abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                _msgSender(),\\n                fundReceiver,\\n                usdAmount\\n            )\\n        );\\n        require(success, \\\"Token payment failed\\\");\\n        \\n        // Update users mapping with purchase data\\n        users[_msgSender()].TotalBoughtTokens += tokens;\\n        users[_msgSender()].TotalPaid += usdAmount;\\n        users[_msgSender()].lastClaimTime = block.timestamp;\\n        \\n        // Process referral rewards if referrer is set\\n        if (referrer != address(0)) {\\n            processReferralRewards(_msgSender(), tokens);\\n        }\\n        \\n        // Handle tokens based on staking preference\\n        if (shouldStake) {\\n            // Directly stake tokens since the contract is pre-funded\\n            _handleTokenStaking(_msgSender(), tokens);\\n        } else {\\n            // Record for later claiming\\n            if (userClaimData[_msgSender()][presaleId].totalAmount > 0) {\\n                userClaimData[_msgSender()][presaleId].totalAmount += tokens;\\n            } else {\\n                userClaimData[_msgSender()][presaleId] = ISaleStructs.ClaimData(0, tokens, 0);\\n            }\\n        }\\n        \\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(USDTInterface),\\n            tokens,\\n            usdAmount,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using ETH with option for immediate staking\\n     * @param referrer Referrer address (optional, use address(0) for no referrer)\\n     * @param shouldStake If true, tokens are immediately staked for 1 year with 200% APY\\n     */\\n    function buyWithEth(\\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        payable\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, ethToTokens(presaleId, msg.value))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Contract not pre-funded with tokens\\\");\\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\\n        \\\"Amount should be less than leftHardcap\\\");\\n\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active == true, \\\"Presale is not active yet\\\");\\n        \\n        // Handle referral if provided and not zero address\\n        if (referrer != address(0)) {\\n            // Security check to prevent contract-based referrals\\n            require(!SaleUtils.isContract(referrer), \\\"Referrer cannot be a contract\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        if (isExcludeMinToken[msg.sender] == false) {\\n            require(tokens >= MinTokenTobuy, \\\"Insufficient amount!\\\");\\n        }\\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n        TotalUSDTRaised += usdAmount; // Update total USDT raised\\n\\n        // Update users mapping with purchase data\\n        users[_msgSender()].TotalBoughtTokens += tokens;\\n        users[_msgSender()].TotalPaid += usdAmount;\\n        users[_msgSender()].lastClaimTime = block.timestamp;\\n        \\n        // Process referral rewards if referrer is set\\n        if (referrer != address(0)) {\\n            processReferralRewards(_msgSender(), tokens);\\n        }\\n\\n        // Handle tokens based on staking preference\\n        if (shouldStake) {\\n            // Directly stake tokens since the contract is pre-funded\\n            _handleTokenStaking(_msgSender(), tokens);\\n        } else {\\n            // Record for later claiming\\n            if (userClaimData[_msgSender()][presaleId].totalAmount > 0) {\\n                userClaimData[_msgSender()][presaleId].totalAmount += tokens;\\n            } else {\\n                userClaimData[_msgSender()][presaleId] = ISaleStructs.ClaimData(\\n                    0, // Last claimed at\\n                    tokens, // total tokens to be claimed\\n                    0 // claimed amount\\n                );\\n            }\\n        }\\n\\n        SaleUtils.sendValue(payable(fundReceiver), msg.value);\\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(0),\\n            tokens,\\n            msg.value,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Claim function to handle only non-staked tokens\\n     * @param _id Presale id\\n     */\\n    function claimAmount(uint256 _id)\\n        public\\n        checkPresaleId(_id)\\n        returns (bool)\\n    {\\n        uint256 amount = claimableAmount(msg.sender, _id);\\n        \\n        require(amount > 0, \\\"Zero claim amount\\\");\\n        require(\\n            SaleToken != address(0),\\n            \\\"Presale token address not set\\\"\\n        );\\n        require(\\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n\\n        require((presale[_id].isEnableClaim == true), \\\"Claim is not enable\\\");\\n\\n        userClaimData[msg.sender][_id].claimAt = block.timestamp;\\n        userClaimData[msg.sender][_id].claimedAmount += amount;\\n        \\n        // Check if the user has set staking intent\\n        if (userStakingIntent[msg.sender]) {\\n            // Stake all tokens directly\\n            _handleTokenStaking(msg.sender, amount);\\n            \\n            // Reset staking intent after processing\\n            userStakingIntent[msg.sender] = false;\\n        } else {\\n            // Normal token transfer for non-staking users\\n            bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n            require(success, \\\"Token transfer failed\\\");\\n        }\\n        \\n        emit TokensClaimedWithTimestamp(msg.sender, _id, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev To claim tokens from multiple presales\\n     * @param _ids Array of presale IDs\\n     */\\n    function claimMultiple(uint256[] calldata _ids) external returns (bool) {\\n        require(_ids.length > 0, \\\"Zero ID length\\\");\\n        for (uint256 i; i < _ids.length; i++) {\\n            require(claimAmount(_ids[i]), \\\"Claim failed\\\");\\n        }\\n        return true;\\n    }\\n} \",\"keccak256\":\"0xa951fa1de960295ccea738d2a909b9be72e675b271c9be1c0b5f0fc6553793d5\",\"license\":\"MIT\"},\"contracts/SaleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/SaleUtils.sol\\\";\\nimport \\\"./interfaces/ISaleStructs.sol\\\";\\n\\ninterface Aggregator {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\n/**\\n * @title Sale Base Contract\\n * @notice Core presale functionality - slimmed down version\\n */\\ncontract SaleBase is ReentrancyGuard, Ownable, Pausable {\\n    // Constants\\n    uint256 public constant PERCENT_DENOMINATOR = 100;\\n    uint256 public constant TOKEN_DECIMALS = 10**18;\\n    uint256 internal constant TOKEN_PRICE_PRECISION = 10**18;\\n    \\n    // State variables\\n    address public oracle; // Chainlink oracle address\\n    address public usdt; // USDT token address\\n    address public SaleToken; // Sale token address\\n    uint256 public MinTokenTobuy; // Min tokens to buy\\n    uint256 public TotalAmountBought; // Total tokens bought\\n    uint256 public TotalUSDTRaised; // Total USDT raised\\n    uint256 public totalTokenSupply; // Total supply of tokens\\n\\n    // Presale data\\n    uint256 public presaleId;\\n    uint256 public USDT_MULTIPLIER;\\n    uint256 public ETH_MULTIPLIER;\\n    address public fundReceiver;\\n    \\n    // Total supply and allocations\\n    uint256 public presaleTokens;\\n    uint256 public maxReferralRewards;\\n    uint256 private _maxStakingRewards;\\n\\n    // Track if the contract has been pre-funded\\n    bool public isTokenPreFunded = false;\\n\\n    IERC20Metadata public USDTInterface;\\n    Aggregator internal aggregatorInterface;\\n\\n    // Main mappings for presale functionality\\n    mapping(uint256 => bool) public paused;\\n    mapping(uint256 => ISaleStructs.Presale) public presale;\\n    mapping(address => mapping(uint256 => ISaleStructs.ClaimData)) public userClaimData;\\n    mapping(address => bool) public isExcludeMinToken;\\n    mapping(address => bool) public isAdmin;\\n    mapping(address => ISaleStructs.User) public users;\\n\\n    // Events\\n    event PresaleStarted(\\n        uint256 presaleId, \\n        uint256 cap, \\n        uint256 price, \\n        uint256 startTime, \\n        uint256 endTime\\n    );\\n    \\n    event PresaleEnded(\\n        uint256 presaleId, \\n        uint256 endTime\\n    );\\n    \\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\n    event OracleUpdated(address previousOracle, address newOracle, uint256 timestamp);\\n    event TokensPreFunded(address indexed token, uint256 amount, uint256 timestamp);\\n    event PresaleCreated(\\n        uint256 indexed _id,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    );\\n    \\n    /**\\n     * @dev Constructor initializes the sale parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _SaleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) Ownable(msg.sender) {\\n        _initialize(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply);\\n    }\\n    \\n    /**\\n     * @dev Internal initialization function\\n     */\\n    function _initialize(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) internal {\\n        require(_oracle != address(0), \\\"Oracle address cannot be zero\\\");\\n        require(_usdt != address(0), \\\"USDT address cannot be zero\\\");\\n        require(_SaleToken != address(0), \\\"Sale token address cannot be zero\\\");\\n        require(_MinTokenTobuy > 0, \\\"Minimum token to buy must be greater than zero\\\");\\n        require(_totalTokenSupply > 0, \\\"Total supply must be greater than zero\\\");\\n        \\n        aggregatorInterface = Aggregator(_oracle);\\n        SaleToken = _SaleToken;\\n        MinTokenTobuy = _MinTokenTobuy;\\n        USDTInterface = IERC20Metadata(_usdt);\\n        ETH_MULTIPLIER = (10**18);\\n        USDT_MULTIPLIER = (10**6);\\n        fundReceiver = msg.sender;\\n        \\n        // Store total supply\\n        totalTokenSupply = _totalTokenSupply;\\n        \\n        // Calculate allocations - 30% for presale, 5% for referrals, 20% for staking\\n        presaleTokens = _totalTokenSupply * 30 / PERCENT_DENOMINATOR;\\n        maxReferralRewards = _totalTokenSupply * 5 / PERCENT_DENOMINATOR;\\n        _maxStakingRewards = _totalTokenSupply * 20 / PERCENT_DENOMINATOR;\\n    }\\n    \\n    /**\\n     * @dev Pre-fund the contract with tokens for presale, referrals, and staking\\n     */\\n    function preFundContract() external onlyOwner {\\n        require(!isTokenPreFunded, \\\"Contract already pre-funded\\\");\\n        require(SaleToken != address(0), \\\"Sale token not set\\\");\\n        \\n        // Calculate total tokens needed\\n        uint256 totalRequired = presaleTokens + maxReferralRewards + _maxStakingRewards;\\n        \\n        // Check contract balance\\n        uint256 contractBalance = IERC20(SaleToken).balanceOf(address(this));\\n        require(contractBalance >= totalRequired, \\\"Insufficient token balance\\\");\\n        \\n        // Set pre-funded flag\\n        isTokenPreFunded = true;\\n        \\n        emit TokensPreFunded(SaleToken, contractBalance, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Create a new presale\\n     */\\n    function createPresale(\\n        uint256 _price,\\n        uint256 _nextStagePrice, \\n        uint256 _tokensToSell, \\n        uint256 _UsdtHardcap\\n    ) external onlyOwner {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\n        require(presale[presaleId].Active == false, \\\"Previous Sale is Active\\\");\\n\\n        presaleId++;\\n\\n        presale[presaleId] = ISaleStructs.Presale(\\n            0,\\n            0,\\n            _price,\\n            _nextStagePrice,\\n            0,\\n            _tokensToSell,\\n            _UsdtHardcap,\\n            0,\\n            false,\\n            false\\n        );\\n\\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Start the presale\\n     */\\n    function startPresale() public onlyOwner {\\n        presale[presaleId].startTime = block.timestamp;\\n        presale[presaleId].Active = true;\\n    }\\n\\n    /**\\n     * @dev End the presale\\n     */\\n    function endPresale() public onlyOwner {\\n        require(\\n            presale[presaleId].Active == true,\\n            \\\"This presale is already Inactive\\\"\\n        );\\n        presale[presaleId].endTime = block.timestamp;\\n        presale[presaleId].Active = false;\\n    }\\n\\n    /**\\n     * @dev Enable claiming for a presale\\n     */\\n    function enableClaim(uint256 _id, bool _status)\\n        public\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        presale[_id].isEnableClaim = _status;\\n    }\\n\\n    /**\\n     * @dev Update presale parameters\\n     */\\n    function updatePresale(\\n        uint256 _id,\\n        uint256 _price,\\n        uint256 _nextStagePrice,\\n        uint256 _tokensToSell,\\n        uint256 _Hardcap\\n    ) external checkPresaleId(_id) onlyOwner {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\n        presale[_id].price = _price;\\n        presale[_id].nextStagePrice = _nextStagePrice;\\n        presale[_id].tokensToSell = _tokensToSell;\\n        presale[_id].UsdtHardcap = _Hardcap;\\n    }\\n\\n    /**\\n     * @dev Change fund receiving wallet\\n     */\\n    function changeFundWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"Invalid parameters\\\");\\n        fundReceiver = _wallet;\\n    }\\n\\n    /**\\n     * @dev Change USDT token address\\n     */\\n    function changeUSDTToken(address _newAddress) external onlyOwner {\\n        require(_newAddress != address(0), \\\"Zero token address\\\");\\n        USDTInterface = IERC20Metadata(_newAddress);\\n    }\\n\\n    /**\\n     * @dev Pause a presale\\n     */\\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\n        require(!paused[_id], \\\"Already paused\\\");\\n        paused[_id] = true;\\n        emit PresalePaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Unpause a presale\\n     */\\n    function unPausePresale(uint256 _id)\\n        external\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        require(paused[_id], \\\"Not paused\\\");\\n        paused[_id] = false;\\n        emit PresaleUnpaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the latest ETH price from Chainlink\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\n        price = (price * (10**10));\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for eth amount\\n     */\\n    function ethToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        returns (uint256 _tokens)\\n    {\\n        uint256 usdAmount = amount * getLatestPrice() * USDT_MULTIPLIER / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        _tokens = usdtToTokens(_id, usdAmount);\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for given usdt amount\\n     */\\n    function usdtToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 _tokens)\\n    {\\n        _tokens = (amount * 10**18) / presale[_id].price;\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get claimable tokens for a given presale\\n     */\\n    function claimableAmount(address user, uint256 _id)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256)\\n    {\\n        ISaleStructs.ClaimData memory _user = userClaimData[user][_id];\\n\\n        require(_user.totalAmount > 0, \\\"Nothing to claim\\\");\\n        uint256 amount = _user.totalAmount - _user.claimedAmount;\\n        require(amount > 0, \\\"Already claimed\\\");\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Exclude account from minimum buy requirement\\n     */\\n    function ExcludeAccouctFromMinBuy(address _user, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        isExcludeMinToken[_user] = _status;\\n    }\\n\\n    /**\\n     * @dev Modifier to check presale ID validity\\n     */\\n    modifier checkPresaleId(uint256 _id) {\\n        require(_id > 0 && _id <= presaleId, \\\"Invalid presale id\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check sale state\\n     */\\n    modifier checkSaleState(uint256 _id, uint256 amount) {\\n        require(\\n            block.timestamp >= presale[_id].startTime &&\\n                presale[_id].Active == true,\\n            \\\"Invalid time for buying\\\"\\n        );\\n        require(\\n            amount > 0 && amount <= presale[_id].tokensToSell-presale[_id].Sold,\\n            \\\"Invalid sale amount\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Public getter for max staking rewards\\n     */\\n    function maxStakingRewards() public view virtual returns (uint256) {\\n        return _maxStakingRewards;\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens from contract\\n     */\\n    function WithdrawTokens(address _token, uint256 amount) external virtual onlyOwner {\\n        // Calculate tokens needed for rewards (base implementation only checks referral)\\n        uint256 reservedTokens = 0; // To be overridden in inheriting contracts\\n        \\n        // Check we're not withdrawing reserved tokens\\n        uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n        require(\\n            contractBalance - amount >= reservedTokens,\\n            \\\"Cannot withdraw tokens reserved for rewards\\\"\\n        );\\n        \\n        bool success = IERC20(_token).transfer(fundReceiver, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from contract\\n     */\\n    function WithdrawContractFunds(uint256 amount) external onlyOwner {\\n        SaleUtils.sendValue(payable(fundReceiver), amount);\\n    }\\n} \",\"keccak256\":\"0x1a9ffb9d3d56444c46a851ebb89f5bc8d8ecf0c524b006ee1b7af0071aa59e70\",\"license\":\"MIT\"},\"contracts/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ReferralManager.sol\\\";\\n\\n/**\\n * @title Staking Manager Contract\\n * @notice This contract handles token staking functionality\\n */\\ncontract StakingManager is ReferralManager {\\n    // Keep some constants to maintain internal functionality\\n    uint256 internal constant TOKEN_DECIMALS_INT = 10**18;\\n    uint256 internal constant PERCENT_DENOMINATOR_INT = 100;\\n    \\n    // Staking system constants and variables\\n    uint256 public constant STAKING_LOCK_PERIOD = 365 days; // 365 days\\n    uint256 public constant STAKING_APY = 200; // 200% APY\\n    uint256 public totalStaked;\\n    uint256 public stakingCap; // Cap at 6,666,666,667 tokens\\n    bool public stakingActive;\\n    uint256 public totalStakingRewardsIssued;\\n    \\n    // Staking system mappings\\n    mapping(address => ISaleStructs.StakeInfo) public userStakes;\\n    \\n    // Mapping to track users who want to stake ALL their tokens upon claim\\n    mapping(address => bool) public userStakingIntent;\\n\\n    // New Staking Events\\n    event TokensStaked(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 stakingTime, \\n        uint256 unlockTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed user, \\n        uint256 stakedAmount, \\n        uint256 rewardAmount, \\n        uint256 timestamp\\n    );\\n\\n    event StakingStatusChanged(\\n        bool isActive,\\n        uint256 timestamp\\n    );\\n    \\n    event StakingCapUpdated(\\n        uint256 previousCap,\\n        uint256 newCap,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @dev Constructor initializes staking parameters\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _saleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n        ReferralManager(_oracle, _usdt, _saleToken, _MinTokenTobuy, _totalTokenSupply) \\n    {\\n        // Initialize staking parameters\\n        stakingCap = 6666666667 * TOKEN_DECIMALS_INT; // 6,666,666,667 tokens\\n        stakingActive = true; // Staking is active by default\\n    }\\n    \\n    /**\\n     * @dev Override withdraw to account for staking rewards\\n     */\\n    function WithdrawTokens(address _token, uint256 amount) external override onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for rewards and stakes\\n            uint256 reservedTokens = totalReferralRewardsIssued +\\n                // Staked tokens plus their potential rewards\\n                totalStaked * (STAKING_APY + 100) / PERCENT_DENOMINATOR_INT;\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(\\n                contractBalance - amount >= reservedTokens,\\n                \\\"Cannot withdraw tokens reserved for rewards\\\"\\n            );\\n        }\\n        \\n        bool success = IERC20(_token).transfer(fundReceiver, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n    }\\n    \\n    /**\\n     * @dev Toggle staking status (active/inactive)\\n     */\\n    function setStakingStatus(bool _status) external onlyOwner {\\n        stakingActive = _status;\\n        emit StakingStatusChanged(_status, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Helper function that handles token staking directly during purchase\\n     */\\n    function _handleTokenStaking(address _user, uint256 _amount) internal {\\n        // Ensure staking is active\\n        require(stakingActive, \\\"Staking is not active\\\");\\n        require(_amount > 0, \\\"Cannot stake zero amount\\\");\\n        require(\\n            totalStaked + _amount <= stakingCap,\\n            \\\"Staking cap would be exceeded\\\"\\n        );\\n        \\n        // Calculate potential rewards to verify we stay within the rewards limit\\n        uint256 potentialReward = _amount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        require(\\n            totalStakingRewardsIssued + potentialReward <= maxStakingRewards(),\\n            \\\"Not enough tokens in the staking reward pool\\\"\\n        );\\n        \\n        // Update global state for staking\\n        totalStaked = totalStaked + _amount;\\n        totalStakingRewardsIssued = totalStakingRewardsIssued + potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        ISaleStructs.StakeInfo storage userStake = userStakes[_user];\\n        \\n        // If user already has a stake, handle appropriately\\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            // If existing stake is still locked, cannot add to it\\n            if (block.timestamp < userStake.unlockTimestamp) {\\n                revert(\\\"Cannot stake when you have a locked stake\\\");\\n            } else {\\n                // Existing stake is unlocked, withdraw it first\\n                uint256 stakedAmount = userStake.stakedAmount;\\n                uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n                \\n                // Mark as withdrawn to prevent double-dipping\\n                userStake.hasWithdrawn = true;\\n                \\n                // Transfer rewards and original stake back\\n                bool transferSuccess = IERC20(SaleToken).transfer(_user, stakedAmount + reward);\\n                require(transferSuccess, \\\"Stake withdrawal failed\\\");\\n                \\n                emit StakeWithdrawn(_user, stakedAmount, reward, block.timestamp);\\n            }\\n        }\\n        \\n        // Create a new stake\\n        userStake.stakedAmount = _amount;\\n        userStake.stakingTimestamp = block.timestamp;\\n        userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n        userStake.hasWithdrawn = false;\\n        \\n        emit TokensStaked(_user, _amount, block.timestamp, userStake.unlockTimestamp);\\n    }\\n\\n    /**\\n     * @dev Stake tokens with 1-year lock and 200% APY\\n     */\\n    function stakeTokens(uint256 _amount) external nonReentrant {\\n        require(stakingActive, \\\"Staking is not active\\\");\\n        require(_amount > 0, \\\"Cannot stake zero amount\\\");\\n        require(\\n            totalStaked + _amount <= stakingCap,\\n            \\\"Staking cap would be exceeded\\\"\\n        );\\n        \\n        // Calculate potential rewards to verify we stay within the rewards limit\\n        uint256 potentialReward = _amount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        require(\\n            totalStakingRewardsIssued + potentialReward <= maxStakingRewards(),\\n            \\\"Not enough tokens in the staking reward pool\\\"\\n        );\\n        \\n        // Update global state\\n        totalStaked = totalStaked + _amount;\\n        totalStakingRewardsIssued = totalStakingRewardsIssued + potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        ISaleStructs.StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        // If user already has a stake, we need special handling\\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            require(\\n                block.timestamp >= userStake.unlockTimestamp,\\n                \\\"Cannot add to existing stake while locked\\\"\\n            );\\n            \\n            // Withdraw previous stake first (internally)\\n            uint256 stakedAmount = userStake.stakedAmount;\\n            uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n            \\n            // Mark as withdrawn to prevent double-dipping\\n            userStake.hasWithdrawn = true;\\n            \\n            // Transfer rewards and original stake back\\n            bool transferSuccess = IERC20(SaleToken).transfer(msg.sender, stakedAmount + reward);\\n            require(transferSuccess, \\\"Token transfer failed\\\");\\n            \\n            // Create a new stake\\n            userStake.stakedAmount = _amount;\\n            userStake.stakingTimestamp = block.timestamp;\\n            userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n            userStake.hasWithdrawn = false;\\n        } else {\\n            // First time stake or previous stake was withdrawn\\n            userStake.stakedAmount = _amount;\\n            userStake.stakingTimestamp = block.timestamp;\\n            userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n            userStake.hasWithdrawn = false;\\n        }\\n        \\n        // Transfer tokens from user to contract (SafeERC20 pattern)\\n        uint256 balanceBefore = IERC20(SaleToken).balanceOf(address(this));\\n        bool transferFromSuccess = IERC20(SaleToken).transferFrom(msg.sender, address(this), _amount);\\n        require(transferFromSuccess, \\\"Token transfer failed\\\");\\n        \\n        // Verify tokens were actually received (protection against fee-on-transfer tokens)\\n        uint256 balanceAfter = IERC20(SaleToken).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore + _amount, \\\"Incorrect amount of tokens received\\\");\\n        \\n        emit TokensStaked(msg.sender, _amount, block.timestamp, userStake.unlockTimestamp);\\n    }\\n    \\n    /**\\n     * @dev Withdraw staked tokens and rewards after lock period\\n     */\\n    function withdrawStake() external nonReentrant {\\n        ISaleStructs.StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        require(userStake.stakedAmount > 0, \\\"No stake found\\\");\\n        require(!userStake.hasWithdrawn, \\\"Already withdrawn\\\");\\n        require(\\n            block.timestamp >= userStake.unlockTimestamp,\\n            \\\"Stake is still locked\\\"\\n        );\\n        \\n        uint256 stakedAmount = userStake.stakedAmount;\\n        uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        uint256 totalAmount = stakedAmount + reward;\\n        \\n        // Mark as withdrawn to prevent double-dipping\\n        userStake.hasWithdrawn = true;\\n        \\n        // Update global state\\n        totalStaked = totalStaked - stakedAmount;\\n        \\n        // Verify there are enough tokens in the contract\\n        require(\\n            totalAmount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n        \\n        // Transfer rewards and original stake\\n        bool withdrawSuccess = IERC20(SaleToken).transfer(msg.sender, totalAmount);\\n        require(withdrawSuccess, \\\"Token transfer failed\\\");\\n        \\n        emit StakeWithdrawn(msg.sender, stakedAmount, reward, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Get user staking information\\n     */\\n    function getUserStakingInfo(address _user) external view returns (\\n        uint256 stakedAmount,\\n        uint256 stakingTime,\\n        uint256 unlockTime,\\n        bool isLocked,\\n        bool hasWithdrawn,\\n        uint256 potentialReward,\\n        uint256 totalClaimable\\n    ) {\\n        ISaleStructs.StakeInfo storage stake = userStakes[_user];\\n        bool locked = block.timestamp < stake.unlockTimestamp;\\n        uint256 reward = stake.stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        \\n        return (\\n            stake.stakedAmount,\\n            stake.stakingTimestamp,\\n            stake.unlockTimestamp,\\n            locked,\\n            stake.hasWithdrawn,\\n            reward,\\n            stake.hasWithdrawn ? 0 : stake.stakedAmount + reward\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get staking program statistics\\n     */\\n    function getStakingStats() external view returns (\\n        uint256 _totalStaked,\\n        uint256 _stakingCap,\\n        uint256 _stakingAPY,\\n        bool _isActive,\\n        uint256 _maxRewards,\\n        uint256 _totalRewardsCommitted,\\n        uint256 _remainingRewards\\n    ) {\\n        return (\\n            totalStaked,\\n            stakingCap,\\n            STAKING_APY,\\n            stakingActive,\\n            maxStakingRewards(),\\n            totalStakingRewardsIssued,\\n            maxStakingRewards() - totalStakingRewardsIssued\\n        );\\n    }\\n\\n    /**\\n     * @dev Quick check if staking is available and capacity info\\n     */\\n    function getStakingAvailability() external view returns (\\n        bool _canStake,\\n        uint256 _remainingCapacity,\\n        uint256 _percentFilled\\n    ) {\\n        bool canStake = stakingActive && totalStaked < stakingCap;\\n        uint256 remainingCapacity = stakingCap > totalStaked ? stakingCap - totalStaked : 0;\\n        uint256 percentFilled = totalStaked * 100 / stakingCap;\\n        \\n        return (canStake, remainingCapacity, percentFilled);\\n    }\\n    \\n    /**\\n     * @dev Update staking cap\\n     */\\n    function updateStakingCap(uint256 _newCap) external onlyOwner {\\n        require(_newCap >= totalStaked, \\\"New cap must be >= total staked\\\");\\n        \\n        uint256 oldCap = stakingCap;\\n        stakingCap = _newCap;\\n        \\n        emit StakingCapUpdated(oldCap, _newCap, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Set staking intent for a user\\n     * @param _intent Whether to stake tokens upon claim\\n     */\\n    function setStakingIntent(bool _intent) external {\\n        userStakingIntent[msg.sender] = _intent;\\n    }\\n} \",\"keccak256\":\"0xf225d5c517366fef154fc6b3f7de94815f491500b5c7aec0b0b93f796a5a2d0b\",\"license\":\"MIT\"},\"contracts/interfaces/ISaleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Sale Interfaces and Common Structures\\n * @notice Shared structures for Sale contracts\\n */\\ninterface ISaleStructs {\\n    // Constants\\n    function PERCENT_DENOMINATOR() external view returns (uint256);\\n    function TOKEN_DECIMALS() external view returns (uint256);\\n    \\n    // Data Structures\\n    struct PresaleInfo {\\n        uint256 cap;\\n        uint256 price;\\n        uint256 sold;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ClaimAble;\\n        bool isClosed;\\n    }\\n    \\n    struct User {\\n        uint256 TotalBoughtTokens;\\n        uint256 TotalPaid;\\n        uint256 TotalCollectedReferral;\\n        uint256 lastClaimTime;\\n        address[] referredUsers;\\n        address referrer;\\n    }\\n    \\n    struct Presale {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 price;\\n        uint256 nextStagePrice;\\n        uint256 Sold;\\n        uint256 tokensToSell;\\n        uint256 UsdtHardcap;\\n        uint256 amountRaised;\\n        bool Active;\\n        bool isEnableClaim;\\n    }\\n\\n    struct ClaimData {\\n        uint256 claimAt;\\n        uint256 totalAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    struct ReferralData {\\n        address referrer;\\n        uint256 totalReferralRewards;\\n        uint256 claimedReferralRewards;\\n        bool hasReferred;\\n        uint256 referralCount;\\n    }\\n    \\n    struct StakeInfo {\\n        uint256 stakedAmount;\\n        uint256 stakingTimestamp;\\n        uint256 unlockTimestamp;\\n        bool hasWithdrawn;\\n    }\\n    \\n    // Events (common)\\n    event PresaleCreated(\\n        uint256 indexed _id,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    );\\n    \\n    event TokensBought(\\n        address indexed user,\\n        uint256 indexed id,\\n        address indexed purchaseToken,\\n        uint256 tokensBought,\\n        uint256 amountPaid,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensClaimedWithTimestamp(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    \\n    event TokensPreFunded(\\n        address indexed token, \\n        uint256 amount, \\n        uint256 timestamp\\n    );\\n} \",\"keccak256\":\"0xcb5f4e197b894fc437055bc1a668e5e5a0ca4b8f5c95dfd2981c01303c335059\",\"license\":\"MIT\"},\"contracts/libraries/SaleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Sale Utilities Library\\n * @notice Utility functions used across the presale system\\n */\\nlibrary SaleUtils {\\n    /**\\n     * @dev Helper to check if an address is a contract\\n     * @param _addr Address to check\\n     * @return True if the address is a contract\\n     */\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /**\\n     * @dev Helper function to send ETH safely\\n     * @param recipient Address to send ETH to\\n     * @param amount Amount of ETH to send\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH Payment failed\\\");\\n    }\\n} \",\"keccak256\":\"0x590d61f2705834edd7d3d494b79497a61a509f12f4fb37b5b49aea51ec04aedc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526010805460ff1916905560146018553480156200002057600080fd5b50604051620062f1380380620062f1833981016040819052620000439162000405565b600160005584848484848484848484848484848433806200007f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200008a81620000e6565b506200009a858585858562000138565b505042601a5550620000c59650670de0b6b3a7640000955064018d5d42ab9450620004629350505050565b601f5550506020805460ff1916600117905550620004b19650505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038516620001905760405162461bcd60e51b815260206004820152601d60248201527f4f7261636c6520616464726573732063616e6e6f74206265207a65726f000000604482015260640162000076565b6001600160a01b038416620001e85760405162461bcd60e51b815260206004820152601b60248201527f5553445420616464726573732063616e6e6f74206265207a65726f0000000000604482015260640162000076565b6001600160a01b0383166200024a5760405162461bcd60e51b815260206004820152602160248201527f53616c6520746f6b656e20616464726573732063616e6e6f74206265207a65726044820152606f60f81b606482015260840162000076565b60008211620002b35760405162461bcd60e51b815260206004820152602e60248201527f4d696e696d756d20746f6b656e20746f20627579206d7573742062652067726560448201526d61746572207468616e207a65726f60901b606482015260840162000076565b60008111620003145760405162461bcd60e51b815260206004820152602660248201527f546f74616c20737570706c79206d7573742062652067726561746572207468616044820152656e207a65726f60d01b606482015260840162000076565b601180546001600160a01b038088166001600160a01b0319928316179092556004805486841690831617905560058490556010805492871661010002610100600160a81b031990931692909217909155670de0b6b3a7640000600b55620f4240600a55600c805490911633179055600881905560646200039682601e62000462565b620003a291906200048e565b600d556064620003b482600562000462565b620003c091906200048e565b600e556064620003d282601462000462565b620003de91906200048e565b600f555050505050565b80516001600160a01b03811681146200040057600080fd5b919050565b600080600080600060a086880312156200041e57600080fd5b6200042986620003e8565b94506200043960208701620003e8565b93506200044960408701620003e8565b6060870151608090970151959894975095949392505050565b80820281158282048414176200048857634e487b7160e01b600052601160045260246000fd5b92915050565b600082620004ac57634e487b7160e01b600052601260045260246000fd5b500490565b615e3080620004c16000396000f3fe6080604052600436106105a95760003560e01c80637547c7a3116102eb578063a87430ba1161018f578063d099850a116100e1578063e18e84f911610095578063f309fed91161006f578063f309fed91461124c578063f597573f1461126c578063fb4aa0a11461129157600080fd5b8063e18e84f914611156578063e6ab14341461116c578063f2fde38b1461122c57600080fd5b8063d3552712116100c6578063d3552712146110af578063d6fd1c5214611108578063d8ae8c8b1461111d57600080fd5b8063d099850a14611077578063d2f01a9b1461109757600080fd5b8063bed9d86111610143578063c9c6b5561161011d578063c9c6b55614610f9a578063cc9fe9d314611025578063d01608c11461105757600080fd5b8063bed9d86114610efe578063c1dd608414610f13578063c8b8232114610f5d57600080fd5b8063b04c734611610174578063b04c734614610e66578063b2932c8d14610ec8578063b8bec6a014610ede57600080fd5b8063a87430ba14610dcc578063a9c85ced14610e5057600080fd5b80638da5cb5b116102485780639752f3cb116101fc578063a33a16d8116101d6578063a33a16d814610d88578063a43be57b14610d9d578063a6ac4b3514610db257600080fd5b80639752f3cb14610d485780639e6c29591461070c578063a0f9c0aa14610d6857600080fd5b80638e15f4731161022d5780638e15f47314610cfd5780639051cce914610d12578063920a253e14610d3257600080fd5b80638da5cb5b14610c785780638da7ad2314610c9657600080fd5b8063809336081161029f578063833cde5211610284578063833cde5214610c225780638561c31514610c425780638d79e66d14610c6257600080fd5b80638093360814610bb5578063817b1cd214610c0c57600080fd5b806379b8d938116102d057806379b8d93814610b5e5780637c00675d14610b7e5780637dc0d1d014610b9557600080fd5b80637547c7a314610b29578063796b155314610b4957600080fd5b806348bf4fcf116104525780635c975abb116103af5780636b5526a3116103635780636fb4adff1161033d5780636fb4adff14610ad4578063715018a614610af4578063718a196214610b0957600080fd5b80636b5526a314610a6f5780636ca9524614610a845780636e22e8bd14610ab457600080fd5b8063670988a811610394578063670988a814610a20578063680f2e4f14610a3a5780636913b16214610a5a57600080fd5b80635c975abb146109c35780636667864d146109f357600080fd5b8063552a2d14116104065780635632bce6116103eb5780635632bce614610957578063582b5723146109875780635b7f415c146109a757600080fd5b8063552a2d1414610921578063553ff7f51461093757600080fd5b806349c7e7d21161043757806349c7e7d2146108a65780634a6413f7146108c65780635503cd61146108e657600080fd5b806348bf4fcf1461087057806348ff1a391461088657600080fd5b80631ca8b6cb1161050b5780632bfcaac2116104bf5780633d7a63ca116104995780633d7a63ca1461083157806344c370d3146108475780634517c8a31461085d57600080fd5b80632bfcaac2146107cd5780632f48ab7d146107e3578063397643631461081b57600080fd5b806323b221a0116104f057806323b221a01461076757806324d7806c146107875780632bef560f146107b757600080fd5b80631ca8b6cb146107215780631ed0c9541461073757600080fd5b80630a09815c116105625780630fcc4f57116105475780630fcc4f57146106b3578063112f62dc146106d35780631577763a1461070c57600080fd5b80630a09815c1461066f5780630fbfcf371461069357600080fd5b806304c98b2b1161059357806304c98b2b1461061557806305eaab4b1461062a57806309b5a33a1461063f57600080fd5b8062dde10e146105ae57806303fcd9ac146105f3575b600080fd5b3480156105ba57600080fd5b506105de6105c93660046158dd565b60126020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156105ff57600080fd5b5061061361060e366004615920565b6112b1565b005b34801561062157600080fd5b506106136112e4565b34801561063657600080fd5b506105de611317565b34801561064b57600080fd5b506105de61065a366004615957565b601d6020526000908152604090205460ff1681565b34801561067b57600080fd5b50610685600d5481565b6040519081526020016105ea565b34801561069f57600080fd5b506106136106ae366004615972565b6115dd565b3480156106bf57600080fd5b506106136106ce3660046158dd565b61168c565b3480156106df57600080fd5b506106f36106ee366004615997565b611736565b60408051921515835260ff9091166020830152016105ea565b34801561071857600080fd5b50610685606481565b34801561072d57600080fd5b5061068560085481565b34801561074357600080fd5b506105de610752366004615957565b60156020526000908152604090205460ff1681565b34801561077357600080fd5b506105de6107823660046158dd565b611869565b34801561079357600080fd5b506105de6107a2366004615957565b60166020526000908152604090205460ff1681565b3480156107c357600080fd5b50610685600e5481565b3480156107d957600080fd5b5061068560195481565b3480156107ef57600080fd5b50600354610803906001600160a01b031681565b6040516001600160a01b0390911681526020016105ea565b34801561082757600080fd5b50610685600b5481565b34801561083d57600080fd5b5061068560065481565b34801561085357600080fd5b50610685601f5481565b6105de61086b366004615920565b611c85565b34801561087c57600080fd5b50610685600a5481565b34801561089257600080fd5b506105de6108a13660046159ca565b61233b565b3480156108b257600080fd5b506106136108c13660046158dd565b612c1d565b3480156108d257600080fd5b506106136108e13660046158dd565b612d2c565b3480156108f257600080fd5b50610613610901366004615a0a565b336000908152602360205260409020805460ff1916911515919091179055565b34801561092d57600080fd5b50610685601a5481565b34801561094357600080fd5b50610685610952366004615957565b612e4b565b34801561096357600080fd5b506105de610972366004615957565b601c6020526000908152604090205460ff1681565b34801561099357600080fd5b506106136109a23660046158dd565b612eb7565b3480156109b357600080fd5b50610685670de0b6b3a764000081565b3480156109cf57600080fd5b5060015474010000000000000000000000000000000000000000900460ff166105de565b3480156109ff57600080fd5b50610a13610a0e366004615957565b612ed8565b6040516105ea9190615a27565b348015610a2c57600080fd5b506010546105de9060ff1681565b348015610a4657600080fd5b50610613610a55366004615a74565b61301f565b348015610a6657600080fd5b50610613613261565b348015610a7b57600080fd5b50600f54610685565b348015610a9057600080fd5b506105de610a9f366004615957565b60236020526000908152604090205460ff1681565b348015610ac057600080fd5b50610613610acf366004615957565b613462565b348015610ae057600080fd5b50610613610aef366004615957565b6138ac565b348015610b0057600080fd5b50610613613944565b348015610b1557600080fd5b50610685610b24366004615a9e565b613958565b348015610b3557600080fd5b50610613610b443660046158dd565b6139a8565b348015610b5557600080fd5b50610685601481565b348015610b6a57600080fd5b50610685610b79366004615a74565b6140c6565b348015610b8a57600080fd5b506106856201518081565b348015610ba157600080fd5b50600254610803906001600160a01b031681565b348015610bc157600080fd5b50610bd5610bd0366004615957565b61422c565b6040805197885260208801969096529486019390935290151560608501521515608084015260a083015260c082015260e0016105ea565b348015610c1857600080fd5b50610685601e5481565b348015610c2e57600080fd5b50600454610803906001600160a01b031681565b348015610c4e57600080fd5b50610613610c5d366004615957565b6142cd565b348015610c6e57600080fd5b5061068560055481565b348015610c8457600080fd5b506001546001600160a01b0316610803565b348015610ca257600080fd5b50610cdb610cb1366004615957565b60226020526000908152604090208054600182015460028301546003909301549192909160ff1684565b60408051948552602085019390935291830152151560608201526080016105ea565b348015610d0957600080fd5b5061068561436a565b348015610d1e57600080fd5b506105de610d2d366004615ac0565b614401565b348015610d3e57600080fd5b5061068560185481565b348015610d5457600080fd5b50610613610d63366004615b35565b6144e4565b348015610d7457600080fd5b50610613610d83366004615a74565b614616565b348015610d9457600080fd5b506106856147bb565b348015610da957600080fd5b506106136147d2565b348015610dbe57600080fd5b506020546105de9060ff1681565b348015610dd857600080fd5b50610e1f610de7366004615957565b60176020526000908152604090208054600182015460028301546003840154600590940154929391929091906001600160a01b031685565b6040805195865260208601949094529284019190915260608301526001600160a01b0316608082015260a0016105ea565b348015610e5c57600080fd5b5061068560215481565b348015610e7257600080fd5b50610ead610e81366004615a74565b601460209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016105ea565b348015610ed457600080fd5b5061068560075481565b348015610eea57600080fd5b50610613610ef9366004615a0a565b61486f565b348015610f0a57600080fd5b506106136148c4565b348015610f1f57600080fd5b50610f28614c4d565b604080519788526020880196909652948601939093529015156060850152608084015260a083015260c082015260e0016105ea565b348015610f6957600080fd5b50610f72614ca6565b604080519586526020860194909452928401919091526060830152608082015260a0016105ea565b348015610fa657600080fd5b50610ff1610fb5366004615957565b601b60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03909316939192909160ff169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a0016105ea565b34801561103157600080fd5b5061103a614cdb565b6040805193151584526020840192909252908201526060016105ea565b34801561106357600080fd5b506106136110723660046158dd565b614d4c565b34801561108357600080fd5b50610613611092366004615b70565b614e5b565b3480156110a357600080fd5b506106856301e1338081565b3480156110bb57600080fd5b506110cf6110ca366004615957565b6150b8565b604080516001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015260c0016105ea565b34801561111457600080fd5b5061068560c881565b34801561112957600080fd5b506105de611138366004615957565b6001600160a01b03166000908152601c602052604090205460ff1690565b34801561116257600080fd5b5061068560095481565b34801561117857600080fd5b506111de6111873660046158dd565b60136020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496979596949593949293919290919060ff808216916101009004168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015215156101008301521515610120820152610140016105ea565b34801561123857600080fd5b50610613611247366004615957565b615167565b34801561125857600080fd5b50610685611267366004615a9e565b6151bb565b34801561127857600080fd5b506010546108039061010090046001600160a01b031681565b34801561129d57600080fd5b50600c54610803906001600160a01b031681565b6112b961524a565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b6112ec61524a565b600980546000908152601360205260408082204290559154815220600801805460ff19166001179055565b6000611321615290565b600061132c33612e4b565b9050600081116113835760405162461bcd60e51b815260206004820152601360248201527f4e6f207265776172647320746f20636c61696d0000000000000000000000000060448201526064015b60405180910390fd5b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190615ba2565b81111561147e5760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e7472616360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161137a565b336000908152601b602052604090206002015461149c908290615bea565b336000818152601b6020526040808220600201939093556004805493517fa9059cbb0000000000000000000000000000000000000000000000000000000081529081019290925260248201849052916001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190615bfd565b9050806115905760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b6040805183815242602082015233917fea940d727b98f74071145844b731b12fccfc03b1e58a738235234c176a43e299910160405180910390a26001925050506115da6001600055565b90565b816000811180156115f057506009548111155b61163c5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b61164461524a565b506000918252601360205260409091206008018054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b61169461524a565b601e548110156116e65760405162461bcd60e51b815260206004820152601f60248201527f4e657720636170206d757374206265203e3d20746f74616c207374616b656400604482015260640161137a565b601f805490829055604080518281526020810184905242918101919091527f69184c671db9747cef69bb2ee0e6ce0dfeec4b4562bf75185241b8927ab000f3906060015b60405180910390a15050565b6001600160a01b0381166000908152601d6020526040812054819060ff16156117655750600090506001611862565b826001600160a01b0316846001600160a01b03160361178a5750600090506002611862565b6001600160a01b0384166000908152601c602052604090205460ff166117b65750600090506003611862565b6001600160a01b038481166000908152601b60205260409020548185169116036117e65750600090506002611862565b6001600160a01b038085166000908152601b6020526040902054165b6001600160a01b0381161561185857836001600160a01b0316816001600160a01b03160361183857600060029250925050611862565b6001600160a01b039081166000908152601b602052604090205416611802565b6001600092509250505b9250929050565b60008160008111801561187e57506009548111155b6118ca5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b60006118d633856140c6565b9050600081116119285760405162461bcd60e51b815260206004820152601160248201527f5a65726f20636c61696d20616d6f756e74000000000000000000000000000000604482015260640161137a565b6004546001600160a01b03166119805760405162461bcd60e51b815260206004820152601d60248201527f50726573616c6520746f6b656e2061646472657373206e6f7420736574000000604482015260640161137a565b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa1580156119e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a069190615ba2565b811115611a7b5760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e7472616360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161137a565b60008481526013602052604090206008015460ff610100909104161515600114611ae75760405162461bcd60e51b815260206004820152601360248201527f436c61696d206973206e6f7420656e61626c6500000000000000000000000000604482015260640161137a565b33600090815260146020908152604080832087845290915281204281556002018054839290611b17908490615bea565b90915550503360009081526023602052604090205460ff1615611b5a57611b3e33826152d3565b336000908152602360205260409020805460ff19169055611c3f565b600480546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523392810192909252602482018390526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190615bfd565b905080611c3d5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b505b60408051828152426020820152859133917fc259a362e59c3fd12f739a3baa0fe06c78d12af06ec0eec656fca929a2b2ee84910160405180910390a35060019392505050565b6000600954600081118015611c9c57506009548111155b611ce85760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b600954611cf58134613958565b6000828152601360205260409020544210801590611d29575060008281526013602052604090206008015460ff1615156001145b611d755760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642074696d6520666f7220627579696e67000000000000000000604482015260640161137a565b600081118015611da7575060008281526013602052604090206004810154600590910154611da39190615c1a565b8111155b611df35760405162461bcd60e51b815260206004820152601360248201527f496e76616c69642073616c6520616d6f756e7400000000000000000000000000604482015260640161137a565b611dfb615290565b60105460ff16611e735760405162461bcd60e51b815260206004820152602360248201527f436f6e7472616374206e6f74207072652d66756e646564207769746820746f6b60448201527f656e730000000000000000000000000000000000000000000000000000000000606482015260840161137a565b600b54600090611e839080615c2d565b600a54611e8e61436a565b611e989034615c2d565b611ea29190615c2d565b611eac9190615c44565b6009546000908152601360205260409020600681015460079091015491925090611ed7908390615bea565b1115611f4b5760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206265206c657373207468616e206c6566744860448201527f6172646361700000000000000000000000000000000000000000000000000000606482015260840161137a565b60095460009081526012602052604090205460ff1615611fad5760405162461bcd60e51b815260206004820152600e60248201527f50726573616c6520706175736564000000000000000000000000000000000000604482015260640161137a565b60095460009081526013602052604090206008015460ff1615156001146120165760405162461bcd60e51b815260206004820152601960248201527f50726573616c65206973206e6f74206163746976652079657400000000000000604482015260640161137a565b6001600160a01b0387161561208357863b63ffffffff161561207a5760405162461bcd60e51b815260206004820152601d60248201527f52656665727265722063616e6e6f74206265206120636f6e7472616374000000604482015260640161137a565b61208387613462565b6000612091600954836151bb565b3360009081526015602052604081205491925060ff90911615159003612103576005548110156121035760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e7420616d6f756e7421000000000000000000000000604482015260640161137a565b60095460009081526013602052604081206004018054839290612127908490615bea565b909155505060095460009081526013602052604081206007018054849290612150908490615bea565b9250508190555081600760008282546121699190615bea565b9091555050336000908152601760205260408120805483929061218d908490615bea565b909155505033600090815260176020526040812060010180548492906121b4908490615bea565b9091555050336000908152601760205260409020426003909101556001600160a01b038816156121e8576121e83382614616565b86156121fd576121f833826152d3565b6122c5565b33600090815260146020908152604080832060095484529091529020600101541561225c57336000908152601460209081526040808320600954845290915281206001018054839290612251908490615bea565b909155506122c59050565b6040518060600160405280600081526020018281526020016000815250601460006122843390565b6001600160a01b0316815260208082019290925260409081016000908120600954825283528190208351815591830151600183015591909101516002909101555b600c546122db906001600160a01b031634615780565b60095460408051838152346020820152428183015290516000929133917f4d8aead3491b7eba4b5c7a65fc17e493b9e63f9e433522fc5f6a85a168fc9d369181900360600190a46001955050506123326001600055565b50505092915050565b600060095460008111801561235257506009548111155b61239e5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b6009546123ab81876151bb565b60008281526013602052604090205442108015906123df575060008281526013602052604090206008015460ff1615156001145b61242b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642074696d6520666f7220627579696e67000000000000000000604482015260640161137a565b60008111801561245d5750600082815260136020526040902060048101546005909101546124599190615c1a565b8111155b6124a95760405162461bcd60e51b815260206004820152601360248201527f496e76616c69642073616c6520616d6f756e7400000000000000000000000000604482015260640161137a565b6124b1615290565b60105460ff166125295760405162461bcd60e51b815260206004820152602360248201527f436f6e7472616374206e6f74207072652d66756e646564207769746820746f6b60448201527f656e730000000000000000000000000000000000000000000000000000000000606482015260840161137a565b60095460009081526012602052604090205460ff161561258b5760405162461bcd60e51b815260206004820152600e60248201527f50726573616c6520706175736564000000000000000000000000000000000000604482015260640161137a565b60095460009081526013602052604090206008015460ff1615156001146125f45760405162461bcd60e51b815260206004820152601960248201527f50726573616c65206973206e6f74206163746976652079657400000000000000604482015260640161137a565b6009546000908152601360205260409020600681015460079091015461261b908990615bea565b111561268f5760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206265206c657373207468616e206c6566744860448201527f6172646361700000000000000000000000000000000000000000000000000000606482015260840161137a565b6001600160a01b038616156126fc57853b63ffffffff16156126f35760405162461bcd60e51b815260206004820152601d60248201527f52656665727265722063616e6e6f74206265206120636f6e7472616374000000604482015260640161137a565b6126fc86613462565b600061270a600954896151bb565b90508060136000600954815260200190815260200160002060040160008282546127349190615bea565b9091555050600954600090815260136020526040812060070180548a929061275d908490615bea565b9250508190555087600760008282546127769190615bea565b90915550503360009081526015602052604081205460ff16151590036127e8576005548110156127e85760405162461bcd60e51b815260206004820152601460248201527f4c657373207468616e206d696e20616d6f756e74000000000000000000000000604482015260640161137a565b60105460009061010090046001600160a01b031663dd62ed3e336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128889190615ba2565b9050808911156129005760405162461bcd60e51b815260206004820152602160248201527f4d616b65207375726520746f2061646420656e6f75676820616c6c6f77616e6360448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161137a565b60105460009061010090046001600160a01b031633600c546040516001600160a01b03928316602482015291166044820152606481018c9052608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052516129bd9190615c7f565b6000604051808303816000865af19150503d80600081146129fa576040519150601f19603f3d011682016040523d82523d6000602084013e6129ff565b606091505b5050905080612a505760405162461bcd60e51b815260206004820152601460248201527f546f6b656e207061796d656e74206661696c6564000000000000000000000000604482015260640161137a565b3360009081526017602052604081208054859290612a6f908490615bea565b909155505033600090815260176020526040812060010180548c9290612a96908490615bea565b9091555050336000908152601760205260409020426003909101556001600160a01b03891615612aca57612aca3384614616565b8715612adf57612ada33846152d3565b612ba7565b336000908152601460209081526040808320600954845290915290206001015415612b3e57336000908152601460209081526040808320600954845290915281206001018054859290612b33908490615bea565b90915550612ba79050565b604051806060016040528060008152602001848152602001600081525060146000612b663390565b6001600160a01b0316815260208082019290925260409081016000908120600954825283528190208351815591830151600183015591909101516002909101555b60105460095460408051868152602081018e905242918101919091526101009092046001600160a01b03169133907f4d8aead3491b7eba4b5c7a65fc17e493b9e63f9e433522fc5f6a85a168fc9d369060600160405180910390a460019650505050612c136001600055565b5050509392505050565b612c2561524a565b600081118015612c36575060148111155b612c825760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070657263656e746167650000000000000000000000000000604482015260640161137a565b601a54421015612cd45760405162461bcd60e51b815260206004820152600f60248201527f54696d656c6f636b206163746976650000000000000000000000000000000000604482015260640161137a565b612ce16201518042615bea565b601a556018805490829055604080518281526020810184905242918101919091527f05de795d533c83a69716d09a7d87c97b9ace14242301047692a6ccc1b8f3d14c9060600161172a565b80600081118015612d3f57506009548111155b612d8b5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b612d9361524a565b60008281526012602052604090205460ff1615612df25760405162461bcd60e51b815260206004820152600e60248201527f416c726561647920706175736564000000000000000000000000000000000000604482015260640161137a565b60008281526012602052604090819020805460ff191660011790555182907f927e6cd2dce24f32508868820cdc35f09d9de0f4b44e945114110125196fba9f90612e3f9042815260200190565b60405180910390a25050565b6001600160a01b038082166000908152601b60209081526040808320815160a0810183528154909516855260018101549285018390526002810154918501829052600381015460ff1615156060860152600401546080850152919291612eb091615c1a565b9392505050565b612ebf61524a565b600c54612ed5906001600160a01b031682615780565b50565b60606000825b6001600160a01b038181166000908152601b60205260409020541615612f2f5781612f0881615cae565b6001600160a01b039283166000908152601b60205260409020549093509091169050612ede565b6000612f3c836001615bea565b67ffffffffffffffff811115612f5457612f54615ce6565b604051908082528060200260200182016040528015612f7d578160200160208202803683370190505b5090508481600081518110612f9457612f94615d15565b6001600160a01b039092166020928302919091019091015284915060015b838111613016576001600160a01b039283166000908152601b602052604090205482519316928390839083908110612fec57612fec615d15565b6001600160a01b03909216602092830291909101909101528061300e81615cae565b915050612fb2565b50949350505050565b61302761524a565b6004546001600160a01b039081169083160361317b576000606461304c60c882615bea565b601e546130599190615c2d565b6130639190615c44565b6019546130709190615bea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156130d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f79190615ba2565b9050816131048483615c1a565b10156131785760405162461bcd60e51b815260206004820152602b60248201527f43616e6e6f7420776974686472617720746f6b656e732072657365727665642060448201527f666f722072657761726473000000000000000000000000000000000000000000606482015260840161137a565b50505b600c546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810183905260009184169063a9059cbb906044016020604051808303816000875af11580156131e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320d9190615bfd565b90508061325c5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b505050565b61326961524a565b60105460ff16156132bc5760405162461bcd60e51b815260206004820152601b60248201527f436f6e747261637420616c7265616479207072652d66756e6465640000000000604482015260640161137a565b6004546001600160a01b03166133145760405162461bcd60e51b815260206004820152601260248201527f53616c6520746f6b656e206e6f74207365740000000000000000000000000000604482015260640161137a565b6000600f54600e54600d546133299190615bea565b6133339190615bea565b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561339b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bf9190615ba2565b9050818110156134115760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161137a565b6010805460ff19166001179055600454604080518381524260208201526001600160a01b03909216917fa87af714d03c932d084d64774397d6d857ba204899b9d02dc2a79c9a5aec207e9101612e3f565b6001600160a01b0381166134b85760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420726566657272657200000000000000000000000000000000604482015260640161137a565b336001600160a01b038216036135105760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f7420726566657220796f757273656c660000000000000000000000604482015260640161137a565b336000908152601d602052604090205460ff16156135705760405162461bcd60e51b815260206004820152601760248201527f416c72656164792075736564206120726566657272616c000000000000000000604482015260640161137a565b6001600160a01b0381166000908152601c602052604090205460ff166135d85760405162461bcd60e51b815260206004820152601a60248201527f526566657272657220686173206e6f74207175616c6966696564000000000000604482015260640161137a565b6001600160a01b038181166000908152601b6020526040902054339116036136425760405162461bcd60e51b815260206004820152601d60248201527f43697263756c617220726566657272616c206e6f7420616c6c6f776564000000604482015260640161137a565b6001600160a01b038082166000908152601b6020526040902054165b6001600160a01b038116156136e557336001600160a01b038216036136c55760405162461bcd60e51b815260206004820181905260248201527f43697263756c617220726566657272616c20636861696e206465746563746564604482015260640161137a565b6001600160a01b039081166000908152601b60205260409020541661365e565b336000908152601b6020818152604080842080546001600160a01b0388167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560178452828620600501805490911682179055601d8352818520805460ff199081166001908117909255918652939092528320600381018054909216909217905560040180549161377c83615cae565b91905055506000805b6001600160a01b03841660009081526017602052604090206004015481101561380d576001600160a01b03841660009081526017602052604090206004018054339190839081106137d8576137d8615d15565b6000918252602090912001546001600160a01b0316036137fb576001915061380d565b8061380581615cae565b915050613785565b5080613867576001600160a01b03831660009081526017602090815260408220600401805460018101825590835291200180547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790555b60405142815233906001600160a01b038516907ff36afc48438e7a543cc47977b2ea45ca912bc74fd7e92126efea2f47c961eb7d9060200160405180910390a3505050565b6138b461524a565b6001600160a01b03811661390a5760405162461bcd60e51b815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015260640161137a565b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61394c61524a565b6139566000615873565b565b600080600b54600b5461396b9190615c2d565b600a5461397661436a565b6139809086615c2d565b61398a9190615c2d565b6139949190615c44565b90506139a084826151bb565b949350505050565b6139b0615290565b60205460ff16613a025760405162461bcd60e51b815260206004820152601560248201527f5374616b696e67206973206e6f74206163746976650000000000000000000000604482015260640161137a565b60008111613a525760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207374616b65207a65726f20616d6f756e740000000000000000604482015260640161137a565b601f5481601e54613a639190615bea565b1115613ab15760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672063617020776f756c64206265206578636565646564000000604482015260640161137a565b60006064613ac060c884615c2d565b613aca9190615c44565b9050613ad5600f5490565b81602154613ae39190615bea565b1115613b575760405162461bcd60e51b815260206004820152602c60248201527f4e6f7420656e6f75676820746f6b656e7320696e20746865207374616b696e6760448201527f2072657761726420706f6f6c0000000000000000000000000000000000000000606482015260840161137a565b81601e54613b659190615bea565b601e55602154613b76908290615bea565b602155601f54601e5410613bca576020805460ff19168155604080516000815242928101929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a15b336000908152602260205260409020805415801590613bee5750600381015460ff16155b15613dc2578060020154421015613c6d5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742061646420746f206578697374696e67207374616b652077686960448201527f6c65206c6f636b65640000000000000000000000000000000000000000000000606482015260840161137a565b805460006064613c7e60c884615c2d565b613c889190615c44565b60038401805460ff191660011790556004549091506000906001600160a01b031663a9059cbb33613cb98587615bea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d409190615bfd565b905080613d8f5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b8584554260018501819055613da9906301e1338090615bea565b600285015550505060038101805460ff19169055613dee565b8281554260018201819055613ddc906301e1338090615bea565b600282015560038101805460ff191690555b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e799190615ba2565b600480546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523392810192909252306024830152604482018790529192506000916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015613ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f149190615bfd565b905080613f635760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fee9190615ba2565b9050613ffa8684615bea565b81101561406f5760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420616d6f756e74206f6620746f6b656e7320726563656960448201527f7665640000000000000000000000000000000000000000000000000000000000606482015260840161137a565b6002840154604080518881524260208201529081019190915233907f0fc5b1bac0416800b42a669229a346b6e5a15db3896339dbdc5fa376e1e4570a9060600160405180910390a25050505050612ed56001600055565b6000816000811180156140db57506009548111155b6141275760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b6001600160a01b03841660009081526014602090815260408083208684528252918290208251606081018452815481526001820154928101839052600290910154928101929092526141bb5760405162461bcd60e51b815260206004820152601060248201527f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000604482015260640161137a565b6000816040015182602001516141d19190615c1a565b9050600081116142235760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d65640000000000000000000000000000000000604482015260640161137a565b95945050505050565b6001600160a01b038116600090815260226020526040812060028101548154839283928392839283928392429190911090839060649061426e9060c890615c2d565b6142789190615c44565b83546001850154600286015460038701549394509192909190859060ff1685816142ae5788546142a9908890615bea565b6142b1565b60005b9950995099509950995099509950505050919395979092949650565b6142d561524a565b6001600160a01b03811661432b5760405162461bcd60e51b815260206004820152601260248201527f5a65726f20746f6b656e20616464726573730000000000000000000000000000604482015260640161137a565b601080546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600080601160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156143c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e49190615d5e565b505050915050806402540be4006143fb9190615dae565b92915050565b6000816144505760405162461bcd60e51b815260206004820152600e60248201527f5a65726f204944206c656e677468000000000000000000000000000000000000604482015260640161137a565b60005b828110156144da5761447c84848381811061447057614470615d15565b90506020020135611869565b6144c85760405162461bcd60e51b815260206004820152600c60248201527f436c61696d206661696c65640000000000000000000000000000000000000000604482015260640161137a565b806144d281615cae565b915050614453565b5060019392505050565b846000811180156144f757506009548111155b6145435760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b61454b61524a565b6000851161459b5760405162461bcd60e51b815260206004820152600a60248201527f5a65726f20707269636500000000000000000000000000000000000000000000604482015260640161137a565b600083116145eb5760405162461bcd60e51b815260206004820152601360248201527f5a65726f20746f6b656e7320746f2073656c6c00000000000000000000000000604482015260640161137a565b5060009485526013602052604090942060028101939093556003830191909155600582015560060155565b61462a670de0b6b3a76400006103e8615c2d565b8110614654576001600160a01b0382166000908152601c60205260409020805460ff191660011790555b6001600160a01b038083166000908152601b6020526040902054168015801590614691575061468d670de0b6b3a76400006103e8615c2d565b8210155b1561325c5760006064601854846146a89190615c2d565b6146b29190615c44565b90508060006146c18280615bea565b9050600e54816019546146d49190615bea565b116147b3576001600160a01b0384166000908152601b6020526040902060010154614700908490615bea565b6001600160a01b038086166000908152601b60205260408082206001908101949094559189168152200154614736908390615bea565b6001600160a01b0387166000908152601b6020526040902060010155601954614760908290615bea565b6019556040805184815260208101849052428183015290516001600160a01b0388811692908716917f5660d47451868f1bb42f832a92e54d7670a64411d1074b64dfab5bec5f29c2319181900360600190a35b505050505050565b6147cf670de0b6b3a76400006103e8615c2d565b81565b6147da61524a565b60095460009081526013602052604090206008015460ff1615156001146148435760405162461bcd60e51b815260206004820181905260248201527f546869732070726573616c6520697320616c726561647920496e616374697665604482015260640161137a565b60098054600090815260136020526040808220426001909101559154815220600801805460ff19169055565b61487761524a565b6020805460ff191682151590811782556040805191825242928201929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a150565b6148cc615290565b33600090815260226020526040902080546149295760405162461bcd60e51b815260206004820152600e60248201527f4e6f207374616b6520666f756e64000000000000000000000000000000000000604482015260640161137a565b600381015460ff161561497e5760405162461bcd60e51b815260206004820152601160248201527f416c72656164792077697468647261776e000000000000000000000000000000604482015260640161137a565b80600201544210156149d25760405162461bcd60e51b815260206004820152601560248201527f5374616b65206973207374696c6c206c6f636b65640000000000000000000000604482015260640161137a565b8054600060646149e360c884615c2d565b6149ed9190615c44565b905060006149fb8284615bea565b60038501805460ff19166001179055601e54909150614a1b908490615c1a565b601e55600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015614a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aa49190615ba2565b811115614b195760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e7472616360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161137a565b600480546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523392810192909252602482018390526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015614b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bad9190615bfd565b905080614bfc5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015260640161137a565b60408051858152602081018590524281830152905133917f88d1c46373223a4f1f60db2badc985b05ec9c2b2eab4537f0f8e1291b78b6e37919081900360600190a250505050506139566001600055565b6000806000806000806000601e54601f5460c8602060009054906101000a900460ff16614c79600f5490565b60215480614c86600f5490565b614c909190615c1a565b959d949c50929a50909850965094509092509050565b6000806000806000601854601954600e54601954600e54614cc79190615c1a565b601a54945094509450945094509091929394565b60205460009081908190819060ff168015614cf95750601f54601e54105b90506000601e54601f5411614d0f576000614d1f565b601e54601f54614d1f9190615c1a565b90506000601f54601e546064614d359190615c2d565b614d3f9190615c44565b9296919550919350915050565b80600081118015614d5f57506009548111155b614dab5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b614db361524a565b60008281526012602052604090205460ff16614e115760405162461bcd60e51b815260206004820152600a60248201527f4e6f742070617573656400000000000000000000000000000000000000000000604482015260640161137a565b60008281526012602052604090819020805460ff191690555182907ff608654a6d8e1785594639dd55babb61d7ae157382015f904a24224e50333b1d90612e3f9042815260200190565b614e6361524a565b60008411614eb35760405162461bcd60e51b815260206004820152600a60248201527f5a65726f20707269636500000000000000000000000000000000000000000000604482015260640161137a565b60008211614f035760405162461bcd60e51b815260206004820152601360248201527f5a65726f20746f6b656e7320746f2073656c6c00000000000000000000000000604482015260640161137a565b60095460009081526013602052604090206008015460ff1615614f685760405162461bcd60e51b815260206004820152601760248201527f50726576696f75732053616c6520697320416374697665000000000000000000604482015260640161137a565b60098054906000614f7883615cae565b909155505060408051610140810182526000808252602080830182815283850189815260608086018a81526080870186815260a088018b815260c089018b815260e08a01898152610100808c018b81526101208d018c8152600980548e5260138d528f8e209e518f559a5160018f0155985160028e0155955160038d0155935160048c0155915160058b01555160068a015551600789015590516008909701805493517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009094169715157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16979097179215150291909117909455548451878152918201839052938101919091527f6a00651728a92841411081673eaa4eddbed06d102a590e050c22def40d4dd0b891015b60405180910390a250505050565b6001600160a01b038082166000908152601b60209081526040808320815160a081018352815490951680865260018201549386018490526002820154928601839052600382015460ff161515606087015260049091015460808601529293849384938493849384939092909161512e8183615c1a565b6001600160a01b039b909b166000908152601c602052604090205460809490940151929b919a909950975060ff90921695509350915050565b61516f61524a565b6001600160a01b0381166151b2576040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526000600482015260240161137a565b612ed581615873565b6000826000811180156151d057506009548111155b61521c5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642070726573616c652069640000000000000000000000000000604482015260640161137a565b60008481526013602052604090206002015461524084670de0b6b3a7640000615c2d565b6139a09190615c44565b6001546001600160a01b03163314613956576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161137a565b6002600054036152cc576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b60205460ff166153255760405162461bcd60e51b815260206004820152601560248201527f5374616b696e67206973206e6f74206163746976650000000000000000000000604482015260640161137a565b600081116153755760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207374616b65207a65726f20616d6f756e740000000000000000604482015260640161137a565b601f5481601e546153869190615bea565b11156153d45760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672063617020776f756c64206265206578636565646564000000604482015260640161137a565b600060646153e360c884615c2d565b6153ed9190615c44565b90506153f8600f5490565b816021546154069190615bea565b111561547a5760405162461bcd60e51b815260206004820152602c60248201527f4e6f7420656e6f75676820746f6b656e7320696e20746865207374616b696e6760448201527f2072657761726420706f6f6c0000000000000000000000000000000000000000606482015260840161137a565b81601e546154889190615bea565b601e55602154615499908290615bea565b602155601f54601e54106154ed576020805460ff19168155604080516000815242928101929092527fb7d83b7e094cfcfa7dd295e685a79a100995b6110e9708b6c36d9242b3945450910160405180910390a15b6001600160a01b038316600090815260226020526040902080541580159061551a5750600381015460ff16155b1561570a5780600201544210156155995760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74207374616b65207768656e20796f7520686176652061206c6f6360448201527f6b6564207374616b650000000000000000000000000000000000000000000000606482015260840161137a565b8054600060646155aa60c884615c2d565b6155b49190615c44565b60038401805460ff191660011790556004549091506000906001600160a01b031663a9059cbb886155e58587615bea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015615648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061566c9190615bfd565b9050806156bb5760405162461bcd60e51b815260206004820152601760248201527f5374616b65207769746864726177616c206661696c6564000000000000000000604482015260640161137a565b6040805184815260208101849052428183015290516001600160a01b038916917f88d1c46373223a4f1f60db2badc985b05ec9c2b2eab4537f0f8e1291b78b6e37919081900360600190a25050505b8281554260018201819055615724906301e1338090615bea565b6002820181905560038201805460ff1916905560408051858152426020820152908101919091526001600160a01b038516907f0fc5b1bac0416800b42a669229a346b6e5a15db3896339dbdc5fa376e1e4570a906060016150aa565b804710156157d05760405162461bcd60e51b815260206004820152600b60248201527f4c6f772062616c616e6365000000000000000000000000000000000000000000604482015260640161137a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461581d576040519150601f19603f3d011682016040523d82523d6000602084013e615822565b606091505b505090508061325c5760405162461bcd60e51b815260206004820152601260248201527f455448205061796d656e74206661696c65640000000000000000000000000000604482015260640161137a565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156158ef57600080fd5b5035919050565b80356001600160a01b038116811461590d57600080fd5b919050565b8015158114612ed557600080fd5b6000806040838503121561593357600080fd5b61593c836158f6565b9150602083013561594c81615912565b809150509250929050565b60006020828403121561596957600080fd5b612eb0826158f6565b6000806040838503121561598557600080fd5b82359150602083013561594c81615912565b600080604083850312156159aa57600080fd5b6159b3836158f6565b91506159c1602084016158f6565b90509250929050565b6000806000606084860312156159df57600080fd5b833592506159ef602085016158f6565b915060408401356159ff81615912565b809150509250925092565b600060208284031215615a1c57600080fd5b8135612eb081615912565b6020808252825182820181905260009190848201906040850190845b81811015615a685783516001600160a01b031683529284019291840191600101615a43565b50909695505050505050565b60008060408385031215615a8757600080fd5b615a90836158f6565b946020939093013593505050565b60008060408385031215615ab157600080fd5b50508035926020909101359150565b60008060208385031215615ad357600080fd5b823567ffffffffffffffff80821115615aeb57600080fd5b818501915085601f830112615aff57600080fd5b813581811115615b0e57600080fd5b8660208260051b8501011115615b2357600080fd5b60209290920196919550909350505050565b600080600080600060a08688031215615b4d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060808587031215615b8657600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215615bb457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156143fb576143fb615bbb565b600060208284031215615c0f57600080fd5b8151612eb081615912565b818103818111156143fb576143fb615bbb565b80820281158282048414176143fb576143fb615bbb565b600082615c7a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000825160005b81811015615ca05760208186018101518583015201615c86565b506000920191825250919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615cdf57615cdf615bbb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805169ffffffffffffffffffff8116811461590d57600080fd5b600080600080600060a08688031215615d7657600080fd5b615d7f86615d44565b9450602086015193506040860151925060608601519150615da260808701615d44565b90509295509295909350565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615615de657615de6615bbb565b81810583148215176143fb576143fb615bbb56fea2646970667358221220d17175edc77c200a8104b883b9d4655de8eef3f6c9dcde0e8924cb9c6054700d64736f6c63430008140033",
  "deployedBytecode": "",
  "libraries": {
    "SaleUtils": "0x5C830b0240A7FbB4fEB9Aa61F4F98FB91DbFB758"
  },
  "devdoc": {
    "details": "All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "ExcludeAccouctFromMinBuy(address,bool)": {
        "details": "Exclude account from minimum buy requirement"
      },
      "WithdrawContractFunds(uint256)": {
        "details": "Withdraw ETH from contract"
      },
      "WithdrawTokens(address,uint256)": {
        "details": "Override withdraw to account for staking rewards"
      },
      "buyWithEth(address,bool)": {
        "details": "To buy into a presale using ETH with option for immediate staking",
        "params": {
          "referrer": "Referrer address (optional, use address(0) for no referrer)",
          "shouldStake": "If true, tokens are immediately staked for 1 year with 200% APY"
        }
      },
      "buyWithUSDT(uint256,address,bool)": {
        "details": "To buy into a presale using USDT with option for immediate staking",
        "params": {
          "referrer": "Referrer address (optional, use address(0) for no referrer)",
          "shouldStake": "If true, tokens are immediately staked for 1 year with 200% APY",
          "usdAmount": "USDT amount to buy tokens"
        }
      },
      "canBeReferred(address,address)": {
        "details": "Check if a user can be referred by a specific referrer"
      },
      "changeFundWallet(address)": {
        "details": "Change fund receiving wallet"
      },
      "changeUSDTToken(address)": {
        "details": "Change USDT token address"
      },
      "claimAmount(uint256)": {
        "details": "Claim function to handle only non-staked tokens",
        "params": {
          "_id": "Presale id"
        }
      },
      "claimMultiple(uint256[])": {
        "details": "To claim tokens from multiple presales",
        "params": {
          "_ids": "Array of presale IDs"
        }
      },
      "claimReferralRewards()": {
        "details": "Claim referral rewards"
      },
      "claimableAmount(address,uint256)": {
        "details": "Helper funtion to get claimable tokens for a given presale"
      },
      "constructor": {
        "details": "Constructor sets up the contract parameters",
        "params": {
          "_MinTokenTobuy": "Minimum tokens that can be purchased",
          "_SaleToken": "Sale token address",
          "_oracle": "Chainlink oracle for ETH price feed",
          "_totalTokenSupply": "Total token supply (100,000,000,000)",
          "_usdt": "USDT token address"
        }
      },
      "createPresale(uint256,uint256,uint256,uint256)": {
        "details": "Create a new presale"
      },
      "enableClaim(uint256,bool)": {
        "details": "Enable claiming for a presale"
      },
      "endPresale()": {
        "details": "End the presale"
      },
      "ethToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for eth amount"
      },
      "getClaimableReferralRewards(address)": {
        "details": "Get claimable referral rewards for a user",
        "params": {
          "_user": "Address of the user"
        }
      },
      "getLatestPrice()": {
        "details": "Get the latest ETH price from Chainlink"
      },
      "getReferralChain(address)": {
        "details": "Get the entire referral chain for a user"
      },
      "getStakingAvailability()": {
        "details": "Quick check if staking is available and capacity info"
      },
      "getStakingStats()": {
        "details": "Get staking program statistics"
      },
      "getUserStakingInfo(address)": {
        "details": "Get user staking information"
      },
      "maxStakingRewards()": {
        "details": "Public getter for max staking rewards"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pausePresale(uint256)": {
        "details": "Pause a presale"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "preFundContract()": {
        "details": "Pre-fund the contract with tokens for presale, referrals, and staking"
      },
      "processReferralRewards(address,uint256)": {
        "details": "Process referral rewards after a successful purchase",
        "params": {
          "_tokenAmount": "Amount of tokens purchased",
          "_user": "Address of the user who made a purchase"
        }
      },
      "recordReferral(address)": {
        "details": "Records a valid referral relationship",
        "params": {
          "_referrer": "Address of the referrer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setStakingIntent(bool)": {
        "details": "Set staking intent for a user",
        "params": {
          "_intent": "Whether to stake tokens upon claim"
        }
      },
      "setStakingStatus(bool)": {
        "details": "Toggle staking status (active/inactive)"
      },
      "stakeTokens(uint256)": {
        "details": "Stake tokens with 1-year lock and 200% APY"
      },
      "startPresale()": {
        "details": "Start the presale"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPausePresale(uint256)": {
        "details": "Unpause a presale"
      },
      "updatePresale(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Update presale parameters"
      },
      "updateReferralRewardPercentage(uint256)": {
        "details": "Change referral reward percentage with timelock protection",
        "params": {
          "_percentage": "New percentage (1-20)"
        }
      },
      "updateStakingCap(uint256)": {
        "details": "Update staking cap"
      },
      "usdtToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for given usdt amount"
      },
      "withdrawStake()": {
        "details": "Withdraw staked tokens and rewards after lock period"
      }
    },
    "title": "PreSale and Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract handles token presale, referral rewards, and staking functionality",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1098,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 988,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2801,
        "contract": "contracts/Sale.sol:Sale",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2803,
        "contract": "contracts/Sale.sol:Sale",
        "label": "usdt",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2805,
        "contract": "contracts/Sale.sol:Sale",
        "label": "SaleToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2807,
        "contract": "contracts/Sale.sol:Sale",
        "label": "MinTokenTobuy",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2809,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalAmountBought",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2811,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalUSDTRaised",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2813,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalTokenSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2815,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2817,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDT_MULTIPLIER",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2819,
        "contract": "contracts/Sale.sol:Sale",
        "label": "ETH_MULTIPLIER",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2821,
        "contract": "contracts/Sale.sol:Sale",
        "label": "fundReceiver",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2823,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2825,
        "contract": "contracts/Sale.sol:Sale",
        "label": "maxReferralRewards",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2827,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_maxStakingRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2830,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isTokenPreFunded",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2833,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDTInterface",
        "offset": 1,
        "slot": "16",
        "type": "t_contract(IERC20Metadata)949"
      },
      {
        "astId": 2836,
        "contract": "contracts/Sale.sol:Sale",
        "label": "aggregatorInterface",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(Aggregator)2779"
      },
      {
        "astId": 2840,
        "contract": "contracts/Sale.sol:Sale",
        "label": "paused",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2845,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presale",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(Presale)4751_storage)"
      },
      {
        "astId": 2852,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userClaimData",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)4758_storage))"
      },
      {
        "astId": 2856,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isExcludeMinToken",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2860,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isAdmin",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2865,
        "contract": "contracts/Sale.sol:Sale",
        "label": "users",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(User)4730_storage)"
      },
      {
        "astId": 1174,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralRewardPercentage",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1179,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalReferralRewardsIssued",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1184,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralPercentageChangeTimeLock",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 1192,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralData",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_struct(ReferralData)4769_storage)"
      },
      {
        "astId": 1196,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasQualifiedPurchase",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1200,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasUsedReferral",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3774,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStaked",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 3776,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingCap",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 3778,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingActive",
        "offset": 0,
        "slot": "32",
        "type": "t_bool"
      },
      {
        "astId": 3780,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStakingRewardsIssued",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 3785,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakes",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_struct(StakeInfo)4778_storage)"
      },
      {
        "astId": 3789,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakingIntent",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Aggregator)2779": {
        "encoding": "inplace",
        "label": "contract Aggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)949": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)4758_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ISaleStructs.ClaimData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimData)4758_storage)"
      },
      "t_mapping(t_address,t_struct(ReferralData)4769_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.ReferralData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferralData)4769_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)4778_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)4778_storage"
      },
      "t_mapping(t_address,t_struct(User)4730_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISaleStructs.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)4730_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ClaimData)4758_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISaleStructs.ClaimData)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimData)4758_storage"
      },
      "t_mapping(t_uint256,t_struct(Presale)4751_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISaleStructs.Presale)",
        "numberOfBytes": "32",
        "value": "t_struct(Presale)4751_storage"
      },
      "t_struct(ClaimData)4758_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.ClaimData",
        "members": [
          {
            "astId": 4753,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4755,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4757,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Presale)4751_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.Presale",
        "members": [
          {
            "astId": 4732,
            "contract": "contracts/Sale.sol:Sale",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4734,
            "contract": "contracts/Sale.sol:Sale",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4736,
            "contract": "contracts/Sale.sol:Sale",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4738,
            "contract": "contracts/Sale.sol:Sale",
            "label": "nextStagePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4740,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4742,
            "contract": "contracts/Sale.sol:Sale",
            "label": "tokensToSell",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4744,
            "contract": "contracts/Sale.sol:Sale",
            "label": "UsdtHardcap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4746,
            "contract": "contracts/Sale.sol:Sale",
            "label": "amountRaised",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4748,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Active",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4750,
            "contract": "contracts/Sale.sol:Sale",
            "label": "isEnableClaim",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ReferralData)4769_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.ReferralData",
        "members": [
          {
            "astId": 4760,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4762,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalReferralRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4764,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedReferralRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4766,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasReferred",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4768,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referralCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakeInfo)4778_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.StakeInfo",
        "members": [
          {
            "astId": 4771,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4773,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakingTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4775,
            "contract": "contracts/Sale.sol:Sale",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4777,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasWithdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)4730_storage": {
        "encoding": "inplace",
        "label": "struct ISaleStructs.User",
        "members": [
          {
            "astId": 4718,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalBoughtTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4720,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4722,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalCollectedReferral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4724,
            "contract": "contracts/Sale.sol:Sale",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4727,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referredUsers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4729,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}