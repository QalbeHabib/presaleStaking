{
  "address": "0xB759b0e893091a24c96907cCf6684664157e8401",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SaleToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_MinTokenTobuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokenSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinimum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MinTokensToUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isClaimable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleClaimableStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isClosed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleClosedStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresalePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PresaleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleTokenAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referred",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refereeReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StakingStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimedWithTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensPreFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WhitelistStatusChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "ChangeTokenToSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "EditMinTokenToBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "ExcludeAccouctFromMinBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REFERRAL_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_PURCHASE_FOR_REFERRAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MinTokenTobuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_ALLOCATION_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_ALLOCATION_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CHANGE_TIMELOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_ALLOCATION_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_APY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SaleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalAmountBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalReferralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalUSDTRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UserPresaleBuying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawContractFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "buyWithUSDT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canReferOthers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "changeFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "changeUSDTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_id",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferralRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_UsdtHardcap",
          "type": "uint256"
        }
      ],
      "name": "createPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ethBuyHelper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ethToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getClaimableReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferralProgramStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPercentageChangeAllowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingAvailability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_canStake",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_remainingCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentFilled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAPY",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRewardsCommitted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remainingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserReferralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isQualifiedReferrer",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "potentialReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasQualifiedPurchase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasUsedReferral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludeMinToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenPreFunded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxReferralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "pausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preFundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "presale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UsdtHardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "Active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnableClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "presales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ClaimAble",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isClosed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralData",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedReferralRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasReferred",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "referralCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralPercentageChangeTimeLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "safeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStakingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReferralRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingRewardsIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unPausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "updateMaxReferralRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextStagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_Hardcap",
          "type": "uint256"
        }
      ],
      "name": "updatePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        }
      ],
      "name": "updateReferralRewardPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "updateStakingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdtBuyHelper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdtToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakingIntent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TotalBoughtTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TotalCollectedReferral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb73f9e032ebc035fe1e008f32239cc8d86a3e0ad26874dcf5405a0ef2ddf9b69",
  "receipt": {
    "to": null,
    "from": "0x16b5f51c86816550D949524889E369524452B434",
    "contractAddress": "0xB759b0e893091a24c96907cCf6684664157e8401",
    "transactionIndex": 182,
    "gasUsed": "5667562",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000002000000000000000000000000000000000000001000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000020000000000000000008000000000000000000000010000000000000000000000000",
    "blockHash": "0x439a6a723a5cabccf05d4ba398423006122501e64d5d6582cd493155ad2d7a69",
    "transactionHash": "0xb73f9e032ebc035fe1e008f32239cc8d86a3e0ad26874dcf5405a0ef2ddf9b69",
    "logs": [
      {
        "transactionIndex": 182,
        "blockNumber": 8189915,
        "transactionHash": "0xb73f9e032ebc035fe1e008f32239cc8d86a3e0ad26874dcf5405a0ef2ddf9b69",
        "address": "0xB759b0e893091a24c96907cCf6684664157e8401",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000016b5f51c86816550d949524889e369524452b434"
        ],
        "data": "0x",
        "logIndex": 318,
        "blockHash": "0x439a6a723a5cabccf05d4ba398423006122501e64d5d6582cd493155ad2d7a69"
      }
    ],
    "blockNumber": 8189915,
    "cumulativeGasUsed": "27019571",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306",
    "0x1679B569c112C40fE04BA89C99D59326De278620",
    "0x49B2b993690134bf391b8A53DC6653a0EDeEeE82",
    "1000000000000000000000",
    "100000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5b244a461d4fbdde0f02651acc97824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinTokensToUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleClaimableStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleClosedStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referred\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refereeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimedWithTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensPreFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WhitelistStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ChangeTokenToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EditMinTokenToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REFERRAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_PURCHASE_FOR_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_ALLOCATION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_ALLOCATION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CHANGE_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_ALLOCATION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalAmountBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalReferralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalUSDTRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserPresaleBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canReferOthers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralProgramStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPercentageChangeAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAvailability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_remainingCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFilled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAPY\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardsCommitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isQualifiedReferrer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasQualifiedPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasUsedReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenPreFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preFundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ClaimAble\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReferralRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasReferred\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentageChangeTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingRewardsIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"updateMaxReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateStakingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakingIntent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalBoughtTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalCollectedReferral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"buyWithEth(address,bool)\":{\"details\":\"To buy into a presale using ETH with option for immediate staking\",\"params\":{\"referrer\":\"Referrer address (optional, use address(0) for no referrer)\",\"shouldStake\":\"If true, tokens are immediately staked for 1 year with 200% APY\"}},\"buyWithUSDT(uint256,address,bool)\":{\"details\":\"To buy into a presale using USDT with option for immediate staking\",\"params\":{\"referrer\":\"Referrer address (optional, use address(0) for no referrer)\",\"shouldStake\":\"If true, tokens are immediately staked for 1 year with 200% APY\",\"usdAmount\":\"USDT amount to buy tokens\"}},\"changeFundWallet(address)\":{\"details\":\"To update the fund receiving wallet\",\"params\":{\"_wallet\":\"address of wallet to update\"}},\"changeUSDTToken(address)\":{\"details\":\"To update the USDT Token address\",\"params\":{\"_newAddress\":\"Sale token address\"}},\"claimAmount(uint256)\":{\"details\":\"Modified claim function to handle only non-staked tokens\",\"params\":{\"_id\":\"Presale id\"}},\"claimMultiple(uint256[])\":{\"details\":\"To claim tokens from a multiple presale\",\"params\":{\"_id\":\"Presale id\"}},\"claimReferralRewards()\":{\"details\":\"Claim referral rewards\"},\"claimableAmount(address,uint256)\":{\"details\":\"Helper funtion to get claimable tokens for a given presale.\",\"params\":{\"_id\":\"Presale id\",\"user\":\"User address\"}},\"constructor\":{\"details\":\"Constructor sets up the contract parameters\",\"params\":{\"_MinTokenTobuy\":\"Minimum tokens that can be purchased\",\"_SaleToken\":\"Sale token address\",\"_oracle\":\"Chainlink oracle for ETH price feed\",\"_totalTokenSupply\":\"Total token supply (100,000,000,000)\",\"_usdt\":\"USDT token address\"}},\"ethBuyHelper(uint256,uint256)\":{\"details\":\"Helper funtion to get ETH price for given amount\",\"params\":{\"_id\":\"Presale id\",\"amount\":\"No of tokens to buy\"}},\"ethToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for eth amount\",\"params\":{\"_id\":\"Presale id\",\"amount\":\"No of eth\"}},\"getClaimableReferralRewards(address)\":{\"details\":\"Get claimable referral rewards for a user\",\"params\":{\"_user\":\"Address of the user\"}},\"getLatestPrice()\":{\"details\":\"To get latest ethereum price in 10**18 format\"},\"getStakingAvailability()\":{\"details\":\"Quick check if staking is available and capacity info\",\"returns\":{\"_canStake\":\"True if staking is active and cap not reached\",\"_percentFilled\":\"Percentage of staking capacity filled (0-100)\",\"_remainingCapacity\":\"Remaining capacity for staking\"}},\"getStakingStats()\":{\"details\":\"Get staking program statistics\"},\"getUserStakingInfo(address)\":{\"details\":\"Get user staking information\",\"params\":{\"_user\":\"Address of the user\"}},\"maxStakingRewards()\":{\"details\":\"Maximum available tokens for staking rewards (20% of total supply)\",\"returns\":{\"_0\":\"The maximum number of tokens available for staking rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pausePresale(uint256)\":{\"details\":\"To pause the presale\",\"params\":{\"_id\":\"Presale id to update\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"preFundContract()\":{\"details\":\"Pre-fund the contract with tokens for presale, referrals, and staking\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeWithdraw(address,uint256,address)\":{\"details\":\"Safe withdrawal function for accumulated tokens\",\"params\":{\"_amount\":\"Amount to withdraw\",\"_recipient\":\"Recipient address\",\"_token\":\"Token address\"}},\"setStakingStatus(bool)\":{\"details\":\"Toggle staking status (active/inactive)\",\"params\":{\"_status\":\"New staking status\"}},\"stakeTokens(uint256)\":{\"details\":\"Stake tokens with 1-year lock and 200% APY\",\"params\":{\"_amount\":\"Amount of tokens to stake\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPausePresale(uint256)\":{\"details\":\"To unpause the presale\",\"params\":{\"_id\":\"Presale id to update\"}},\"updateMaxReferralRewards(uint256)\":{\"details\":\"Update the maximum referral rewards (5% of total supply)\",\"params\":{\"_totalSupply\":\"The total token supply to calculate 5% from\"}},\"updateReferralRewardPercentage(uint256)\":{\"details\":\"Change referral reward percentage with timelock protection\",\"params\":{\"_percentage\":\"New percentage (1-20)\"}},\"updateStakingCap(uint256)\":{\"details\":\"Update staking cap\",\"params\":{\"_newCap\":\"New staking cap\"}},\"usdtBuyHelper(uint256,uint256)\":{\"details\":\"Helper funtion to get USDT price for given amount\",\"params\":{\"_id\":\"Presale id\",\"amount\":\"No of tokens to buy\"}},\"usdtToTokens(uint256,uint256)\":{\"details\":\"Helper funtion to get tokens for given usdt amount\",\"params\":{\"_id\":\"Presale id\",\"amount\":\"No of usdt\"}},\"withdrawStake()\":{\"details\":\"Withdraw staked tokens and rewards after lock period\"}},\"title\":\"PreSale and Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"preFundContract()\":{\"notice\":\"Before calling this function: 1. Deploy the token contract 2. Transfer 55% of total supply to this contract address 3. Call this function to verify and activate the pre-funding This marks the contract as ready for presale with tokens available for: - Direct distribution for non-staking purchases - Immediate staking during purchase (no need to claim first) - Referral reward distribution\"}},\"notice\":\"This contract handles token presale, referral rewards, and staking functionality\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sale.sol\":\"Sale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Import our custom contracts\\nimport \\\"./SaleBase.sol\\\";\\nimport \\\"./StakingManager.sol\\\";\\n\\n/**\\n * @title PreSale and Staking Contract\\n * @notice This contract handles token presale, referral rewards, and staking functionality\\n * @dev All tokens (presale, referral, staking) must be sent to the contract before starting\\n *\\n * Token Allocation:\\n * - 30% for presale (30,000,000,000 tokens)\\n * - 5% for referral rewards (5,000,000,000 tokens)\\n * - 20% for staking rewards (20,000,000,000 tokens)\\n *\\n * Total: 55% of total supply must be transferred to this contract\\n */\\ncontract Sale is StakingManager {\\n    /**\\n     * @dev Constructor sets up the contract parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _SaleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply (100,000,000,000)\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n      StakingManager(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply)\\n    {\\n        // No additional initialization needed\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using USDT with option for immediate staking\\n     * @param usdAmount USDT amount to buy tokens\\n     * @param referrer Referrer address (optional, use address(0) for no referrer)\\n     * @param shouldStake If true, tokens are immediately staked for 1 year with 200% APY\\n     */\\n    function buyWithUSDT(\\n        uint256 usdAmount, \\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, usdtToTokens(presaleId, usdAmount))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Contract not pre-funded with tokens\\\");\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active == true, \\\"Presale is not active yet\\\");\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\\n        \\\"Amount should be less than leftHardcap\\\");\\n\\n        // Handle referral if provided and not zero address\\n        if (referrer != address(0)) {\\n            // Security check to prevent contract-based referrals (potential attack vector)\\n            require(!isContract(referrer), \\\"Referrer cannot be a contract\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n\\n        if (isExcludeMinToken[msg.sender] == false) {\\n            require(tokens >= MinTokenTobuy, \\\"Less than min amount\\\");\\n        }\\n\\n        uint256 ourAllowance = USDTInterface.allowance(\\n            _msgSender(),\\n            address(this)\\n        );\\n        require(usdAmount <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\n        (bool success, ) = address(USDTInterface).call(\\n            abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                _msgSender(),\\n                fundReceiver,\\n                usdAmount\\n            )\\n        );\\n        require(success, \\\"Token payment failed\\\");\\n        \\n        // Process referral rewards only if referrer is not zero address\\n        if (referrer != address(0)) {\\n            processReferralRewards(_msgSender(), tokens);\\n        }\\n        \\n        // Handle tokens based on staking preference\\n        if (shouldStake) {\\n            // Directly stake tokens since the contract is pre-funded\\n            _handleTokenStaking(_msgSender(), tokens);\\n        } else {\\n            // Record for later claiming\\n            if (userClaimData[_msgSender()][presaleId].totalAmount > 0) {\\n                userClaimData[_msgSender()][presaleId].totalAmount += tokens;\\n            } else {\\n                userClaimData[_msgSender()][presaleId] = ClaimData(0, tokens, 0);\\n            }\\n        }\\n        \\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(USDTInterface),\\n            tokens,\\n            usdAmount,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using ETH with option for immediate staking\\n     * @param referrer Referrer address (optional, use address(0) for no referrer)\\n     * @param shouldStake If true, tokens are immediately staked for 1 year with 200% APY\\n     */\\n    function buyWithEth(\\n        address referrer, \\n        bool shouldStake\\n    ) external\\n        payable\\n        checkPresaleId(presaleId)\\n        checkSaleState(presaleId, ethToTokens(presaleId, msg.value))\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(isTokenPreFunded, \\\"Contract not pre-funded with tokens\\\");\\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\\n        \\\"Amount should be less than leftHardcap\\\");\\n\\n        require(!paused[presaleId], \\\"Presale paused\\\");\\n        require(presale[presaleId].Active == true, \\\"Presale is not active yet\\\");\\n        \\n        // Handle referral if provided and not zero address\\n        if (referrer != address(0)) {\\n            // Security check to prevent contract-based referrals\\n            require(!isContract(referrer), \\\"Referrer cannot be a contract\\\");\\n            recordReferral(referrer);\\n        }\\n\\n        uint256 tokens = usdtToTokens(presaleId, usdAmount);\\n        if (isExcludeMinToken[msg.sender] == false) {\\n            require(tokens >= MinTokenTobuy, \\\"Insufficient amount!\\\");\\n        }\\n        presale[presaleId].Sold += tokens;\\n        presale[presaleId].amountRaised += usdAmount;\\n\\n        // Process referral rewards only if referrer is not zero address\\n        if (referrer != address(0)) {\\n            processReferralRewards(_msgSender(), tokens);\\n        }\\n\\n        // Handle tokens based on staking preference\\n        if (shouldStake) {\\n            // Directly stake tokens since the contract is pre-funded\\n            _handleTokenStaking(_msgSender(), tokens);\\n        } else {\\n            // Record for later claiming\\n            if (userClaimData[_msgSender()][presaleId].totalAmount > 0) {\\n                userClaimData[_msgSender()][presaleId].totalAmount += tokens;\\n            } else {\\n                userClaimData[_msgSender()][presaleId] = ClaimData(\\n                    0, // Last claimed at\\n                    tokens, // total tokens to be claimed\\n                    0 // claimed amount\\n                );\\n            }\\n        }\\n\\n        sendValue(payable(fundReceiver), msg.value);\\n        emit TokensBought(\\n            _msgSender(),\\n            presaleId,\\n            address(0),\\n            tokens,\\n            msg.value,\\n            block.timestamp\\n        );\\n        \\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Modified claim function to handle only non-staked tokens\\n     * @param _id Presale id\\n     */\\n    function claimAmount(uint256 _id)\\n        public\\n        override\\n        checkPresaleId(_id)\\n        returns (bool)\\n    {\\n        uint256 amount = claimableAmount(msg.sender, _id);\\n        \\n        require(amount > 0, \\\"Zero claim amount\\\");\\n        require(\\n            SaleToken != address(0),\\n            \\\"Presale token address not set\\\"\\n        );\\n        require(\\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n\\n        require((presale[_id].isEnableClaim == true), \\\"Claim is not enable\\\");\\n\\n        userClaimData[msg.sender][_id].claimAt = block.timestamp;\\n        userClaimData[msg.sender][_id].claimedAmount += amount;\\n        \\n        // Check if the user has set staking intent\\n        if (userStakingIntent[msg.sender]) {\\n            // Stake all tokens directly\\n            _handleTokenStaking(msg.sender, amount);\\n            \\n            // Reset staking intent after processing\\n            userStakingIntent[msg.sender] = false;\\n        } else {\\n            // Normal token transfer for non-staking users\\n            bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n            require(success, \\\"Token transfer failed\\\");\\n        }\\n        \\n        emit TokensClaimedWithTimestamp(msg.sender, _id, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    function WithdrawTokens(address _token, uint256 amount) external override onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for rewards and stakes\\n            uint256 reservedTokens = totalReferralRewardsIssued +\\n                // Staked tokens plus their potential rewards\\n                totalStaked * (STAKING_APY + 100) / PERCENT_DENOMINATOR;\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(\\n                contractBalance - amount >= reservedTokens,\\n                \\\"Cannot withdraw tokens reserved for rewards\\\"\\n            );\\n        }\\n        \\n        bool success = IERC20(_token).transfer(fundReceiver, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n    }\\n}\",\"keccak256\":\"0x2bf28382ca561df6c436ffb32590d7e508d1a1631ff40846aa3b57305631f14c\",\"license\":\"MIT\"},\"contracts/SaleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface Aggregator {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\n/**\\n * @title Sale Base Contract\\n * @notice This contract handles the core presale and referral functionality\\n */\\ncontract SaleBase is ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    \\n    // Constants\\n    uint256 public constant PERCENT_DENOMINATOR = 100;\\n    uint256 public constant REFERRAL_PERCENTAGE = 5; // 5% referral bonus\\n    uint256 public constant TOKEN_DECIMALS = 10**18;\\n    uint256 internal constant TOKEN_PRICE_PRECISION = 10**18;\\n    \\n    // State variables\\n    address public oracle; // Chainlink oracle address\\n    address public usdt; // USDT token address\\n    address public SaleToken; // Sale token address\\n    uint256 public MinTokenTobuy; // Min tokens to buy\\n    uint256 public TotalAmountBought; // Total tokens bought\\n    uint256 public TotalUSDTRaised; // Total USDT raised\\n    uint256 public TotalReferralAmount; // Total referral rewards\\n    uint256 public totalTokenSupply; // Total supply of tokens\\n    \\n    // Presale structure (renamed from original to avoid duplicates)\\n    struct PresaleInfo {\\n        uint256 cap; // Max tokens to sell\\n        uint256 price; // Price in USDT decimals\\n        uint256 sold; // Tokens already sold\\n        uint256 startTime; // Start timestamp\\n        uint256 endTime; // End timestamp\\n        bool ClaimAble; // Tokens can be claimed\\n        bool isClosed; // Presale is closed \\n    }\\n    \\n    // user structure\\n    struct User {\\n        uint256 TotalBoughtTokens; // Total tokens purchased\\n        uint256 TotalPaid; // Total USDT paid\\n        uint256 TotalCollectedReferral; // Total referral earned\\n        uint256 lastClaimTime; // Last token claim time\\n        address[] referredUsers; // Users referred\\n        address referrer; // User's referrer\\n    }\\n    \\n    // Array of presales\\n    PresaleInfo[] public presales;\\n    \\n    // User's purchases in each presale\\n    mapping(address => mapping(uint256 => uint256)) public UserPresaleBuying;\\n    \\n    // User's token claims\\n    mapping(address => mapping(uint256 => bool)) public Claimed;\\n    \\n    // User data\\n    mapping(address => User) public users;\\n    \\n    // Whitelist status\\n    mapping(address => bool) public isWhitelisted;\\n    \\n    // Admin addresses\\n    mapping(address => bool) public isAdmin;\\n    \\n    // Events\\n    event PresaleStarted(\\n        uint256 presaleId, \\n        uint256 cap, \\n        uint256 price, \\n        uint256 startTime, \\n        uint256 endTime\\n    );\\n    \\n    event PresaleEnded(\\n        uint256 presaleId, \\n        uint256 endTime\\n    );\\n    \\n    event TokensPurchased(\\n        address indexed buyer, \\n        uint256 presaleId, \\n        uint256 amount, \\n        uint256 usdtAmount\\n    );\\n    \\n    event TokensClaimed(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    \\n    event ReferralProcessed(\\n        address indexed referrer, \\n        address indexed referred, \\n        uint256 amount\\n    );\\n    \\n    event WhitelistStatusChanged(\\n        address indexed user, \\n        bool isWhitelisted, \\n        uint256 timestamp\\n    );\\n    \\n    event AdminStatusChanged(\\n        address indexed user, \\n        bool isAdmin, \\n        uint256 timestamp\\n    );\\n    \\n    event OracleUpdated(\\n        address previousOracle, \\n        address newOracle, \\n        uint256 timestamp\\n    );\\n    \\n    event PresaleClaimableStatusChanged(\\n        uint256 presaleId, \\n        bool isClaimable, \\n        uint256 timestamp\\n    );\\n    \\n    event PresaleClosedStatusChanged(\\n        uint256 presaleId, \\n        bool isClosed, \\n        uint256 timestamp\\n    );\\n    \\n    event MinTokensToUSDT(\\n        uint256 previousMinimum, \\n        uint256 newMinimum, \\n        uint256 timestamp\\n    );\\n    \\n    uint256 public presaleId;\\n    uint256 public USDT_MULTIPLIER;\\n    uint256 public ETH_MULTIPLIER;\\n    address public fundReceiver;\\n\\n    // Token allocation constants\\n    uint256 public constant PRESALE_ALLOCATION_PERCENT = 30;\\n    uint256 public constant REFERRAL_ALLOCATION_PERCENT = 5;\\n    uint256 public constant STAKING_ALLOCATION_PERCENT = 20;\\n    \\n    // Total supply and allocations\\n    uint256 public presaleTokens;\\n    uint256 public maxReferralRewards;\\n    uint256 private _maxStakingRewards; // Private state variable instead\\n\\n    // Referral system constants and variables\\n    uint256 public constant MINIMUM_PURCHASE_FOR_REFERRAL = 1000 * TOKEN_DECIMALS; // 1000 tokens minimum to qualify for referral\\n    uint256 public referralRewardPercentage = 20; // Default 20% reward (configurable)\\n    uint256 public constant MAX_REFERRAL_PERCENTAGE = 20; // Maximum allowed reward percentage\\n    uint256 public totalReferralRewardsIssued;\\n    uint256 public constant REFERRAL_DENOMINATOR = 100; // For percentage calculations\\n\\n    // Anti-gaming time lock for referral changes\\n    uint256 public referralPercentageChangeTimeLock;\\n    uint256 public constant REFERRAL_CHANGE_TIMELOCK = 24 hours;\\n\\n    // Presale structure (used in actual implementation)\\n    struct Presale {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 price;\\n        uint256 nextStagePrice;\\n        uint256 Sold;\\n        uint256 tokensToSell;\\n        uint256 UsdtHardcap;\\n        uint256 amountRaised;\\n        bool Active;\\n        bool isEnableClaim;\\n    }\\n\\n    struct ClaimData {\\n        uint256 claimAt;\\n        uint256 totalAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    // Referral data structure\\n    struct ReferralData {\\n        address referrer;\\n        uint256 totalReferralRewards;\\n        uint256 claimedReferralRewards;\\n        bool hasReferred; // Flag to check if user has made at least one referral\\n        uint256 referralCount; // Track number of successful referrals\\n    }\\n\\n    IERC20Metadata public USDTInterface;\\n    Aggregator internal aggregatorInterface;\\n    // https://docs.chain.link/docs/ethereum-addresses/ => (ETH / USD)\\n\\n    mapping(uint256 => bool) public paused;\\n    mapping(uint256 => Presale) public presale;\\n    mapping(address => mapping(uint256 => ClaimData)) public userClaimData;\\n    mapping(address => bool) public isExcludeMinToken;\\n    \\n    // Referral system mappings\\n    mapping(address => ReferralData) public referralData;\\n    mapping(address => bool) public hasQualifiedPurchase; // Track if user has purchased enough to qualify as referrer\\n    mapping(address => bool) public hasUsedReferral; // Prevent using multiple referrals\\n\\n    // Mapping to track users who want to stake ALL their tokens upon claim\\n    mapping(address => bool) public userStakingIntent;\\n\\n    // Track if the contract has been pre-funded\\n    bool public isTokenPreFunded = false;\\n\\n    event TokensPreFunded(address indexed token, uint256 amount, uint256 timestamp);\\n    \\n    event PresaleCreated(\\n        uint256 indexed _id,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    );\\n\\n    event PresaleUpdated(\\n        bytes32 indexed key,\\n        uint256 prevValue,\\n        uint256 newValue,\\n        uint256 timestamp\\n    );\\n\\n    event TokensBought(\\n        address indexed user,\\n        uint256 indexed id,\\n        address indexed purchaseToken,\\n        uint256 tokensBought,\\n        uint256 amountPaid,\\n        uint256 timestamp\\n    );\\n\\n    event TokensClaimedWithTimestamp(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event PresaleTokenAddressUpdated(\\n        address indexed prevValue,\\n        address indexed newValue,\\n        uint256 timestamp\\n    );\\n\\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\n    \\n    // Referral Events\\n    event ReferralRecorded(\\n        address indexed referrer, \\n        address indexed referee, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralRewardsClaimed(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralPercentageUpdated(\\n        uint256 previousPercentage, \\n        uint256 newPercentage, \\n        uint256 timestamp\\n    );\\n    \\n    event ReferralRewardsAdded(\\n        address indexed referrer, \\n        address indexed referee, \\n        uint256 referrerReward, \\n        uint256 refereeReward, \\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Constructor initializes the sale parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _SaleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) Ownable(msg.sender) {\\n        _initialize(_oracle, _usdt, _SaleToken, _MinTokenTobuy, _totalTokenSupply);\\n    }\\n    \\n    /**\\n     * @dev Internal initialization function to initialize without calling Ownable\\n     */\\n    function _initialize(\\n        address _oracle,\\n        address _usdt,\\n        address _SaleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) internal {\\n        require(_oracle != address(0), \\\"Oracle address cannot be zero\\\");\\n        require(_usdt != address(0), \\\"USDT address cannot be zero\\\");\\n        require(_SaleToken != address(0), \\\"Sale token address cannot be zero\\\");\\n        require(_MinTokenTobuy > 0, \\\"Minimum token to buy must be greater than zero\\\");\\n        require(_totalTokenSupply > 0, \\\"Total supply must be greater than zero\\\");\\n        \\n        aggregatorInterface = Aggregator(_oracle);\\n        SaleToken = _SaleToken;\\n        MinTokenTobuy = _MinTokenTobuy;\\n        USDTInterface = IERC20Metadata(_usdt);\\n        ETH_MULTIPLIER = (10**18);\\n        USDT_MULTIPLIER =(10**6);\\n        fundReceiver = msg.sender;\\n        \\n        // Store total supply\\n        totalTokenSupply = _totalTokenSupply;\\n        \\n        // Calculate allocations\\n        presaleTokens = _totalTokenSupply * PRESALE_ALLOCATION_PERCENT / PERCENT_DENOMINATOR; // 30% for presale\\n        maxReferralRewards = _totalTokenSupply * REFERRAL_ALLOCATION_PERCENT / PERCENT_DENOMINATOR; // 5% for referrals\\n        _maxStakingRewards = _totalTokenSupply * STAKING_ALLOCATION_PERCENT / PERCENT_DENOMINATOR; // 20% for staking rewards\\n    }\\n    \\n    /**\\n     * @dev Pre-fund the contract with tokens for presale, referrals, and staking\\n     * @notice Before calling this function:\\n     * 1. Deploy the token contract\\n     * 2. Transfer 55% of total supply to this contract address\\n     * 3. Call this function to verify and activate the pre-funding\\n     *\\n     * This marks the contract as ready for presale with tokens available for:\\n     * - Direct distribution for non-staking purchases\\n     * - Immediate staking during purchase (no need to claim first)\\n     * - Referral reward distribution\\n     */\\n    function preFundContract() external onlyOwner {\\n        require(!isTokenPreFunded, \\\"Contract already pre-funded\\\");\\n        require(SaleToken != address(0), \\\"Sale token not set\\\");\\n        \\n        // Calculate total tokens needed\\n        uint256 totalRequired = presaleTokens + maxReferralRewards + _maxStakingRewards;\\n        \\n        // Check contract balance\\n        uint256 contractBalance = IERC20(SaleToken).balanceOf(address(this));\\n        require(contractBalance >= totalRequired, \\\"Insufficient token balance\\\");\\n        \\n        // Set pre-funded flag\\n        isTokenPreFunded = true;\\n        \\n        emit TokensPreFunded(SaleToken, contractBalance, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Update the maximum referral rewards (5% of total supply)\\n     * @param _totalSupply The total token supply to calculate 5% from\\n     */\\n    function updateMaxReferralRewards(uint256 _totalSupply) external onlyOwner {\\n        require(_totalSupply > 0, \\\"Invalid total supply\\\");\\n        maxReferralRewards = _totalSupply * REFERRAL_ALLOCATION_PERCENT / PERCENT_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev Change referral reward percentage with timelock protection\\n     * @param _percentage New percentage (1-20)\\n     */\\n    function updateReferralRewardPercentage(uint256 _percentage) external onlyOwner {\\n        require(_percentage > 0 && _percentage <= MAX_REFERRAL_PERCENTAGE, \\\"Invalid percentage\\\");\\n        require(block.timestamp >= referralPercentageChangeTimeLock, \\\"Timelock active\\\");\\n        \\n        // Set new timelock for future changes\\n        referralPercentageChangeTimeLock = block.timestamp + REFERRAL_CHANGE_TIMELOCK;\\n        \\n        uint256 oldPercentage = referralRewardPercentage;\\n        referralRewardPercentage = _percentage;\\n        \\n        emit ReferralPercentageUpdated(oldPercentage, _percentage, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Records a valid referral relationship\\n     * @param _referrer Address of the referrer\\n     */\\n    function recordReferral(address _referrer) internal {\\n        // Security checks\\n        require(_referrer != address(0), \\\"Invalid referrer\\\");\\n        require(_referrer != msg.sender, \\\"Cannot refer yourself\\\");\\n        require(!hasUsedReferral[msg.sender], \\\"Already used a referral\\\");\\n        require(hasQualifiedPurchase[_referrer], \\\"Referrer has not qualified\\\");\\n        \\n        // Record the referral relationship\\n        referralData[msg.sender].referrer = _referrer;\\n        hasUsedReferral[msg.sender] = true;\\n        \\n        // Update referrer stats\\n        referralData[_referrer].hasReferred = true;\\n        referralData[_referrer].referralCount++;\\n        \\n        emit ReferralRecorded(_referrer, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Process referral rewards after a successful purchase\\n     * @param _user Address of the user who made a purchase\\n     * @param _tokenAmount Amount of tokens purchased\\n     */\\n    function processReferralRewards(address _user, uint256 _tokenAmount) internal {\\n        // Check if purchase meets minimum for referral qualification\\n        if (_tokenAmount >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            hasQualifiedPurchase[_user] = true;\\n        }\\n        \\n        // If user has a referrer, calculate and assign rewards\\n        address referrer = referralData[_user].referrer;\\n        if (referrer != address(0) && _tokenAmount >= MINIMUM_PURCHASE_FOR_REFERRAL) {\\n            // Calculate rewards (both get the same percentage)\\n            uint256 referrerReward = _tokenAmount * referralRewardPercentage / REFERRAL_DENOMINATOR;\\n            uint256 refereeReward = referrerReward; // Same reward for both parties\\n            \\n            // Check against the max referral rewards cap\\n            uint256 totalNewRewards = referrerReward + refereeReward;\\n            if (totalReferralRewardsIssued + totalNewRewards <= maxReferralRewards) {\\n                // Update referrer's rewards\\n                referralData[referrer].totalReferralRewards = \\n                    referralData[referrer].totalReferralRewards + referrerReward;\\n                \\n                // Update referee's rewards\\n                referralData[_user].totalReferralRewards = \\n                    referralData[_user].totalReferralRewards + refereeReward;\\n                \\n                // Update total rewards issued\\n                totalReferralRewardsIssued = totalReferralRewardsIssued + totalNewRewards;\\n                \\n                emit ReferralRewardsAdded(\\n                    referrer, \\n                    _user, \\n                    referrerReward, \\n                    refereeReward, \\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get claimable referral rewards for a user\\n     * @param _user Address of the user\\n     */\\n    function getClaimableReferralRewards(address _user) public view returns (uint256) {\\n        ReferralData memory data = referralData[_user];\\n        return data.totalReferralRewards - data.claimedReferralRewards;\\n    }\\n\\n    /**\\n     * @dev Claim referral rewards\\n     */\\n    function claimReferralRewards() external nonReentrant returns (bool) {\\n        uint256 amount = getClaimableReferralRewards(msg.sender);\\n        require(amount > 0, \\\"No rewards to claim\\\");\\n        \\n        // Verify there are enough tokens in the contract\\n        require(\\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n        \\n        // Update claimed amount\\n        referralData[msg.sender].claimedReferralRewards = \\n            referralData[msg.sender].claimedReferralRewards + amount;\\n        \\n        // Transfer tokens\\n        bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n        \\n        emit ReferralRewardsClaimed(msg.sender, amount, block.timestamp);\\n        return true;\\n    }\\n\\n    // Utility function to check if an address is a contract\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    function ChangeTokenToSell(address _token) public onlyOwner {\\n        SaleToken = _token;\\n    }\\n\\n    function EditMinTokenToBuy(uint256 _amount) public onlyOwner {\\n        MinTokenTobuy = _amount;\\n    }\\n\\n    function createPresale(uint256 _price,uint256 _nextStagePrice, uint256 _tokensToSell, uint256 _UsdtHardcap)\\n        external\\n        onlyOwner\\n    {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\n        require(presale[presaleId].Active == false, \\\"Previous Sale is Active\\\");\\n\\n        presaleId++;\\n\\n        presale[presaleId] = Presale(\\n            0,\\n            0,\\n            _price,\\n            _nextStagePrice,\\n            0,\\n            _tokensToSell,\\n            _UsdtHardcap,\\n            0,\\n            false,\\n            false\\n        );\\n\\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\\n    }\\n\\n    function startPresale() public onlyOwner {\\n        presale[presaleId].startTime = block.timestamp;\\n        presale[presaleId].Active = true;\\n    }\\n\\n    function endPresale() public onlyOwner {\\n        require(\\n            presale[presaleId].Active == true,\\n            \\\"This presale is already Inactive\\\"\\n        );\\n        presale[presaleId].endTime = block.timestamp;\\n        presale[presaleId].Active = false;\\n    }\\n\\n    // @dev enabel Claim amount\\n    function enableClaim(uint256 _id, bool _status)\\n        public\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        presale[_id].isEnableClaim = _status;\\n    }\\n\\n    function updatePresale(\\n        uint256 _id,\\n        uint256 _price,\\n        uint256 _nextStagePrice,\\n        uint256 _tokensToSell,\\n        uint256 _Hardcap\\n    ) external checkPresaleId(_id) onlyOwner {\\n        require(_price > 0, \\\"Zero price\\\");\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\n        presale[_id].price = _price;\\n        presale[_id].nextStagePrice = _nextStagePrice;\\n        presale[_id].tokensToSell = _tokensToSell;\\n        presale[_id].UsdtHardcap =_Hardcap;\\n    }\\n\\n    /**\\n     * @dev To update the fund receiving wallet\\n     * @param _wallet address of wallet to update\\n\\n     */\\n    function changeFundWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"Invalid parameters\\\");\\n        fundReceiver = _wallet;\\n    }\\n\\n    /**\\n     * @dev To update the USDT Token address\\n     * @param _newAddress Sale token address\\n     */\\n    function changeUSDTToken(address _newAddress) external onlyOwner {\\n        require(_newAddress != address(0), \\\"Zero token address\\\");\\n        USDTInterface = IERC20Metadata(_newAddress);\\n    }\\n\\n    /**\\n     * @dev To pause the presale\\n     * @param _id Presale id to update\\n     */\\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\n        require(!paused[_id], \\\"Already paused\\\");\\n        paused[_id] = true;\\n        emit PresalePaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev To unpause the presale\\n     * @param _id Presale id to update\\n     */\\n    function unPausePresale(uint256 _id)\\n        external\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        require(paused[_id], \\\"Not paused\\\");\\n        paused[_id] = false;\\n        emit PresaleUnpaused(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev To get latest ethereum price in 10**18 format\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\n        price = (price * (10**10));\\n        return uint256(price);\\n    }\\n\\n    modifier checkPresaleId(uint256 _id) {\\n        require(_id > 0 && _id <= presaleId, \\\"Invalid presale id\\\");\\n        _;\\n    }\\n\\n    modifier checkSaleState(uint256 _id, uint256 amount) {\\n        require(\\n            block.timestamp >= presale[_id].startTime &&\\n                presale[_id].Active == true,\\n            \\\"Invalid time for buying\\\"\\n        );\\n        require(\\n            amount > 0 && amount <= presale[_id].tokensToSell-presale[_id].Sold,\\n            \\\"Invalid sale amount\\\"\\n        );\\n        _;\\n    }\\n\\n    function ExcludeAccouctFromMinBuy(address _user, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        isExcludeMinToken[_user] = _status;\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get ETH price for given amount\\n     * @param _id Presale id\\n     * @param amount No of tokens to buy\\n     */\\n    function ethBuyHelper(uint256 _id, uint256 amount)\\n        external\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 ethAmount)\\n    {\\n        uint256 usdPrice = (amount * presale[_id].price);\\n        ethAmount = (usdPrice * ETH_MULTIPLIER) / (getLatestPrice() * 10**IERC20Metadata(SaleToken).decimals());\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get USDT price for given amount\\n     * @param _id Presale id\\n     * @param amount No of tokens to buy\\n     */\\n    function usdtBuyHelper(uint256 _id, uint256 amount)\\n        external\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 usdPrice)\\n    {\\n        usdPrice = (amount * presale[_id].price) / 10**IERC20Metadata(SaleToken).decimals();\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for eth amount\\n     * @param _id Presale id\\n     * @param amount No of eth\\n     */\\n    function ethToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        returns (uint256 _tokens)\\n    {\\n        uint256 usdAmount = amount * getLatestPrice() * USDT_MULTIPLIER / (ETH_MULTIPLIER * ETH_MULTIPLIER);\\n        _tokens = usdtToTokens(_id, usdAmount);\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get tokens for given usdt amount\\n     * @param _id Presale id\\n     * @param amount No of usdt\\n     */\\n    function usdtToTokens(uint256 _id, uint256 amount)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256 _tokens)\\n    {\\n        _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH Payment failed\\\");\\n    }\\n\\n    function unlockToken(uint256 _id)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        onlyOwner\\n    {\\n        require(\\n            block.timestamp >= presale[_id].endTime,\\n            \\\"You can only unlock on finalize\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get claimable tokens for a given presale.\\n     * @param user User address\\n     * @param _id Presale id\\n     */\\n    function claimableAmount(address user, uint256 _id)\\n        public\\n        view\\n        checkPresaleId(_id)\\n        returns (uint256)\\n    {\\n        ClaimData memory _user = userClaimData[user][_id];\\n\\n        require(_user.totalAmount > 0, \\\"Nothing to claim\\\");\\n        uint256 amount = _user.totalAmount - _user.claimedAmount;\\n        require(amount > 0, \\\"Already claimed\\\");\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev To claim tokens from a multiple presale\\n     * @param _id Presale id\\n     */\\n    function claimMultiple(uint256[] calldata _id) external returns (bool) {\\n        require(_id.length > 0, \\\"Zero ID length\\\");\\n        for (uint256 i; i < _id.length; i++) {\\n            require(claimAmount(_id[i]), \\\"Claim failed\\\");\\n        }\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Modified claim function to handle only non-staked tokens\\n     * @param _id Presale id\\n     */\\n    function claimAmount(uint256 _id)\\n        public \\n        virtual\\n        checkPresaleId(_id)\\n        returns (bool)\\n    {\\n        uint256 amount = claimableAmount(msg.sender, _id);\\n        \\n        require(amount > 0, \\\"Zero claim amount\\\");\\n        require(\\n            SaleToken != address(0),\\n            \\\"Presale token address not set\\\"\\n        );\\n        require(\\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n\\n        require((presale[_id].isEnableClaim == true), \\\"Claim is not enable\\\");\\n\\n        userClaimData[msg.sender][_id].claimAt = block.timestamp;\\n        userClaimData[msg.sender][_id].claimedAmount += amount;\\n        \\n        bool success = IERC20(SaleToken).transfer(msg.sender, amount);\\n        require(success, \\\"Token transfer failed\\\");\\n        \\n        emit TokensClaimedWithTimestamp(msg.sender, _id, amount, block.timestamp);\\n        return true;\\n    }\\n    \\n    // Add functions to get user referral status for the frontend\\n    function getUserReferralInfo(address _user) external view returns (\\n        address referrer,\\n        uint256 totalRewards,\\n        uint256 claimedRewards,\\n        uint256 pendingRewards,\\n        bool isQualifiedReferrer,\\n        uint256 referralCount\\n    ) {\\n        ReferralData memory data = referralData[_user];\\n        return (\\n            data.referrer,\\n            data.totalReferralRewards,\\n            data.claimedReferralRewards,\\n            data.totalReferralRewards - data.claimedReferralRewards,\\n            hasQualifiedPurchase[_user],\\n            data.referralCount\\n        );\\n    }\\n\\n    // Get referral program stats\\n    function getReferralProgramStats() external view returns (\\n        uint256 currentPercentage,\\n        uint256 totalRewardsIssued,\\n        uint256 maxRewards,\\n        uint256 remainingRewards,\\n        uint256 nextPercentageChangeAllowed\\n    ) {\\n        return (\\n            referralRewardPercentage,\\n            totalReferralRewardsIssued,\\n            maxReferralRewards,\\n            maxReferralRewards - totalReferralRewardsIssued,\\n            referralPercentageChangeTimeLock\\n        );\\n    }\\n\\n    // Check if a user has a valid referral link to share\\n    function canReferOthers(address _user) external view returns (bool) {\\n        return hasQualifiedPurchase[_user];\\n    }\\n\\n    function WithdrawTokens(address _token, uint256 amount) external virtual onlyOwner {\\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for rewards\\n            uint256 reservedTokens = totalReferralRewardsIssued;\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(\\n                contractBalance - amount >= reservedTokens,\\n                \\\"Cannot withdraw tokens reserved for rewards\\\"\\n            );\\n        }\\n        \\n        IERC20(_token).transfer(fundReceiver, amount);\\n    }\\n\\n    function WithdrawContractFunds(uint256 amount) external onlyOwner {\\n        sendValue(payable(fundReceiver), amount);\\n    }\\n\\n    /**\\n     * Accessor function for maxStakingRewards\\n     */\\n    function maxStakingRewards() public view virtual returns (uint256) {\\n        return _maxStakingRewards;\\n    }\\n} \",\"keccak256\":\"0x169e568485c93e3ae4f79d8cb903f8472dce3cf83c10b200acfc412c6b6810c8\",\"license\":\"MIT\"},\"contracts/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Import SaleBase \\nimport \\\"./SaleBase.sol\\\";\\n\\n/**\\n * @title Staking Manager Contract\\n * @notice This contract handles token staking functionality\\n */\\ncontract StakingManager is SaleBase {\\n    // Keep some constants to maintain internal functionality\\n    uint256 internal constant TOKEN_DECIMALS_INT = 10**18;\\n    uint256 internal constant PERCENT_DENOMINATOR_INT = 100;\\n    \\n    // Staking system constants and variables\\n    uint256 public constant STAKING_LOCK_PERIOD = 365 days; // 365 days\\n    uint256 public constant STAKING_APY = 200; // 200% APY\\n    uint256 public totalStaked;\\n    uint256 public stakingCap; // Cap at 6,666,666,667 tokens\\n    bool public stakingActive;\\n    uint256 public totalStakingRewardsIssued;\\n    \\n    // Maximum staking rewards allocation (shadows the one in SaleBase)\\n    uint256 private _maxStakingRewards;\\n    \\n    // Staking data structure\\n    struct StakeInfo {\\n        uint256 stakedAmount;\\n        uint256 stakingTimestamp;\\n        uint256 unlockTimestamp;\\n        bool hasWithdrawn;\\n    }\\n    \\n    // Staking system mappings\\n    mapping(address => StakeInfo) public userStakes;\\n\\n    // New Staking Events\\n    event TokensStaked(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 stakingTime, \\n        uint256 unlockTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed user, \\n        uint256 stakedAmount, \\n        uint256 rewardAmount, \\n        uint256 timestamp\\n    );\\n\\n    event StakingStatusChanged(\\n        bool isActive,\\n        uint256 timestamp\\n    );\\n    \\n    event StakingCapUpdated(\\n        uint256 previousCap,\\n        uint256 newCap,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @dev Constructor initializes staking and sale parameters\\n     * @param _oracle Chainlink oracle for ETH price feed\\n     * @param _usdt USDT token address\\n     * @param _saleToken Sale token address\\n     * @param _MinTokenTobuy Minimum tokens that can be purchased\\n     * @param _totalTokenSupply Total token supply\\n     */\\n    constructor(\\n        address _oracle,\\n        address _usdt,\\n        address _saleToken,\\n        uint256 _MinTokenTobuy,\\n        uint256 _totalTokenSupply\\n    ) \\n        SaleBase(_oracle, _usdt, _saleToken, _MinTokenTobuy, _totalTokenSupply) \\n    {\\n        // Initialize staking parameters\\n        stakingCap = 6666666667 * TOKEN_DECIMALS_INT; // 6,666,666,667 tokens\\n        stakingActive = true; // Staking is active by default\\n        \\n        // Calculate maximum staking rewards (20% of total supply)\\n        _maxStakingRewards = _totalTokenSupply * 20 / PERCENT_DENOMINATOR_INT;\\n    }\\n    \\n    /**\\n     * @dev Maximum available tokens for staking rewards (20% of total supply)\\n     * @return The maximum number of tokens available for staking rewards\\n     */\\n    function maxStakingRewards() public view override returns (uint256) {\\n        return _maxStakingRewards;\\n    }\\n    \\n    /**\\n     * @dev Toggle staking status (active/inactive)\\n     * @param _status New staking status\\n     */\\n    function setStakingStatus(bool _status) external onlyOwner {\\n        stakingActive = _status;\\n        emit StakingStatusChanged(_status, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Helper function that handles token staking directly during purchase\\n     * @param _user Address of the user\\n     * @param _amount Amount of tokens to stake\\n     * @notice This function is called automatically during purchase if staking is selected\\n     * @notice Tokens are locked for 365 days with 200% APY\\n     */\\n    function _handleTokenStaking(address _user, uint256 _amount) internal {\\n        // Ensure staking is active\\n        require(stakingActive, \\\"Staking is not active\\\");\\n        require(_amount > 0, \\\"Cannot stake zero amount\\\");\\n        require(\\n            totalStaked + _amount <= stakingCap,\\n            \\\"Staking cap would be exceeded\\\"\\n        );\\n        \\n        // Calculate potential rewards to verify we stay within the rewards limit\\n        uint256 potentialReward = _amount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        require(\\n            totalStakingRewardsIssued + potentialReward <= maxStakingRewards(),\\n            \\\"Not enough tokens in the staking reward pool\\\"\\n        );\\n        \\n        // Update global state for staking\\n        totalStaked = totalStaked + _amount;\\n        totalStakingRewardsIssued = totalStakingRewardsIssued + potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        StakeInfo storage userStake = userStakes[_user];\\n        \\n        // If user already has a stake, handle appropriately\\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            // If existing stake is still locked, cannot add to it\\n            if (block.timestamp < userStake.unlockTimestamp) {\\n                revert(\\\"Cannot stake when you have a locked stake\\\");\\n            } else {\\n                // Existing stake is unlocked, withdraw it first\\n                uint256 stakedAmount = userStake.stakedAmount;\\n                uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n                \\n                // Mark as withdrawn to prevent double-dipping\\n                userStake.hasWithdrawn = true;\\n                \\n                // Transfer rewards and original stake back\\n                bool transferSuccess = IERC20(SaleToken).transfer(_user, stakedAmount + reward);\\n                require(transferSuccess, \\\"Stake withdrawal failed\\\");\\n                \\n                emit StakeWithdrawn(_user, stakedAmount, reward, block.timestamp);\\n            }\\n        }\\n        \\n        // Create a new stake\\n        userStake.stakedAmount = _amount;\\n        userStake.stakingTimestamp = block.timestamp;\\n        userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n        userStake.hasWithdrawn = false;\\n        \\n        emit TokensStaked(_user, _amount, block.timestamp, userStake.unlockTimestamp);\\n    }\\n\\n    /**\\n     * @dev Stake tokens with 1-year lock and 200% APY\\n     * @param _amount Amount of tokens to stake\\n     */\\n    function stakeTokens(uint256 _amount) external nonReentrant {\\n        require(stakingActive, \\\"Staking is not active\\\");\\n        require(_amount > 0, \\\"Cannot stake zero amount\\\");\\n        require(\\n            totalStaked + _amount <= stakingCap,\\n            \\\"Staking cap would be exceeded\\\"\\n        );\\n        \\n        // Calculate potential rewards to verify we stay within the rewards limit\\n        uint256 potentialReward = _amount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        require(\\n            totalStakingRewardsIssued + potentialReward <= maxStakingRewards(),\\n            \\\"Not enough tokens in the staking reward pool\\\"\\n        );\\n        \\n        // Update global state\\n        totalStaked = totalStaked + _amount;\\n        totalStakingRewardsIssued = totalStakingRewardsIssued + potentialReward;\\n        \\n        // Auto-disable staking if cap is reached\\n        if (totalStaked >= stakingCap) {\\n            stakingActive = false;\\n            emit StakingStatusChanged(false, block.timestamp);\\n        }\\n        \\n        // Update user stake\\n        StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        // If user already has a stake, we need special handling\\n        if (userStake.stakedAmount > 0 && !userStake.hasWithdrawn) {\\n            require(\\n                block.timestamp >= userStake.unlockTimestamp,\\n                \\\"Cannot add to existing stake while locked\\\"\\n            );\\n            \\n            // Withdraw previous stake first (internally)\\n            uint256 stakedAmount = userStake.stakedAmount;\\n            uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n            \\n            // Mark as withdrawn to prevent double-dipping\\n            userStake.hasWithdrawn = true;\\n            \\n            // Transfer rewards and original stake back\\n            bool transferSuccess = IERC20(SaleToken).transfer(msg.sender, stakedAmount + reward);\\n            require(transferSuccess, \\\"Token transfer failed\\\");\\n            \\n            // Create a new stake\\n            userStake.stakedAmount = _amount;\\n            userStake.stakingTimestamp = block.timestamp;\\n            userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n            userStake.hasWithdrawn = false;\\n        } else {\\n            // First time stake or previous stake was withdrawn\\n            userStake.stakedAmount = _amount;\\n            userStake.stakingTimestamp = block.timestamp;\\n            userStake.unlockTimestamp = block.timestamp + STAKING_LOCK_PERIOD;\\n            userStake.hasWithdrawn = false;\\n        }\\n        \\n        // Transfer tokens from user to contract (SafeERC20 pattern)\\n        uint256 balanceBefore = IERC20(SaleToken).balanceOf(address(this));\\n        bool transferFromSuccess = IERC20(SaleToken).transferFrom(msg.sender, address(this), _amount);\\n        require(transferFromSuccess, \\\"Token transfer failed\\\");\\n        \\n        // Verify tokens were actually received (protection against fee-on-transfer tokens)\\n        uint256 balanceAfter = IERC20(SaleToken).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore + _amount, \\\"Incorrect amount of tokens received\\\");\\n        \\n        emit TokensStaked(msg.sender, _amount, block.timestamp, userStake.unlockTimestamp);\\n    }\\n    \\n    /**\\n     * @dev Withdraw staked tokens and rewards after lock period\\n     */\\n    function withdrawStake() external nonReentrant {\\n        StakeInfo storage userStake = userStakes[msg.sender];\\n        \\n        require(userStake.stakedAmount > 0, \\\"No stake found\\\");\\n        require(!userStake.hasWithdrawn, \\\"Already withdrawn\\\");\\n        require(\\n            block.timestamp >= userStake.unlockTimestamp,\\n            \\\"Stake is still locked\\\"\\n        );\\n        \\n        uint256 stakedAmount = userStake.stakedAmount;\\n        uint256 reward = stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        uint256 totalAmount = stakedAmount + reward;\\n        \\n        // Mark as withdrawn to prevent double-dipping\\n        userStake.hasWithdrawn = true;\\n        \\n        // Update global state\\n        totalStaked = totalStaked - stakedAmount;\\n        \\n        // Verify there are enough tokens in the contract\\n        require(\\n            totalAmount <= IERC20(SaleToken).balanceOf(address(this)),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n        \\n        // Transfer rewards and original stake\\n        bool withdrawSuccess = IERC20(SaleToken).transfer(msg.sender, totalAmount);\\n        require(withdrawSuccess, \\\"Token transfer failed\\\");\\n        \\n        emit StakeWithdrawn(msg.sender, stakedAmount, reward, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Get user staking information\\n     * @param _user Address of the user\\n     */\\n    function getUserStakingInfo(address _user) external view returns (\\n        uint256 stakedAmount,\\n        uint256 stakingTime,\\n        uint256 unlockTime,\\n        bool isLocked,\\n        bool hasWithdrawn,\\n        uint256 potentialReward,\\n        uint256 totalClaimable\\n    ) {\\n        StakeInfo storage stake = userStakes[_user];\\n        bool locked = block.timestamp < stake.unlockTimestamp;\\n        uint256 reward = stake.stakedAmount * STAKING_APY / PERCENT_DENOMINATOR_INT;\\n        \\n        return (\\n            stake.stakedAmount,\\n            stake.stakingTimestamp,\\n            stake.unlockTimestamp,\\n            locked,\\n            stake.hasWithdrawn,\\n            reward,\\n            stake.hasWithdrawn ? 0 : stake.stakedAmount + reward\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get staking program statistics\\n     */\\n    function getStakingStats() external view returns (\\n        uint256 _totalStaked,\\n        uint256 _stakingCap,\\n        uint256 _stakingAPY,\\n        bool _isActive,\\n        uint256 _maxRewards,\\n        uint256 _totalRewardsCommitted,\\n        uint256 _remainingRewards\\n    ) {\\n        return (\\n            totalStaked,\\n            stakingCap,\\n            STAKING_APY,\\n            stakingActive,\\n            maxStakingRewards(),\\n            totalStakingRewardsIssued,\\n            maxStakingRewards() - totalStakingRewardsIssued\\n        );\\n    }\\n\\n    /**\\n     * @dev Quick check if staking is available and capacity info\\n     * @return _canStake True if staking is active and cap not reached\\n     * @return _remainingCapacity Remaining capacity for staking\\n     * @return _percentFilled Percentage of staking capacity filled (0-100)\\n     */\\n    function getStakingAvailability() external view returns (\\n        bool _canStake,\\n        uint256 _remainingCapacity,\\n        uint256 _percentFilled\\n    ) {\\n        bool canStake = stakingActive && totalStaked < stakingCap;\\n        uint256 remainingCapacity = stakingCap > totalStaked ? stakingCap - totalStaked : 0;\\n        uint256 percentFilled = totalStaked * 100 / stakingCap;\\n        \\n        return (canStake, remainingCapacity, percentFilled);\\n    }\\n    \\n    /**\\n     * @dev Update staking cap\\n     * @param _newCap New staking cap\\n     */\\n    function updateStakingCap(uint256 _newCap) external onlyOwner {\\n        require(_newCap >= totalStaked, \\\"New cap must be >= total staked\\\");\\n        \\n        uint256 oldCap = stakingCap;\\n        stakingCap = _newCap;\\n        \\n        emit StakingCapUpdated(oldCap, _newCap, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Safe withdrawal function for accumulated tokens\\n     * @param _token Token address\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient address\\n     */\\n    function safeWithdraw(address _token, uint256 _amount, address _recipient) external onlyOwner {\\n        require(_recipient != address(0), \\\"Cannot withdraw to zero address\\\");\\n        \\n        if (_token == SaleToken) {\\n            // Calculate tokens needed for staking rewards\\n            uint256 reservedForStaking = totalStaked * (STAKING_APY + 100) / PERCENT_DENOMINATOR_INT;\\n            \\n            // Check we're not withdrawing reserved tokens\\n            uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n            require(\\n                contractBalance - _amount >= reservedForStaking,\\n                \\\"Cannot withdraw tokens reserved for staking rewards\\\"\\n            );\\n        }\\n        \\n        bool withdrawSuccess = IERC20(_token).transfer(_recipient, _amount);\\n        require(withdrawSuccess, \\\"Token transfer failed\\\");\\n    }\\n} \",\"keccak256\":\"0xd48806b6b7f99284b6f30cf14001bccebb0d4c69834d5789baa5a073c71e24b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "All tokens (presale, referral, staking) must be sent to the contract before starting Token Allocation: - 30% for presale (30,000,000,000 tokens) - 5% for referral rewards (5,000,000,000 tokens) - 20% for staking rewards (20,000,000,000 tokens) Total: 55% of total supply must be transferred to this contract",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "buyWithEth(address,bool)": {
        "details": "To buy into a presale using ETH with option for immediate staking",
        "params": {
          "referrer": "Referrer address (optional, use address(0) for no referrer)",
          "shouldStake": "If true, tokens are immediately staked for 1 year with 200% APY"
        }
      },
      "buyWithUSDT(uint256,address,bool)": {
        "details": "To buy into a presale using USDT with option for immediate staking",
        "params": {
          "referrer": "Referrer address (optional, use address(0) for no referrer)",
          "shouldStake": "If true, tokens are immediately staked for 1 year with 200% APY",
          "usdAmount": "USDT amount to buy tokens"
        }
      },
      "changeFundWallet(address)": {
        "details": "To update the fund receiving wallet",
        "params": {
          "_wallet": "address of wallet to update"
        }
      },
      "changeUSDTToken(address)": {
        "details": "To update the USDT Token address",
        "params": {
          "_newAddress": "Sale token address"
        }
      },
      "claimAmount(uint256)": {
        "details": "Modified claim function to handle only non-staked tokens",
        "params": {
          "_id": "Presale id"
        }
      },
      "claimMultiple(uint256[])": {
        "details": "To claim tokens from a multiple presale",
        "params": {
          "_id": "Presale id"
        }
      },
      "claimReferralRewards()": {
        "details": "Claim referral rewards"
      },
      "claimableAmount(address,uint256)": {
        "details": "Helper funtion to get claimable tokens for a given presale.",
        "params": {
          "_id": "Presale id",
          "user": "User address"
        }
      },
      "constructor": {
        "details": "Constructor sets up the contract parameters",
        "params": {
          "_MinTokenTobuy": "Minimum tokens that can be purchased",
          "_SaleToken": "Sale token address",
          "_oracle": "Chainlink oracle for ETH price feed",
          "_totalTokenSupply": "Total token supply (100,000,000,000)",
          "_usdt": "USDT token address"
        }
      },
      "ethBuyHelper(uint256,uint256)": {
        "details": "Helper funtion to get ETH price for given amount",
        "params": {
          "_id": "Presale id",
          "amount": "No of tokens to buy"
        }
      },
      "ethToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for eth amount",
        "params": {
          "_id": "Presale id",
          "amount": "No of eth"
        }
      },
      "getClaimableReferralRewards(address)": {
        "details": "Get claimable referral rewards for a user",
        "params": {
          "_user": "Address of the user"
        }
      },
      "getLatestPrice()": {
        "details": "To get latest ethereum price in 10**18 format"
      },
      "getStakingAvailability()": {
        "details": "Quick check if staking is available and capacity info",
        "returns": {
          "_canStake": "True if staking is active and cap not reached",
          "_percentFilled": "Percentage of staking capacity filled (0-100)",
          "_remainingCapacity": "Remaining capacity for staking"
        }
      },
      "getStakingStats()": {
        "details": "Get staking program statistics"
      },
      "getUserStakingInfo(address)": {
        "details": "Get user staking information",
        "params": {
          "_user": "Address of the user"
        }
      },
      "maxStakingRewards()": {
        "details": "Maximum available tokens for staking rewards (20% of total supply)",
        "returns": {
          "_0": "The maximum number of tokens available for staking rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pausePresale(uint256)": {
        "details": "To pause the presale",
        "params": {
          "_id": "Presale id to update"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "preFundContract()": {
        "details": "Pre-fund the contract with tokens for presale, referrals, and staking"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeWithdraw(address,uint256,address)": {
        "details": "Safe withdrawal function for accumulated tokens",
        "params": {
          "_amount": "Amount to withdraw",
          "_recipient": "Recipient address",
          "_token": "Token address"
        }
      },
      "setStakingStatus(bool)": {
        "details": "Toggle staking status (active/inactive)",
        "params": {
          "_status": "New staking status"
        }
      },
      "stakeTokens(uint256)": {
        "details": "Stake tokens with 1-year lock and 200% APY",
        "params": {
          "_amount": "Amount of tokens to stake"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPausePresale(uint256)": {
        "details": "To unpause the presale",
        "params": {
          "_id": "Presale id to update"
        }
      },
      "updateMaxReferralRewards(uint256)": {
        "details": "Update the maximum referral rewards (5% of total supply)",
        "params": {
          "_totalSupply": "The total token supply to calculate 5% from"
        }
      },
      "updateReferralRewardPercentage(uint256)": {
        "details": "Change referral reward percentage with timelock protection",
        "params": {
          "_percentage": "New percentage (1-20)"
        }
      },
      "updateStakingCap(uint256)": {
        "details": "Update staking cap",
        "params": {
          "_newCap": "New staking cap"
        }
      },
      "usdtBuyHelper(uint256,uint256)": {
        "details": "Helper funtion to get USDT price for given amount",
        "params": {
          "_id": "Presale id",
          "amount": "No of tokens to buy"
        }
      },
      "usdtToTokens(uint256,uint256)": {
        "details": "Helper funtion to get tokens for given usdt amount",
        "params": {
          "_id": "Presale id",
          "amount": "No of usdt"
        }
      },
      "withdrawStake()": {
        "details": "Withdraw staked tokens and rewards after lock period"
      }
    },
    "title": "PreSale and Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "preFundContract()": {
        "notice": "Before calling this function: 1. Deploy the token contract 2. Transfer 55% of total supply to this contract address 3. Call this function to verify and activate the pre-funding This marks the contract as ready for presale with tokens available for: - Direct distribution for non-staking purchases - Immediate staking during purchase (no need to claim first) - Referral reward distribution"
      }
    },
    "notice": "This contract handles token presale, referral rewards, and staking functionality",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1652,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1542,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2460,
        "contract": "contracts/Sale.sol:Sale",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2462,
        "contract": "contracts/Sale.sol:Sale",
        "label": "usdt",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2464,
        "contract": "contracts/Sale.sol:Sale",
        "label": "SaleToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2466,
        "contract": "contracts/Sale.sol:Sale",
        "label": "MinTokenTobuy",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2468,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalAmountBought",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2470,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalUSDTRaised",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2472,
        "contract": "contracts/Sale.sol:Sale",
        "label": "TotalReferralAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2474,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalTokenSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2507,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presales",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(PresaleInfo)2489_storage)dyn_storage"
      },
      {
        "astId": 2513,
        "contract": "contracts/Sale.sol:Sale",
        "label": "UserPresaleBuying",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2519,
        "contract": "contracts/Sale.sol:Sale",
        "label": "Claimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2524,
        "contract": "contracts/Sale.sol:Sale",
        "label": "users",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(User)2503_storage)"
      },
      {
        "astId": 2528,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2532,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isAdmin",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2628,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2630,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDT_MULTIPLIER",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2632,
        "contract": "contracts/Sale.sol:Sale",
        "label": "ETH_MULTIPLIER",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2634,
        "contract": "contracts/Sale.sol:Sale",
        "label": "fundReceiver",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 2645,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presaleTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2647,
        "contract": "contracts/Sale.sol:Sale",
        "label": "maxReferralRewards",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2649,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_maxStakingRewards",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2657,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralRewardPercentage",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2662,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalReferralRewardsIssued",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2667,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralPercentageChangeTimeLock",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2712,
        "contract": "contracts/Sale.sol:Sale",
        "label": "USDTInterface",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IERC20Metadata)1039"
      },
      {
        "astId": 2715,
        "contract": "contracts/Sale.sol:Sale",
        "label": "aggregatorInterface",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(Aggregator)2431"
      },
      {
        "astId": 2719,
        "contract": "contracts/Sale.sol:Sale",
        "label": "paused",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2724,
        "contract": "contracts/Sale.sol:Sale",
        "label": "presale",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_struct(Presale)2691_storage)"
      },
      {
        "astId": 2731,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userClaimData",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)2698_storage))"
      },
      {
        "astId": 2735,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isExcludeMinToken",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2740,
        "contract": "contracts/Sale.sol:Sale",
        "label": "referralData",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_struct(ReferralData)2709_storage)"
      },
      {
        "astId": 2744,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasQualifiedPurchase",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2748,
        "contract": "contracts/Sale.sol:Sale",
        "label": "hasUsedReferral",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2752,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakingIntent",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2755,
        "contract": "contracts/Sale.sol:Sale",
        "label": "isTokenPreFunded",
        "offset": 0,
        "slot": "36",
        "type": "t_bool"
      },
      {
        "astId": 4451,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStaked",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 4453,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingCap",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 4455,
        "contract": "contracts/Sale.sol:Sale",
        "label": "stakingActive",
        "offset": 0,
        "slot": "39",
        "type": "t_bool"
      },
      {
        "astId": 4457,
        "contract": "contracts/Sale.sol:Sale",
        "label": "totalStakingRewardsIssued",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 4459,
        "contract": "contracts/Sale.sol:Sale",
        "label": "_maxStakingRewards",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 4473,
        "contract": "contracts/Sale.sol:Sale",
        "label": "userStakes",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_struct(StakeInfo)4468_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PresaleInfo)2489_storage)dyn_storage": {
        "base": "t_struct(PresaleInfo)2489_storage",
        "encoding": "dynamic_array",
        "label": "struct SaleBase.PresaleInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Aggregator)2431": {
        "encoding": "inplace",
        "label": "contract Aggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)1039": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimData)2698_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SaleBase.ClaimData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimData)2698_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(ReferralData)2709_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SaleBase.ReferralData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferralData)2709_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)4468_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingManager.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)4468_storage"
      },
      "t_mapping(t_address,t_struct(User)2503_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SaleBase.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2503_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ClaimData)2698_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SaleBase.ClaimData)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimData)2698_storage"
      },
      "t_mapping(t_uint256,t_struct(Presale)2691_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SaleBase.Presale)",
        "numberOfBytes": "32",
        "value": "t_struct(Presale)2691_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ClaimData)2698_storage": {
        "encoding": "inplace",
        "label": "struct SaleBase.ClaimData",
        "members": [
          {
            "astId": 2693,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2695,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2697,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Presale)2691_storage": {
        "encoding": "inplace",
        "label": "struct SaleBase.Presale",
        "members": [
          {
            "astId": 2672,
            "contract": "contracts/Sale.sol:Sale",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2674,
            "contract": "contracts/Sale.sol:Sale",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2676,
            "contract": "contracts/Sale.sol:Sale",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2678,
            "contract": "contracts/Sale.sol:Sale",
            "label": "nextStagePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2680,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2682,
            "contract": "contracts/Sale.sol:Sale",
            "label": "tokensToSell",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2684,
            "contract": "contracts/Sale.sol:Sale",
            "label": "UsdtHardcap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2686,
            "contract": "contracts/Sale.sol:Sale",
            "label": "amountRaised",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2688,
            "contract": "contracts/Sale.sol:Sale",
            "label": "Active",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 2690,
            "contract": "contracts/Sale.sol:Sale",
            "label": "isEnableClaim",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(PresaleInfo)2489_storage": {
        "encoding": "inplace",
        "label": "struct SaleBase.PresaleInfo",
        "members": [
          {
            "astId": 2476,
            "contract": "contracts/Sale.sol:Sale",
            "label": "cap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2478,
            "contract": "contracts/Sale.sol:Sale",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2480,
            "contract": "contracts/Sale.sol:Sale",
            "label": "sold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2482,
            "contract": "contracts/Sale.sol:Sale",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2484,
            "contract": "contracts/Sale.sol:Sale",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2486,
            "contract": "contracts/Sale.sol:Sale",
            "label": "ClaimAble",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2488,
            "contract": "contracts/Sale.sol:Sale",
            "label": "isClosed",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReferralData)2709_storage": {
        "encoding": "inplace",
        "label": "struct SaleBase.ReferralData",
        "members": [
          {
            "astId": 2700,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2702,
            "contract": "contracts/Sale.sol:Sale",
            "label": "totalReferralRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2704,
            "contract": "contracts/Sale.sol:Sale",
            "label": "claimedReferralRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2706,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasReferred",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2708,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referralCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakeInfo)4468_storage": {
        "encoding": "inplace",
        "label": "struct StakingManager.StakeInfo",
        "members": [
          {
            "astId": 4461,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4463,
            "contract": "contracts/Sale.sol:Sale",
            "label": "stakingTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4465,
            "contract": "contracts/Sale.sol:Sale",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4467,
            "contract": "contracts/Sale.sol:Sale",
            "label": "hasWithdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)2503_storage": {
        "encoding": "inplace",
        "label": "struct SaleBase.User",
        "members": [
          {
            "astId": 2491,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalBoughtTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2493,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2495,
            "contract": "contracts/Sale.sol:Sale",
            "label": "TotalCollectedReferral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2497,
            "contract": "contracts/Sale.sol:Sale",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2500,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referredUsers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2502,
            "contract": "contracts/Sale.sol:Sale",
            "label": "referrer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}